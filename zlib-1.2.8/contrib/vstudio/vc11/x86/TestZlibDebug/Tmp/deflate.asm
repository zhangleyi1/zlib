; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.31101.0 

	TITLE	D:\vs_project\zlib-1.2.8\deflate.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_deflate_copyright
CONST	SEGMENT
_deflate_copyright DB ' deflate 1.2.8 Copyright 1995-2013 Jean-loup Gaill'
	DB	'y and Mark Adler ', 00H
	ORG $+4
_configuration_table DW 00H
	DW	00H
	DW	00H
	DW	00H
	DD	FLAT:_deflate_stored
	DW	04H
	DW	04H
	DW	08H
	DW	04H
	DD	FLAT:_deflate_fast
	DW	04H
	DW	05H
	DW	010H
	DW	08H
	DD	FLAT:_deflate_fast
	DW	04H
	DW	06H
	DW	020H
	DW	020H
	DD	FLAT:_deflate_fast
	DW	04H
	DW	04H
	DW	010H
	DW	010H
	DD	FLAT:_deflate_slow
	DW	08H
	DW	010H
	DW	020H
	DW	020H
	DD	FLAT:_deflate_slow
	DW	08H
	DW	010H
	DW	080H
	DW	080H
	DD	FLAT:_deflate_slow
	DW	08H
	DW	020H
	DW	080H
	DW	0100H
	DD	FLAT:_deflate_slow
	DW	020H
	DW	080H
	DW	0102H
	DW	0400H
	DD	FLAT:_deflate_slow
	DW	020H
	DW	0102H
	DW	0102H
	DW	01000H
	DD	FLAT:_deflate_slow
?my_version@?1??deflateInit2_@@9@9 DB '1.2.8', 00H	; `deflateInit2_'::`2'::my_version
CONST	ENDS
PUBLIC	_deflate@8
PUBLIC	_deflateEnd@4
PUBLIC	_deflateSetDictionary@12
PUBLIC	_deflateCopy@8
PUBLIC	_deflateReset@4
PUBLIC	_deflateParams@12
PUBLIC	_deflateTune@20
PUBLIC	_deflateBound@8
PUBLIC	_deflatePending@12
PUBLIC	_deflatePrime@12
PUBLIC	_deflateSetHeader@8
PUBLIC	_deflateInit_@16
PUBLIC	_deflateInit2_@32
PUBLIC	_deflateResetKeep@4
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_adler32@12:PROC
EXTRN	_crc32@12:PROC
EXTRN	_zcalloc:PROC
EXTRN	_zcfree:PROC
EXTRN	__tr_init:PROC
EXTRN	__tr_flush_block:PROC
EXTRN	__tr_flush_bits:PROC
EXTRN	__tr_align:PROC
EXTRN	__tr_stored_block:PROC
EXTRN	_match_init:PROC
EXTRN	_longest_match:PROC
EXTRN	_z_errmsg:BYTE
EXTRN	__length_code:BYTE
EXTRN	__dist_code:BYTE
; Function compile flags: /Odtp
; File d:\vs_project\zlib-1.2.8\deflate.c
_TEXT	SEGMENT
_len$ = -4						; size = 4
_strm$ = 8						; size = 4
_buf$ = 12						; size = 4
_size$ = 16						; size = 4
_read_buf PROC

; 1080 : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 1081 :     unsigned len = strm->avail_in;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _len$[ebp], ecx

; 1082 : 
; 1083 :     if (len > size) len = size;

	mov	edx, DWORD PTR _len$[ebp]
	cmp	edx, DWORD PTR _size$[ebp]
	jbe	SHORT $LN5@read_buf
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR _len$[ebp], eax
$LN5@read_buf:

; 1084 :     if (len == 0) return 0;

	cmp	DWORD PTR _len$[ebp], 0
	jne	SHORT $LN4@read_buf
	xor	eax, eax
	jmp	$LN6@read_buf
$LN4@read_buf:

; 1085 : 
; 1086 :     strm->avail_in  -= len;

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	sub	edx, DWORD PTR _len$[ebp]
	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+4], edx

; 1087 : 
; 1088 :     zmemcpy(buf, strm->next_in, len);

	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1089 :     if (strm->state->wrap == 1) {

	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+28]
	cmp	DWORD PTR [eax+24], 1
	jne	SHORT $LN3@read_buf

; 1090 :         strm->adler = adler32(strm->adler, buf, len);

	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	call	_adler32@12
	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [edx+48], eax
	jmp	SHORT $LN2@read_buf
$LN3@read_buf:

; 1091 :     }
; 1092 : #ifdef GZIP
; 1093 :     else if (strm->state->wrap == 2) {

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+24], 2
	jne	SHORT $LN2@read_buf

; 1094 :         strm->adler = crc32(strm->adler, buf, len);

	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	call	_crc32@12
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+48], eax
$LN2@read_buf:

; 1095 :     }
; 1096 : #endif
; 1097 :     strm->next_in  += len;

	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx], eax

; 1098 :     strm->total_in += len;

	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 1099 : 
; 1100 :     return (int)len;

	mov	eax, DWORD PTR _len$[ebp]
$LN6@read_buf:

; 1101 : }

	mov	esp, ebp
	pop	ebp
	ret	0
_read_buf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs_project\zlib-1.2.8\deflate.c
_TEXT	SEGMENT
_len$ = -8						; size = 4
_s$ = -4						; size = 4
_strm$ = 8						; size = 4
_flush_pending PROC

; 644  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 645  :     unsigned len;
; 646  :     deflate_state *s = strm->state;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _s$[ebp], ecx

; 647  : 
; 648  :     _tr_flush_bits(s);

	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	__tr_flush_bits
	add	esp, 4

; 649  :     len = s->pending;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _len$[ebp], ecx

; 650  :     if (len > strm->avail_out) len = strm->avail_out;

	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR _len$[ebp]
	cmp	eax, DWORD PTR [edx+16]
	jbe	SHORT $LN3@flush_pend
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _len$[ebp], edx
$LN3@flush_pend:

; 651  :     if (len == 0) return;

	cmp	DWORD PTR _len$[ebp], 0
	jne	SHORT $LN2@flush_pend
	jmp	SHORT $LN4@flush_pend
$LN2@flush_pend:

; 652  : 
; 653  :     zmemcpy(strm->next_out, s->pending_out, len);

	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 654  :     strm->next_out  += len;

	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+12]
	add	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 655  :     s->pending_out  += len;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+16]
	add	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 656  :     strm->total_out += len;

	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+20]
	add	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+20], eax

; 657  :     strm->avail_out  -= len;

	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 658  :     s->pending -= len;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	sub	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+20], eax

; 659  :     if (s->pending == 0) {

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+20], 0
	jne	SHORT $LN4@flush_pend

; 660  :         s->pending_out = s->pending_buf;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+16], edx
$LN4@flush_pend:

; 661  :     }
; 662  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_flush_pending ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs_project\zlib-1.2.8\deflate.c
_TEXT	SEGMENT
_s$ = 8							; size = 4
_b$ = 12						; size = 4
_putShortMSB PROC

; 631  : {

	push	ebp
	mov	ebp, esp

; 632  :     put_byte(s, (Byte)(b >> 8));

	mov	eax, DWORD PTR _b$[ebp]
	shr	eax, 8
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	mov	BYTE PTR [ecx+edx], al
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	add	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+20], eax

; 633  :     put_byte(s, (Byte)(b & 0xff));

	mov	edx, DWORD PTR _b$[ebp]
	and	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax+8]
	mov	BYTE PTR [eax+ecx], dl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], edx

; 634  : }

	pop	ebp
	ret	0
_putShortMSB ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs_project\zlib-1.2.8\deflate.c
_TEXT	SEGMENT
_s$ = 8							; size = 4
_lm_init PROC

; 1108 : {

	push	ebp
	mov	ebp, esp

; 1109 :     s->window_size = (ulg)2L*s->w_size;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	shl	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+60], ecx

; 1110 : 
; 1111 :     CLEAR_HASH(s);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+68]
	xor	edx, edx
	mov	WORD PTR [eax+ecx*2-2], dx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	lea	edx, DWORD PTR [ecx+ecx-2]
	push	edx
	push	0
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 1112 : 
; 1113 :     /* Set the default configuration parameters:
; 1114 :      */
; 1115 :     s->max_lazy_match   = configuration_table[s->level].max_lazy;

	mov	edx, DWORD PTR _s$[ebp]
	imul	eax, DWORD PTR [edx+132], 12
	movzx	ecx, WORD PTR _configuration_table[eax+2]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+128], ecx

; 1116 :     s->good_match       = configuration_table[s->level].good_length;

	mov	eax, DWORD PTR _s$[ebp]
	imul	ecx, DWORD PTR [eax+132], 12
	movzx	edx, WORD PTR _configuration_table[ecx]
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+140], edx

; 1117 :     s->nice_match       = configuration_table[s->level].nice_length;

	mov	ecx, DWORD PTR _s$[ebp]
	imul	edx, DWORD PTR [ecx+132], 12
	movzx	eax, WORD PTR _configuration_table[edx+4]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+144], eax

; 1118 :     s->max_chain_length = configuration_table[s->level].max_chain;

	mov	edx, DWORD PTR _s$[ebp]
	imul	eax, DWORD PTR [edx+132], 12
	movzx	ecx, WORD PTR _configuration_table[eax+6]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+124], ecx

; 1119 : 
; 1120 :     s->strstart = 0;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+108], 0

; 1121 :     s->block_start = 0L;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+92], 0

; 1122 :     s->lookahead = 0;

	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+116], 0

; 1123 :     s->insert = 0;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+5812], 0

; 1124 :     s->match_length = s->prev_length = MIN_MATCH-1;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+120], 2
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+96], 2

; 1125 :     s->match_available = 0;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+104], 0

; 1126 :     s->ins_h = 0;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+72], 0

; 1127 : #ifndef FASTEST
; 1128 : #ifdef ASMV
; 1129 :     match_init(); /* initialize the asm code */

	call	_match_init

; 1130 : #endif
; 1131 : #endif
; 1132 : }

	pop	ebp
	ret	0
_lm_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs_project\zlib-1.2.8\deflate.c
_TEXT	SEGMENT
_bflush$ = -24						; size = 4
tv205 = -20						; size = 4
tv182 = -16						; size = 4
tv159 = -12						; size = 4
tv138 = -8						; size = 4
_cc$1 = -1						; size = 1
_s$ = 8							; size = 4
_flush$ = 12						; size = 4
_deflate_huff PROC

; 1937 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
$LN11@deflate_hu:

; 1938 :     int bflush;             /* set if current block must be flushed */
; 1939 : 
; 1940 :     for (;;) {
; 1941 :         /* Make sure that we have a literal to write. */
; 1942 :         if (s->lookahead == 0) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+116], 0
	jne	SHORT $LN9@deflate_hu

; 1943 :             fill_window(s);

	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_fill_window
	add	esp, 4

; 1944 :             if (s->lookahead == 0) {

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+116], 0
	jne	SHORT $LN9@deflate_hu

; 1945 :                 if (flush == Z_NO_FLUSH)

	cmp	DWORD PTR _flush$[ebp], 0
	jne	SHORT $LN7@deflate_hu

; 1946 :                     return need_more;

	xor	eax, eax
	jmp	$LN12@deflate_hu
$LN7@deflate_hu:

; 1947 :                 break;      /* flush the current block */

	jmp	$LN10@deflate_hu
$LN9@deflate_hu:

; 1948 :             }
; 1949 :         }
; 1950 : 
; 1951 :         /* Output a literal byte */
; 1952 :         s->match_length = 0;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+96], 0

; 1953 :         Tracevv((stderr,"%c", s->window[s->strstart]));
; 1954 :         _tr_tally_lit (s, s->window[s->strstart], bflush);

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	dl, BYTE PTR [ecx+edx]
	mov	BYTE PTR _cc$1[ebp], dl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5792]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5796]
	xor	edx, edx
	mov	WORD PTR [eax+ecx*2], dx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5792]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5784]
	mov	dl, BYTE PTR _cc$1[ebp]
	mov	BYTE PTR [eax+ecx], dl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5792]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+5792], ecx
	movzx	eax, BYTE PTR _cc$1[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	dx, WORD PTR [ecx+eax*4+148]
	add	dx, 1
	movzx	eax, BYTE PTR _cc$1[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+eax*4+148], dx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5788]
	sub	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+5792], eax
	jne	SHORT $LN14@deflate_hu
	mov	DWORD PTR tv138[ebp], 1
	jmp	SHORT $LN15@deflate_hu
$LN14@deflate_hu:
	mov	DWORD PTR tv138[ebp], 0
$LN15@deflate_hu:
	mov	edx, DWORD PTR tv138[ebp]
	mov	DWORD PTR _bflush$[ebp], edx

; 1955 :         s->lookahead--;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	sub	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+116], ecx

; 1956 :         s->strstart++;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+108], ecx

; 1957 :         if (bflush) FLUSH_BLOCK(s, 0);

	cmp	DWORD PTR _bflush$[ebp], 0
	je	SHORT $LN6@deflate_hu
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+92], 0
	jl	SHORT $LN16@deflate_hu
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR [eax+92]
	mov	DWORD PTR tv159[ebp], edx
	jmp	SHORT $LN17@deflate_hu
$LN16@deflate_hu:
	mov	DWORD PTR tv159[ebp], 0
$LN17@deflate_hu:
	push	0
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+108]
	sub	eax, DWORD PTR [edx+92]
	push	eax
	mov	ecx, DWORD PTR tv159[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	__tr_flush_block
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	DWORD PTR [eax+92], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_flush_pending
	add	esp, 4
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN6@deflate_hu
	xor	eax, eax
	jmp	$LN12@deflate_hu
$LN6@deflate_hu:

; 1958 :     }

	jmp	$LN11@deflate_hu
$LN10@deflate_hu:

; 1959 :     s->insert = 0;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5812], 0

; 1960 :     if (flush == Z_FINISH) {

	cmp	DWORD PTR _flush$[ebp], 4
	jne	SHORT $LN4@deflate_hu

; 1961 :         FLUSH_BLOCK(s, 1);

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+92], 0
	jl	SHORT $LN18@deflate_hu
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR _s$[ebp]
	add	ecx, DWORD PTR [edx+92]
	mov	DWORD PTR tv182[ebp], ecx
	jmp	SHORT $LN19@deflate_hu
$LN18@deflate_hu:
	mov	DWORD PTR tv182[ebp], 0
$LN19@deflate_hu:
	push	1
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+108]
	sub	edx, DWORD PTR [ecx+92]
	push	edx
	mov	eax, DWORD PTR tv182[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	__tr_flush_block
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	DWORD PTR [edx+92], ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_flush_pending
	add	esp, 4
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	DWORD PTR [edx+16], 0
	jne	SHORT $LN3@deflate_hu
	mov	eax, 2
	jmp	$LN12@deflate_hu
$LN3@deflate_hu:

; 1962 :         return finish_done;

	mov	eax, 3
	jmp	SHORT $LN12@deflate_hu
$LN4@deflate_hu:

; 1963 :     }
; 1964 :     if (s->last_lit)

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+5792], 0
	je	SHORT $LN2@deflate_hu

; 1965 :         FLUSH_BLOCK(s, 0);

	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+92], 0
	jl	SHORT $LN20@deflate_hu
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR [ecx+92]
	mov	DWORD PTR tv205[ebp], eax
	jmp	SHORT $LN21@deflate_hu
$LN20@deflate_hu:
	mov	DWORD PTR tv205[ebp], 0
$LN21@deflate_hu:
	push	0
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [edx+108]
	sub	ecx, DWORD PTR [eax+92]
	push	ecx
	mov	edx, DWORD PTR tv205[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	__tr_flush_block
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+108]
	mov	DWORD PTR [ecx+92], eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_flush_pending
	add	esp, 4
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+16], 0
	jne	SHORT $LN2@deflate_hu
	xor	eax, eax
	jmp	SHORT $LN12@deflate_hu
$LN2@deflate_hu:

; 1966 :     return block_done;

	mov	eax, 1
$LN12@deflate_hu:

; 1967 : }

	mov	esp, ebp
	pop	ebp
	ret	0
_deflate_huff ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs_project\zlib-1.2.8\deflate.c
_TEXT	SEGMENT
tv350 = -48						; size = 4
tv327 = -44						; size = 4
tv304 = -40						; size = 4
_bflush$ = -36						; size = 4
tv283 = -32						; size = 4
tv238 = -28						; size = 4
_strend$ = -24						; size = 4
tv221 = -20						; size = 4
_prev$ = -16						; size = 4
_scan$ = -12						; size = 4
_dist$1 = -8						; size = 2
_cc$2 = -2						; size = 1
_len$3 = -1						; size = 1
_s$ = 8							; size = 4
_flush$ = 12						; size = 4
_deflate_rle PROC

; 1864 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
$LN20@deflate_rl:

; 1865 :     int bflush;             /* set if current block must be flushed */
; 1866 :     uInt prev;              /* byte at distance one to match */
; 1867 :     Bytef *scan, *strend;   /* scan goes up to strend for length of run */
; 1868 : 
; 1869 :     for (;;) {
; 1870 :         /* Make sure that we always have enough lookahead, except
; 1871 :          * at the end of the input file. We need MAX_MATCH bytes
; 1872 :          * for the longest run, plus one for the unrolled loop.
; 1873 :          */
; 1874 :         if (s->lookahead <= MAX_MATCH) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+116], 258		; 00000102H
	ja	SHORT $LN18@deflate_rl

; 1875 :             fill_window(s);

	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_fill_window
	add	esp, 4

; 1876 :             if (s->lookahead <= MAX_MATCH && flush == Z_NO_FLUSH) {

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+116], 258		; 00000102H
	ja	SHORT $LN17@deflate_rl
	cmp	DWORD PTR _flush$[ebp], 0
	jne	SHORT $LN17@deflate_rl

; 1877 :                 return need_more;

	xor	eax, eax
	jmp	$LN21@deflate_rl
$LN17@deflate_rl:

; 1878 :             }
; 1879 :             if (s->lookahead == 0) break; /* flush the current block */

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+116], 0
	jne	SHORT $LN18@deflate_rl
	jmp	$LN19@deflate_rl
$LN18@deflate_rl:

; 1880 :         }
; 1881 : 
; 1882 :         /* See how many times the previous byte repeats */
; 1883 :         s->match_length = 0;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+96], 0

; 1884 :         if (s->lookahead >= MIN_MATCH && s->strstart > 0) {

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+116], 3
	jb	$LN15@deflate_rl
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+108], 0
	jbe	$LN15@deflate_rl

; 1885 :             scan = s->window + s->strstart - 1;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	lea	edx, DWORD PTR [edx+ecx-1]
	mov	DWORD PTR _scan$[ebp], edx

; 1886 :             prev = *scan;

	mov	eax, DWORD PTR _scan$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _prev$[ebp], ecx

; 1887 :             if (prev == *++scan && prev == *++scan && prev == *++scan) {

	mov	edx, DWORD PTR _scan$[ebp]
	add	edx, 1
	mov	DWORD PTR _scan$[ebp], edx
	mov	eax, DWORD PTR _scan$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	DWORD PTR _prev$[ebp], ecx
	jne	$LN15@deflate_rl
	mov	edx, DWORD PTR _scan$[ebp]
	add	edx, 1
	mov	DWORD PTR _scan$[ebp], edx
	mov	eax, DWORD PTR _scan$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	DWORD PTR _prev$[ebp], ecx
	jne	$LN15@deflate_rl
	mov	edx, DWORD PTR _scan$[ebp]
	add	edx, 1
	mov	DWORD PTR _scan$[ebp], edx
	mov	eax, DWORD PTR _scan$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	DWORD PTR _prev$[ebp], ecx
	jne	$LN15@deflate_rl

; 1888 :                 strend = s->window + s->strstart + MAX_MATCH;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	lea	eax, DWORD PTR [eax+edx+258]
	mov	DWORD PTR _strend$[ebp], eax
$LN12@deflate_rl:

; 1889 :                 do {
; 1890 :                 } while (prev == *++scan && prev == *++scan &&
; 1891 :                          prev == *++scan && prev == *++scan &&
; 1892 :                          prev == *++scan && prev == *++scan &&
; 1893 :                          prev == *++scan && prev == *++scan &&
; 1894 :                          scan < strend);

	mov	ecx, DWORD PTR _scan$[ebp]
	add	ecx, 1
	mov	DWORD PTR _scan$[ebp], ecx
	mov	edx, DWORD PTR _scan$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	DWORD PTR _prev$[ebp], eax
	jne	$LN11@deflate_rl
	mov	ecx, DWORD PTR _scan$[ebp]
	add	ecx, 1
	mov	DWORD PTR _scan$[ebp], ecx
	mov	edx, DWORD PTR _scan$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	DWORD PTR _prev$[ebp], eax
	jne	$LN11@deflate_rl
	mov	ecx, DWORD PTR _scan$[ebp]
	add	ecx, 1
	mov	DWORD PTR _scan$[ebp], ecx
	mov	edx, DWORD PTR _scan$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	DWORD PTR _prev$[ebp], eax
	jne	SHORT $LN11@deflate_rl
	mov	ecx, DWORD PTR _scan$[ebp]
	add	ecx, 1
	mov	DWORD PTR _scan$[ebp], ecx
	mov	edx, DWORD PTR _scan$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	DWORD PTR _prev$[ebp], eax
	jne	SHORT $LN11@deflate_rl
	mov	ecx, DWORD PTR _scan$[ebp]
	add	ecx, 1
	mov	DWORD PTR _scan$[ebp], ecx
	mov	edx, DWORD PTR _scan$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	DWORD PTR _prev$[ebp], eax
	jne	SHORT $LN11@deflate_rl
	mov	ecx, DWORD PTR _scan$[ebp]
	add	ecx, 1
	mov	DWORD PTR _scan$[ebp], ecx
	mov	edx, DWORD PTR _scan$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	DWORD PTR _prev$[ebp], eax
	jne	SHORT $LN11@deflate_rl
	mov	ecx, DWORD PTR _scan$[ebp]
	add	ecx, 1
	mov	DWORD PTR _scan$[ebp], ecx
	mov	edx, DWORD PTR _scan$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	DWORD PTR _prev$[ebp], eax
	jne	SHORT $LN11@deflate_rl
	mov	ecx, DWORD PTR _scan$[ebp]
	add	ecx, 1
	mov	DWORD PTR _scan$[ebp], ecx
	mov	edx, DWORD PTR _scan$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	DWORD PTR _prev$[ebp], eax
	jne	SHORT $LN11@deflate_rl
	mov	ecx, DWORD PTR _scan$[ebp]
	cmp	ecx, DWORD PTR _strend$[ebp]
	jb	$LN12@deflate_rl
$LN11@deflate_rl:

; 1895 :                 s->match_length = MAX_MATCH - (int)(strend - scan);

	mov	edx, DWORD PTR _strend$[ebp]
	sub	edx, DWORD PTR _scan$[ebp]
	mov	eax, 258				; 00000102H
	sub	eax, edx
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+96], eax

; 1896 :                 if (s->match_length > s->lookahead)

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [edx+96]
	cmp	ecx, DWORD PTR [eax+116]
	jbe	SHORT $LN15@deflate_rl

; 1897 :                     s->match_length = s->lookahead;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	mov	DWORD PTR [edx+96], ecx
$LN15@deflate_rl:

; 1898 :             }
; 1899 :             Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
; 1900 :         }
; 1901 : 
; 1902 :         /* Emit match if have run of MIN_MATCH or longer, else emit literal */
; 1903 :         if (s->match_length >= MIN_MATCH) {

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+96], 3
	jb	$LN8@deflate_rl

; 1904 :             check_match(s, s->strstart, s->strstart - 1, s->match_length);
; 1905 : 
; 1906 :             _tr_tally_dist(s, 1, s->match_length - MIN_MATCH, bflush);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	sub	ecx, 3
	mov	BYTE PTR _len$3[ebp], cl
	mov	edx, 1
	mov	WORD PTR _dist$1[ebp], dx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5792]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5796]
	mov	dx, WORD PTR _dist$1[ebp]
	mov	WORD PTR [eax+ecx*2], dx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5792]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5784]
	mov	dl, BYTE PTR _len$3[ebp]
	mov	BYTE PTR [eax+ecx], dl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5792]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+5792], ecx
	mov	ax, WORD PTR _dist$1[ebp]
	sub	ax, 1
	mov	WORD PTR _dist$1[ebp], ax
	movzx	ecx, BYTE PTR _len$3[ebp]
	movzx	edx, BYTE PTR __length_code[ecx]
	mov	eax, DWORD PTR _s$[ebp]
	mov	cx, WORD PTR [eax+edx*4+1176]
	add	cx, 1
	movzx	edx, BYTE PTR _len$3[ebp]
	movzx	eax, BYTE PTR __length_code[edx]
	mov	edx, DWORD PTR _s$[ebp]
	mov	WORD PTR [edx+eax*4+1176], cx
	movzx	eax, WORD PTR _dist$1[ebp]
	cmp	eax, 256				; 00000100H
	jge	SHORT $LN23@deflate_rl
	movzx	ecx, WORD PTR _dist$1[ebp]
	movzx	edx, BYTE PTR __dist_code[ecx]
	mov	DWORD PTR tv221[ebp], edx
	jmp	SHORT $LN24@deflate_rl
$LN23@deflate_rl:
	movzx	eax, WORD PTR _dist$1[ebp]
	sar	eax, 7
	movzx	ecx, BYTE PTR __dist_code[eax+256]
	mov	DWORD PTR tv221[ebp], ecx
$LN24@deflate_rl:
	mov	edx, DWORD PTR tv221[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	cx, WORD PTR [eax+edx*4+2440]
	add	cx, 1
	mov	edx, DWORD PTR tv221[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	WORD PTR [eax+edx*4+2440], cx
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+5788]
	sub	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+5792], edx
	jne	SHORT $LN25@deflate_rl
	mov	DWORD PTR tv238[ebp], 1
	jmp	SHORT $LN26@deflate_rl
$LN25@deflate_rl:
	mov	DWORD PTR tv238[ebp], 0
$LN26@deflate_rl:
	mov	ecx, DWORD PTR tv238[ebp]
	mov	DWORD PTR _bflush$[ebp], ecx

; 1907 : 
; 1908 :             s->lookahead -= s->match_length;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [edx+116]
	sub	ecx, DWORD PTR [eax+96]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+116], ecx

; 1909 :             s->strstart += s->match_length;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	edx, DWORD PTR _s$[ebp]
	add	ecx, DWORD PTR [edx+96]
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+108], ecx

; 1910 :             s->match_length = 0;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+96], 0

; 1911 :         } else {

	jmp	$LN7@deflate_rl
$LN8@deflate_rl:

; 1912 :             /* No match, output a literal byte */
; 1913 :             Tracevv((stderr,"%c", s->window[s->strstart]));
; 1914 :             _tr_tally_lit (s, s->window[s->strstart], bflush);

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+108]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	al, BYTE PTR [edx+eax]
	mov	BYTE PTR _cc$2[ebp], al
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+5792]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5796]
	xor	eax, eax
	mov	WORD PTR [ecx+edx*2], ax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+5792]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5784]
	mov	al, BYTE PTR _cc$2[ebp]
	mov	BYTE PTR [ecx+edx], al
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+5792]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+5792], edx
	movzx	ecx, BYTE PTR _cc$2[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	ax, WORD PTR [edx+ecx*4+148]
	add	ax, 1
	movzx	ecx, BYTE PTR _cc$2[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	WORD PTR [edx+ecx*4+148], ax
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5788]
	sub	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+5792], ecx
	jne	SHORT $LN27@deflate_rl
	mov	DWORD PTR tv283[ebp], 1
	jmp	SHORT $LN28@deflate_rl
$LN27@deflate_rl:
	mov	DWORD PTR tv283[ebp], 0
$LN28@deflate_rl:
	mov	eax, DWORD PTR tv283[ebp]
	mov	DWORD PTR _bflush$[ebp], eax

; 1915 :             s->lookahead--;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	sub	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+116], edx

; 1916 :             s->strstart++;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+108], edx
$LN7@deflate_rl:

; 1917 :         }
; 1918 :         if (bflush) FLUSH_BLOCK(s, 0);

	cmp	DWORD PTR _bflush$[ebp], 0
	je	SHORT $LN6@deflate_rl
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+92], 0
	jl	SHORT $LN29@deflate_rl
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR [ecx+92]
	mov	DWORD PTR tv304[ebp], eax
	jmp	SHORT $LN30@deflate_rl
$LN29@deflate_rl:
	mov	DWORD PTR tv304[ebp], 0
$LN30@deflate_rl:
	push	0
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [edx+108]
	sub	ecx, DWORD PTR [eax+92]
	push	ecx
	mov	edx, DWORD PTR tv304[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	__tr_flush_block
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+108]
	mov	DWORD PTR [ecx+92], eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_flush_pending
	add	esp, 4
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+16], 0
	jne	SHORT $LN6@deflate_rl
	xor	eax, eax
	jmp	$LN21@deflate_rl
$LN6@deflate_rl:

; 1919 :     }

	jmp	$LN20@deflate_rl
$LN19@deflate_rl:

; 1920 :     s->insert = 0;

	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+5812], 0

; 1921 :     if (flush == Z_FINISH) {

	cmp	DWORD PTR _flush$[ebp], 4
	jne	SHORT $LN4@deflate_rl

; 1922 :         FLUSH_BLOCK(s, 1);

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+92], 0
	jl	SHORT $LN31@deflate_rl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR [eax+92]
	mov	DWORD PTR tv327[ebp], edx
	jmp	SHORT $LN32@deflate_rl
$LN31@deflate_rl:
	mov	DWORD PTR tv327[ebp], 0
$LN32@deflate_rl:
	push	1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+108]
	sub	eax, DWORD PTR [edx+92]
	push	eax
	mov	ecx, DWORD PTR tv327[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	__tr_flush_block
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	DWORD PTR [eax+92], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_flush_pending
	add	esp, 4
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN3@deflate_rl
	mov	eax, 2
	jmp	$LN21@deflate_rl
$LN3@deflate_rl:

; 1923 :         return finish_done;

	mov	eax, 3
	jmp	SHORT $LN21@deflate_rl
$LN4@deflate_rl:

; 1924 :     }
; 1925 :     if (s->last_lit)

	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+5792], 0
	je	SHORT $LN2@deflate_rl

; 1926 :         FLUSH_BLOCK(s, 0);

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+92], 0
	jl	SHORT $LN33@deflate_rl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR _s$[ebp]
	add	ecx, DWORD PTR [edx+92]
	mov	DWORD PTR tv350[ebp], ecx
	jmp	SHORT $LN34@deflate_rl
$LN33@deflate_rl:
	mov	DWORD PTR tv350[ebp], 0
$LN34@deflate_rl:
	push	0
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+108]
	sub	edx, DWORD PTR [ecx+92]
	push	edx
	mov	eax, DWORD PTR tv350[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	__tr_flush_block
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	DWORD PTR [edx+92], ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_flush_pending
	add	esp, 4
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	DWORD PTR [edx+16], 0
	jne	SHORT $LN2@deflate_rl
	xor	eax, eax
	jmp	SHORT $LN21@deflate_rl
$LN2@deflate_rl:

; 1927 :     return block_done;

	mov	eax, 1
$LN21@deflate_rl:

; 1928 : }

	mov	esp, ebp
	pop	ebp
	ret	0
_deflate_rle ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs_project\zlib-1.2.8\deflate.c
_TEXT	SEGMENT
_max_insert$1 = -64					; size = 4
tv498 = -60						; size = 4
tv475 = -56						; size = 4
tv462 = -52						; size = 4
tv456 = -48						; size = 4
tv391 = -44						; size = 4
tv378 = -40						; size = 4
tv330 = -36						; size = 4
tv310 = -32						; size = 4
tv271 = -28						; size = 4
tv260 = -24						; size = 4
tv243 = -20						; size = 4
_bflush$ = -16						; size = 4
_hash_head$ = -12					; size = 4
_dist$2 = -8						; size = 2
_cc$3 = -3						; size = 1
_cc$4 = -2						; size = 1
_len$5 = -1						; size = 1
_s$ = 8							; size = 4
_flush$ = 12						; size = 4
_deflate_slow PROC

; 1733 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	esi
$LN26@deflate_sl:

; 1734 :     IPos hash_head;          /* head of hash chain */
; 1735 :     int bflush;              /* set if current block must be flushed */
; 1736 : 
; 1737 :     /* Process the input block. */
; 1738 :     for (;;) {
; 1739 :         /* Make sure that we always have enough lookahead, except
; 1740 :          * at the end of the input file. We need MAX_MATCH bytes
; 1741 :          * for the next match, plus MIN_MATCH bytes to insert the
; 1742 :          * string following the next match.
; 1743 :          */
; 1744 :         if (s->lookahead < MIN_LOOKAHEAD) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+116], 262		; 00000106H
	jae	SHORT $LN24@deflate_sl

; 1745 :             fill_window(s);

	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_fill_window
	add	esp, 4

; 1746 :             if (s->lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+116], 262		; 00000106H
	jae	SHORT $LN23@deflate_sl
	cmp	DWORD PTR _flush$[ebp], 0
	jne	SHORT $LN23@deflate_sl

; 1747 :                 return need_more;

	xor	eax, eax
	jmp	$LN27@deflate_sl
$LN23@deflate_sl:

; 1748 :             }
; 1749 :             if (s->lookahead == 0) break; /* flush the current block */

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+116], 0
	jne	SHORT $LN24@deflate_sl
	jmp	$LN25@deflate_sl
$LN24@deflate_sl:

; 1750 :         }
; 1751 : 
; 1752 :         /* Insert the string window[strstart .. strstart+2] in the
; 1753 :          * dictionary, and set hash_head to the head of the hash chain:
; 1754 :          */
; 1755 :         hash_head = NIL;

	mov	DWORD PTR _hash_head$[ebp], 0

; 1756 :         if (s->lookahead >= MIN_MATCH) {

	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+116], 3
	jb	$LN21@deflate_sl

; 1757 :             INSERT_STRING(s, s->strstart, hash_head);

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+72]
	mov	ecx, DWORD PTR [eax+88]
	shl	edx, cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax+56]
	movzx	ecx, BYTE PTR [eax+ecx+2]
	xor	edx, ecx
	mov	eax, DWORD PTR _s$[ebp]
	and	edx, DWORD PTR [eax+84]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+72], edx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+72]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	esi, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+108]
	and	ecx, DWORD PTR [esi+52]
	mov	esi, DWORD PTR _s$[ebp]
	mov	esi, DWORD PTR [esi+64]
	mov	dx, WORD PTR [edx+eax*2]
	mov	WORD PTR [esi+ecx*2], dx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+108]
	and	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	movzx	edx, WORD PTR [ecx+edx*2]
	mov	DWORD PTR _hash_head$[ebp], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	edx, DWORD PTR _s$[ebp]
	mov	dx, WORD PTR [edx+108]
	mov	WORD PTR [eax+ecx*2], dx
$LN21@deflate_sl:

; 1758 :         }
; 1759 : 
; 1760 :         /* Find the longest match, discarding those <= prev_length.
; 1761 :          */
; 1762 :         s->prev_length = s->match_length, s->prev_match = s->match_start;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	mov	DWORD PTR [eax+120], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+112]
	mov	DWORD PTR [eax+100], edx

; 1763 :         s->match_length = MIN_MATCH-1;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+96], 2

; 1764 : 
; 1765 :         if (hash_head != NIL && s->prev_length < s->max_lazy_match &&
; 1766 :             s->strstart - hash_head <= MAX_DIST(s)) {

	cmp	DWORD PTR _hash_head$[ebp], 0
	je	SHORT $LN20@deflate_sl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+120]
	cmp	eax, DWORD PTR [edx+128]
	jae	SHORT $LN20@deflate_sl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	sub	edx, DWORD PTR _hash_head$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	sub	ecx, 262				; 00000106H
	cmp	edx, ecx
	ja	SHORT $LN20@deflate_sl

; 1767 :             /* To simplify the code, we prevent matches with the string
; 1768 :              * of window index 0 (in particular we have to avoid a match
; 1769 :              * of the string with itself at the start of the input file).
; 1770 :              */
; 1771 :             s->match_length = longest_match (s, hash_head);

	mov	edx, DWORD PTR _hash_head$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_longest_match
	add	esp, 8
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+96], eax

; 1772 :             /* longest_match() sets match_start */
; 1773 : 
; 1774 :             if (s->match_length <= 5 && (s->strategy == Z_FILTERED
; 1775 : #if TOO_FAR <= 32767
; 1776 :                 || (s->match_length == MIN_MATCH &&
; 1777 :                     s->strstart - s->match_start > TOO_FAR)
; 1778 : #endif
; 1779 :                 )) {

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+96], 5
	ja	SHORT $LN20@deflate_sl
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+136], 1
	je	SHORT $LN18@deflate_sl
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+96], 3
	jne	SHORT $LN20@deflate_sl
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [edx+108]
	sub	ecx, DWORD PTR [eax+112]
	cmp	ecx, 4096				; 00001000H
	jbe	SHORT $LN20@deflate_sl
$LN18@deflate_sl:

; 1780 : 
; 1781 :                 /* If prev_match is also MIN_MATCH, match_start is garbage
; 1782 :                  * but we will ignore the current match anyway.
; 1783 :                  */
; 1784 :                 s->match_length = MIN_MATCH-1;

	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+96], 2
$LN20@deflate_sl:

; 1785 :             }
; 1786 :         }
; 1787 :         /* If there was a match at the previous step and the current
; 1788 :          * match is not better, output the previous match:
; 1789 :          */
; 1790 :         if (s->prev_length >= MIN_MATCH && s->match_length <= s->prev_length) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+120], 3
	jb	$LN17@deflate_sl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+96]
	cmp	eax, DWORD PTR [edx+120]
	ja	$LN17@deflate_sl

; 1791 :             uInt max_insert = s->strstart + s->lookahead - MIN_MATCH;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	lea	edx, DWORD PTR [edx+ecx-3]
	mov	DWORD PTR _max_insert$1[ebp], edx

; 1792 :             /* Do not insert strings in hash table beyond this. */
; 1793 : 
; 1794 :             check_match(s, s->strstart-1, s->prev_match, s->prev_length);
; 1795 : 
; 1796 :             _tr_tally_dist(s, s->strstart -1 - s->prev_match,
; 1797 :                            s->prev_length - MIN_MATCH, bflush);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	sub	ecx, 3
	mov	BYTE PTR _len$5[ebp], cl
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+108]
	sub	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	sub	eax, DWORD PTR [ecx+100]
	mov	WORD PTR _dist$2[ebp], ax
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5792]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+5796]
	mov	cx, WORD PTR _dist$2[ebp]
	mov	WORD PTR [edx+eax*2], cx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5792]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+5784]
	mov	cl, BYTE PTR _len$5[ebp]
	mov	BYTE PTR [edx+eax], cl
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5792]
	add	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5792], eax
	mov	dx, WORD PTR _dist$2[ebp]
	sub	dx, 1
	mov	WORD PTR _dist$2[ebp], dx
	movzx	eax, BYTE PTR _len$5[ebp]
	movzx	ecx, BYTE PTR __length_code[eax]
	mov	edx, DWORD PTR _s$[ebp]
	mov	ax, WORD PTR [edx+ecx*4+1176]
	add	ax, 1
	movzx	ecx, BYTE PTR _len$5[ebp]
	movzx	edx, BYTE PTR __length_code[ecx]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+edx*4+1176], ax
	movzx	edx, WORD PTR _dist$2[ebp]
	cmp	edx, 256				; 00000100H
	jge	SHORT $LN29@deflate_sl
	movzx	eax, WORD PTR _dist$2[ebp]
	movzx	ecx, BYTE PTR __dist_code[eax]
	mov	DWORD PTR tv243[ebp], ecx
	jmp	SHORT $LN30@deflate_sl
$LN29@deflate_sl:
	movzx	edx, WORD PTR _dist$2[ebp]
	sar	edx, 7
	movzx	eax, BYTE PTR __dist_code[edx+256]
	mov	DWORD PTR tv243[ebp], eax
$LN30@deflate_sl:
	mov	ecx, DWORD PTR tv243[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	ax, WORD PTR [edx+ecx*4+2440]
	add	ax, 1
	mov	ecx, DWORD PTR tv243[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	WORD PTR [edx+ecx*4+2440], ax
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5788]
	sub	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+5792], ecx
	jne	SHORT $LN31@deflate_sl
	mov	DWORD PTR tv260[ebp], 1
	jmp	SHORT $LN32@deflate_sl
$LN31@deflate_sl:
	mov	DWORD PTR tv260[ebp], 0
$LN32@deflate_sl:
	mov	eax, DWORD PTR tv260[ebp]
	mov	DWORD PTR _bflush$[ebp], eax

; 1798 : 
; 1799 :             /* Insert in hash table all strings up to the end of the match.
; 1800 :              * strstart-1 and strstart are already inserted. If there is not
; 1801 :              * enough lookahead, the last two strings are not inserted in
; 1802 :              * the hash table.
; 1803 :              */
; 1804 :             s->lookahead -= s->prev_length-1;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+120]
	sub	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	sub	ecx, edx
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+116], ecx

; 1805 :             s->prev_length -= 2;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	sub	ecx, 2
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+120], ecx
$LN16@deflate_sl:

; 1806 :             do {
; 1807 :                 if (++s->strstart <= max_insert) {

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	add	ecx, 1
	mov	DWORD PTR tv271[ebp], ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR tv271[ebp]
	mov	DWORD PTR [edx+108], eax
	mov	ecx, DWORD PTR tv271[ebp]
	cmp	ecx, DWORD PTR _max_insert$1[ebp]
	ja	$LN15@deflate_sl

; 1808 :                     INSERT_STRING(s, s->strstart, hash_head);

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+72]
	mov	ecx, DWORD PTR [eax+88]
	shl	edx, cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax+56]
	movzx	ecx, BYTE PTR [eax+ecx+2]
	xor	edx, ecx
	mov	eax, DWORD PTR _s$[ebp]
	and	edx, DWORD PTR [eax+84]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+72], edx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+72]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	esi, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+108]
	and	ecx, DWORD PTR [esi+52]
	mov	esi, DWORD PTR _s$[ebp]
	mov	esi, DWORD PTR [esi+64]
	mov	dx, WORD PTR [edx+eax*2]
	mov	WORD PTR [esi+ecx*2], dx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+108]
	and	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	movzx	edx, WORD PTR [ecx+edx*2]
	mov	DWORD PTR _hash_head$[ebp], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	edx, DWORD PTR _s$[ebp]
	mov	dx, WORD PTR [edx+108]
	mov	WORD PTR [eax+ecx*2], dx
$LN15@deflate_sl:

; 1809 :                 }
; 1810 :             } while (--s->prev_length != 0);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	sub	ecx, 1
	mov	DWORD PTR tv310[ebp], ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR tv310[ebp]
	mov	DWORD PTR [edx+120], eax
	cmp	DWORD PTR tv310[ebp], 0
	jne	$LN16@deflate_sl

; 1811 :             s->match_available = 0;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+104], 0

; 1812 :             s->match_length = MIN_MATCH-1;

	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+96], 2

; 1813 :             s->strstart++;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+108], ecx

; 1814 : 
; 1815 :             if (bflush) FLUSH_BLOCK(s, 0);

	cmp	DWORD PTR _bflush$[ebp], 0
	je	SHORT $LN12@deflate_sl
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+92], 0
	jl	SHORT $LN33@deflate_sl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR [eax+92]
	mov	DWORD PTR tv330[ebp], edx
	jmp	SHORT $LN34@deflate_sl
$LN33@deflate_sl:
	mov	DWORD PTR tv330[ebp], 0
$LN34@deflate_sl:
	push	0
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+108]
	sub	eax, DWORD PTR [edx+92]
	push	eax
	mov	ecx, DWORD PTR tv330[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	__tr_flush_block
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	DWORD PTR [eax+92], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_flush_pending
	add	esp, 4
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN12@deflate_sl
	xor	eax, eax
	jmp	$LN27@deflate_sl
$LN12@deflate_sl:
	jmp	$LN10@deflate_sl
$LN17@deflate_sl:

; 1816 : 
; 1817 :         } else if (s->match_available) {

	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+104], 0
	je	$LN9@deflate_sl

; 1818 :             /* If there was no match at the previous position, output a
; 1819 :              * single literal. If there was a match but the current match
; 1820 :              * is longer, truncate the previous match to a single literal.
; 1821 :              */
; 1822 :             Tracevv((stderr,"%c", s->window[s->strstart-1]));
; 1823 :             _tr_tally_lit(s, s->window[s->strstart-1], bflush);

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+108]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	al, BYTE PTR [edx+eax-1]
	mov	BYTE PTR _cc$4[ebp], al
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+5792]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5796]
	xor	eax, eax
	mov	WORD PTR [ecx+edx*2], ax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+5792]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5784]
	mov	al, BYTE PTR _cc$4[ebp]
	mov	BYTE PTR [ecx+edx], al
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+5792]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+5792], edx
	movzx	ecx, BYTE PTR _cc$4[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	ax, WORD PTR [edx+ecx*4+148]
	add	ax, 1
	movzx	ecx, BYTE PTR _cc$4[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	WORD PTR [edx+ecx*4+148], ax
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5788]
	sub	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+5792], ecx
	jne	SHORT $LN35@deflate_sl
	mov	DWORD PTR tv378[ebp], 1
	jmp	SHORT $LN36@deflate_sl
$LN35@deflate_sl:
	mov	DWORD PTR tv378[ebp], 0
$LN36@deflate_sl:
	mov	eax, DWORD PTR tv378[ebp]
	mov	DWORD PTR _bflush$[ebp], eax

; 1824 :             if (bflush) {

	cmp	DWORD PTR _bflush$[ebp], 0
	je	SHORT $LN8@deflate_sl

; 1825 :                 FLUSH_BLOCK_ONLY(s, 0);

	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+92], 0
	jl	SHORT $LN37@deflate_sl
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR [ecx+92]
	mov	DWORD PTR tv391[ebp], eax
	jmp	SHORT $LN38@deflate_sl
$LN37@deflate_sl:
	mov	DWORD PTR tv391[ebp], 0
$LN38@deflate_sl:
	push	0
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [edx+108]
	sub	ecx, DWORD PTR [eax+92]
	push	ecx
	mov	edx, DWORD PTR tv391[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	__tr_flush_block
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+108]
	mov	DWORD PTR [ecx+92], eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_flush_pending
	add	esp, 4
$LN8@deflate_sl:

; 1826 :             }
; 1827 :             s->strstart++;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+108], ecx

; 1828 :             s->lookahead--;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	sub	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+116], ecx

; 1829 :             if (s->strm->avail_out == 0) return need_more;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+16], 0
	jne	SHORT $LN7@deflate_sl
	xor	eax, eax
	jmp	$LN27@deflate_sl
$LN7@deflate_sl:

; 1830 :         } else {

	jmp	SHORT $LN10@deflate_sl
$LN9@deflate_sl:

; 1831 :             /* There is no previous match to compare with, wait for
; 1832 :              * the next step to decide.
; 1833 :              */
; 1834 :             s->match_available = 1;

	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+104], 1

; 1835 :             s->strstart++;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+108], ecx

; 1836 :             s->lookahead--;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	sub	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+116], ecx
$LN10@deflate_sl:

; 1837 :         }
; 1838 :     }

	jmp	$LN26@deflate_sl
$LN25@deflate_sl:

; 1839 :     Assert (flush != Z_NO_FLUSH, "no flush?");
; 1840 :     if (s->match_available) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+104], 0
	je	$LN5@deflate_sl

; 1841 :         Tracevv((stderr,"%c", s->window[s->strstart-1]));
; 1842 :         _tr_tally_lit(s, s->window[s->strstart-1], bflush);

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	dl, BYTE PTR [ecx+edx-1]
	mov	BYTE PTR _cc$3[ebp], dl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5792]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5796]
	xor	edx, edx
	mov	WORD PTR [eax+ecx*2], dx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5792]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5784]
	mov	dl, BYTE PTR _cc$3[ebp]
	mov	BYTE PTR [eax+ecx], dl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5792]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+5792], ecx
	movzx	eax, BYTE PTR _cc$3[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	dx, WORD PTR [ecx+eax*4+148]
	add	dx, 1
	movzx	eax, BYTE PTR _cc$3[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+eax*4+148], dx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5788]
	sub	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+5792], eax
	jne	SHORT $LN39@deflate_sl
	mov	DWORD PTR tv456[ebp], 1
	jmp	SHORT $LN40@deflate_sl
$LN39@deflate_sl:
	mov	DWORD PTR tv456[ebp], 0
$LN40@deflate_sl:
	mov	edx, DWORD PTR tv456[ebp]
	mov	DWORD PTR _bflush$[ebp], edx

; 1843 :         s->match_available = 0;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+104], 0
$LN5@deflate_sl:

; 1844 :     }
; 1845 :     s->insert = s->strstart < MIN_MATCH-1 ? s->strstart : MIN_MATCH-1;

	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+108], 2
	jae	SHORT $LN41@deflate_sl
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+108]
	mov	DWORD PTR tv462[ebp], eax
	jmp	SHORT $LN42@deflate_sl
$LN41@deflate_sl:
	mov	DWORD PTR tv462[ebp], 2
$LN42@deflate_sl:
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR tv462[ebp]
	mov	DWORD PTR [ecx+5812], edx

; 1846 :     if (flush == Z_FINISH) {

	cmp	DWORD PTR _flush$[ebp], 4
	jne	SHORT $LN4@deflate_sl

; 1847 :         FLUSH_BLOCK(s, 1);

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+92], 0
	jl	SHORT $LN43@deflate_sl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR [eax+92]
	mov	DWORD PTR tv475[ebp], edx
	jmp	SHORT $LN44@deflate_sl
$LN43@deflate_sl:
	mov	DWORD PTR tv475[ebp], 0
$LN44@deflate_sl:
	push	1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+108]
	sub	eax, DWORD PTR [edx+92]
	push	eax
	mov	ecx, DWORD PTR tv475[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	__tr_flush_block
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	DWORD PTR [eax+92], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_flush_pending
	add	esp, 4
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN3@deflate_sl
	mov	eax, 2
	jmp	$LN27@deflate_sl
$LN3@deflate_sl:

; 1848 :         return finish_done;

	mov	eax, 3
	jmp	SHORT $LN27@deflate_sl
$LN4@deflate_sl:

; 1849 :     }
; 1850 :     if (s->last_lit)

	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+5792], 0
	je	SHORT $LN2@deflate_sl

; 1851 :         FLUSH_BLOCK(s, 0);

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+92], 0
	jl	SHORT $LN45@deflate_sl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR _s$[ebp]
	add	ecx, DWORD PTR [edx+92]
	mov	DWORD PTR tv498[ebp], ecx
	jmp	SHORT $LN46@deflate_sl
$LN45@deflate_sl:
	mov	DWORD PTR tv498[ebp], 0
$LN46@deflate_sl:
	push	0
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+108]
	sub	edx, DWORD PTR [ecx+92]
	push	edx
	mov	eax, DWORD PTR tv498[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	__tr_flush_block
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	DWORD PTR [edx+92], ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_flush_pending
	add	esp, 4
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	DWORD PTR [edx+16], 0
	jne	SHORT $LN2@deflate_sl
	xor	eax, eax
	jmp	SHORT $LN27@deflate_sl
$LN2@deflate_sl:

; 1852 :     return block_done;

	mov	eax, 1
$LN27@deflate_sl:

; 1853 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_deflate_slow ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs_project\zlib-1.2.8\deflate.c
_TEXT	SEGMENT
tv424 = -48						; size = 4
tv401 = -44						; size = 4
tv388 = -40						; size = 4
tv374 = -36						; size = 4
_bflush$ = -32						; size = 4
tv353 = -28						; size = 4
tv288 = -24						; size = 4
tv233 = -20						; size = 4
tv216 = -16						; size = 4
_hash_head$ = -12					; size = 4
_dist$1 = -8						; size = 2
_cc$2 = -2						; size = 1
_len$3 = -1						; size = 1
_s$ = 8							; size = 4
_flush$ = 12						; size = 4
_deflate_fast PROC

; 1631 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	esi
$LN20@deflate_fa:

; 1632 :     IPos hash_head;       /* head of the hash chain */
; 1633 :     int bflush;           /* set if current block must be flushed */
; 1634 : 
; 1635 :     for (;;) {
; 1636 :         /* Make sure that we always have enough lookahead, except
; 1637 :          * at the end of the input file. We need MAX_MATCH bytes
; 1638 :          * for the next match, plus MIN_MATCH bytes to insert the
; 1639 :          * string following the next match.
; 1640 :          */
; 1641 :         if (s->lookahead < MIN_LOOKAHEAD) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+116], 262		; 00000106H
	jae	SHORT $LN18@deflate_fa

; 1642 :             fill_window(s);

	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_fill_window
	add	esp, 4

; 1643 :             if (s->lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+116], 262		; 00000106H
	jae	SHORT $LN17@deflate_fa
	cmp	DWORD PTR _flush$[ebp], 0
	jne	SHORT $LN17@deflate_fa

; 1644 :                 return need_more;

	xor	eax, eax
	jmp	$LN21@deflate_fa
$LN17@deflate_fa:

; 1645 :             }
; 1646 :             if (s->lookahead == 0) break; /* flush the current block */

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+116], 0
	jne	SHORT $LN18@deflate_fa
	jmp	$LN19@deflate_fa
$LN18@deflate_fa:

; 1647 :         }
; 1648 : 
; 1649 :         /* Insert the string window[strstart .. strstart+2] in the
; 1650 :          * dictionary, and set hash_head to the head of the hash chain:
; 1651 :          */
; 1652 :         hash_head = NIL;

	mov	DWORD PTR _hash_head$[ebp], 0

; 1653 :         if (s->lookahead >= MIN_MATCH) {

	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+116], 3
	jb	$LN15@deflate_fa

; 1654 :             INSERT_STRING(s, s->strstart, hash_head);

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+72]
	mov	ecx, DWORD PTR [eax+88]
	shl	edx, cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax+56]
	movzx	ecx, BYTE PTR [eax+ecx+2]
	xor	edx, ecx
	mov	eax, DWORD PTR _s$[ebp]
	and	edx, DWORD PTR [eax+84]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+72], edx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+72]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	esi, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+108]
	and	ecx, DWORD PTR [esi+52]
	mov	esi, DWORD PTR _s$[ebp]
	mov	esi, DWORD PTR [esi+64]
	mov	dx, WORD PTR [edx+eax*2]
	mov	WORD PTR [esi+ecx*2], dx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+108]
	and	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	movzx	edx, WORD PTR [ecx+edx*2]
	mov	DWORD PTR _hash_head$[ebp], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	edx, DWORD PTR _s$[ebp]
	mov	dx, WORD PTR [edx+108]
	mov	WORD PTR [eax+ecx*2], dx
$LN15@deflate_fa:

; 1655 :         }
; 1656 : 
; 1657 :         /* Find the longest match, discarding those <= prev_length.
; 1658 :          * At this point we have always match_length < MIN_MATCH
; 1659 :          */
; 1660 :         if (hash_head != NIL && s->strstart - hash_head <= MAX_DIST(s)) {

	cmp	DWORD PTR _hash_head$[ebp], 0
	je	SHORT $LN14@deflate_fa
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	sub	ecx, DWORD PTR _hash_head$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+44]
	sub	eax, 262				; 00000106H
	cmp	ecx, eax
	ja	SHORT $LN14@deflate_fa

; 1661 :             /* To simplify the code, we prevent matches with the string
; 1662 :              * of window index 0 (in particular we have to avoid a match
; 1663 :              * of the string with itself at the start of the input file).
; 1664 :              */
; 1665 :             s->match_length = longest_match (s, hash_head);

	mov	ecx, DWORD PTR _hash_head$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_longest_match
	add	esp, 8
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+96], eax
$LN14@deflate_fa:

; 1666 :             /* longest_match() sets match_start */
; 1667 :         }
; 1668 :         if (s->match_length >= MIN_MATCH) {

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+96], 3
	jb	$LN13@deflate_fa

; 1669 :             check_match(s, s->strstart, s->match_start, s->match_length);
; 1670 : 
; 1671 :             _tr_tally_dist(s, s->strstart - s->match_start,
; 1672 :                            s->match_length - MIN_MATCH, bflush);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	sub	ecx, 3
	mov	BYTE PTR _len$3[ebp], cl
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [edx+108]
	sub	ecx, DWORD PTR [eax+112]
	mov	WORD PTR _dist$1[ebp], cx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5792]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+5796]
	mov	cx, WORD PTR _dist$1[ebp]
	mov	WORD PTR [edx+eax*2], cx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5792]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+5784]
	mov	cl, BYTE PTR _len$3[ebp]
	mov	BYTE PTR [edx+eax], cl
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5792]
	add	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5792], eax
	mov	dx, WORD PTR _dist$1[ebp]
	sub	dx, 1
	mov	WORD PTR _dist$1[ebp], dx
	movzx	eax, BYTE PTR _len$3[ebp]
	movzx	ecx, BYTE PTR __length_code[eax]
	mov	edx, DWORD PTR _s$[ebp]
	mov	ax, WORD PTR [edx+ecx*4+1176]
	add	ax, 1
	movzx	ecx, BYTE PTR _len$3[ebp]
	movzx	edx, BYTE PTR __length_code[ecx]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+edx*4+1176], ax
	movzx	edx, WORD PTR _dist$1[ebp]
	cmp	edx, 256				; 00000100H
	jge	SHORT $LN23@deflate_fa
	movzx	eax, WORD PTR _dist$1[ebp]
	movzx	ecx, BYTE PTR __dist_code[eax]
	mov	DWORD PTR tv216[ebp], ecx
	jmp	SHORT $LN24@deflate_fa
$LN23@deflate_fa:
	movzx	edx, WORD PTR _dist$1[ebp]
	sar	edx, 7
	movzx	eax, BYTE PTR __dist_code[edx+256]
	mov	DWORD PTR tv216[ebp], eax
$LN24@deflate_fa:
	mov	ecx, DWORD PTR tv216[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	ax, WORD PTR [edx+ecx*4+2440]
	add	ax, 1
	mov	ecx, DWORD PTR tv216[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	WORD PTR [edx+ecx*4+2440], ax
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5788]
	sub	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+5792], ecx
	jne	SHORT $LN25@deflate_fa
	mov	DWORD PTR tv233[ebp], 1
	jmp	SHORT $LN26@deflate_fa
$LN25@deflate_fa:
	mov	DWORD PTR tv233[ebp], 0
$LN26@deflate_fa:
	mov	eax, DWORD PTR tv233[ebp]
	mov	DWORD PTR _bflush$[ebp], eax

; 1673 : 
; 1674 :             s->lookahead -= s->match_length;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+116]
	sub	eax, DWORD PTR [edx+96]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+116], eax

; 1675 : 
; 1676 :             /* Insert new strings in the hash table only if the match length
; 1677 :              * is not too large. This saves time but degrades compression.
; 1678 :              */
; 1679 : #ifndef FASTEST
; 1680 :             if (s->match_length <= s->max_insert_length &&
; 1681 :                 s->lookahead >= MIN_MATCH) {

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [edx+96]
	cmp	ecx, DWORD PTR [eax+128]
	ja	$LN12@deflate_fa
	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+116], 3
	jb	$LN12@deflate_fa

; 1682 :                 s->match_length--; /* string at strstart already in table */

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	sub	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+96], ecx
$LN11@deflate_fa:

; 1683 :                 do {
; 1684 :                     s->strstart++;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+108], ecx

; 1685 :                     INSERT_STRING(s, s->strstart, hash_head);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+72]
	mov	ecx, DWORD PTR [ecx+88]
	shl	edx, cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax+56]
	movzx	ecx, BYTE PTR [eax+ecx+2]
	xor	edx, ecx
	mov	eax, DWORD PTR _s$[ebp]
	and	edx, DWORD PTR [eax+84]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+72], edx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+72]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	esi, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+108]
	and	ecx, DWORD PTR [esi+52]
	mov	esi, DWORD PTR _s$[ebp]
	mov	esi, DWORD PTR [esi+64]
	mov	dx, WORD PTR [edx+eax*2]
	mov	WORD PTR [esi+ecx*2], dx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+108]
	and	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	movzx	edx, WORD PTR [ecx+edx*2]
	mov	DWORD PTR _hash_head$[ebp], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	edx, DWORD PTR _s$[ebp]
	mov	dx, WORD PTR [edx+108]
	mov	WORD PTR [eax+ecx*2], dx

; 1686 :                     /* strstart never exceeds WSIZE-MAX_MATCH, so there are
; 1687 :                      * always MIN_MATCH bytes ahead.
; 1688 :                      */
; 1689 :                 } while (--s->match_length != 0);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	sub	ecx, 1
	mov	DWORD PTR tv288[ebp], ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR tv288[ebp]
	mov	DWORD PTR [edx+96], eax
	cmp	DWORD PTR tv288[ebp], 0
	jne	$LN11@deflate_fa

; 1690 :                 s->strstart++;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+108], edx

; 1691 :             } else

	jmp	SHORT $LN8@deflate_fa
$LN12@deflate_fa:

; 1692 : #endif
; 1693 :             {
; 1694 :                 s->strstart += s->match_length;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	eax, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR [eax+96]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+108], edx

; 1695 :                 s->match_length = 0;

	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+96], 0

; 1696 :                 s->ins_h = s->window[s->strstart];

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+56]
	movzx	ecx, BYTE PTR [eax+ecx]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+72], ecx

; 1697 :                 UPDATE_HASH(s, s->ins_h, s->window[s->strstart+1]);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+72]
	mov	ecx, DWORD PTR [ecx+88]
	shl	edx, cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax+56]
	movzx	ecx, BYTE PTR [eax+ecx+1]
	xor	edx, ecx
	mov	eax, DWORD PTR _s$[ebp]
	and	edx, DWORD PTR [eax+84]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+72], edx
$LN8@deflate_fa:

; 1698 : #if MIN_MATCH != 3
; 1699 :                 Call UPDATE_HASH() MIN_MATCH-3 more times
; 1700 : #endif
; 1701 :                 /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
; 1702 :                  * matter since it will be recomputed at next deflate call.
; 1703 :                  */
; 1704 :             }
; 1705 :         } else {

	jmp	$LN7@deflate_fa
$LN13@deflate_fa:

; 1706 :             /* No match, output a literal byte */
; 1707 :             Tracevv((stderr,"%c", s->window[s->strstart]));
; 1708 :             _tr_tally_lit (s, s->window[s->strstart], bflush);

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+108]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	al, BYTE PTR [edx+eax]
	mov	BYTE PTR _cc$2[ebp], al
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+5792]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5796]
	xor	eax, eax
	mov	WORD PTR [ecx+edx*2], ax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+5792]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5784]
	mov	al, BYTE PTR _cc$2[ebp]
	mov	BYTE PTR [ecx+edx], al
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+5792]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+5792], edx
	movzx	ecx, BYTE PTR _cc$2[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	ax, WORD PTR [edx+ecx*4+148]
	add	ax, 1
	movzx	ecx, BYTE PTR _cc$2[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	WORD PTR [edx+ecx*4+148], ax
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5788]
	sub	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+5792], ecx
	jne	SHORT $LN27@deflate_fa
	mov	DWORD PTR tv353[ebp], 1
	jmp	SHORT $LN28@deflate_fa
$LN27@deflate_fa:
	mov	DWORD PTR tv353[ebp], 0
$LN28@deflate_fa:
	mov	eax, DWORD PTR tv353[ebp]
	mov	DWORD PTR _bflush$[ebp], eax

; 1709 :             s->lookahead--;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	sub	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+116], edx

; 1710 :             s->strstart++;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+108], edx
$LN7@deflate_fa:

; 1711 :         }
; 1712 :         if (bflush) FLUSH_BLOCK(s, 0);

	cmp	DWORD PTR _bflush$[ebp], 0
	je	SHORT $LN6@deflate_fa
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+92], 0
	jl	SHORT $LN29@deflate_fa
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR [ecx+92]
	mov	DWORD PTR tv374[ebp], eax
	jmp	SHORT $LN30@deflate_fa
$LN29@deflate_fa:
	mov	DWORD PTR tv374[ebp], 0
$LN30@deflate_fa:
	push	0
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [edx+108]
	sub	ecx, DWORD PTR [eax+92]
	push	ecx
	mov	edx, DWORD PTR tv374[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	__tr_flush_block
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+108]
	mov	DWORD PTR [ecx+92], eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_flush_pending
	add	esp, 4
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+16], 0
	jne	SHORT $LN6@deflate_fa
	xor	eax, eax
	jmp	$LN21@deflate_fa
$LN6@deflate_fa:

; 1713 :     }

	jmp	$LN20@deflate_fa
$LN19@deflate_fa:

; 1714 :     s->insert = s->strstart < MIN_MATCH-1 ? s->strstart : MIN_MATCH-1;

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+108], 2
	jae	SHORT $LN31@deflate_fa
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	DWORD PTR tv388[ebp], ecx
	jmp	SHORT $LN32@deflate_fa
$LN31@deflate_fa:
	mov	DWORD PTR tv388[ebp], 2
$LN32@deflate_fa:
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR tv388[ebp]
	mov	DWORD PTR [edx+5812], eax

; 1715 :     if (flush == Z_FINISH) {

	cmp	DWORD PTR _flush$[ebp], 4
	jne	SHORT $LN4@deflate_fa

; 1716 :         FLUSH_BLOCK(s, 1);

	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+92], 0
	jl	SHORT $LN33@deflate_fa
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR [ecx+92]
	mov	DWORD PTR tv401[ebp], eax
	jmp	SHORT $LN34@deflate_fa
$LN33@deflate_fa:
	mov	DWORD PTR tv401[ebp], 0
$LN34@deflate_fa:
	push	1
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [edx+108]
	sub	ecx, DWORD PTR [eax+92]
	push	ecx
	mov	edx, DWORD PTR tv401[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	__tr_flush_block
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+108]
	mov	DWORD PTR [ecx+92], eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_flush_pending
	add	esp, 4
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+16], 0
	jne	SHORT $LN3@deflate_fa
	mov	eax, 2
	jmp	$LN21@deflate_fa
$LN3@deflate_fa:

; 1717 :         return finish_done;

	mov	eax, 3
	jmp	SHORT $LN21@deflate_fa
$LN4@deflate_fa:

; 1718 :     }
; 1719 :     if (s->last_lit)

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+5792], 0
	je	SHORT $LN2@deflate_fa

; 1720 :         FLUSH_BLOCK(s, 0);

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+92], 0
	jl	SHORT $LN35@deflate_fa
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR [eax+92]
	mov	DWORD PTR tv424[ebp], edx
	jmp	SHORT $LN36@deflate_fa
$LN35@deflate_fa:
	mov	DWORD PTR tv424[ebp], 0
$LN36@deflate_fa:
	push	0
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+108]
	sub	eax, DWORD PTR [edx+92]
	push	eax
	mov	ecx, DWORD PTR tv424[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	__tr_flush_block
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	DWORD PTR [eax+92], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_flush_pending
	add	esp, 4
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN2@deflate_fa
	xor	eax, eax
	jmp	SHORT $LN21@deflate_fa
$LN2@deflate_fa:

; 1721 :     return block_done;

	mov	eax, 1
$LN21@deflate_fa:

; 1722 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_deflate_fast ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs_project\zlib-1.2.8\deflate.c
_TEXT	SEGMENT
tv209 = -24						; size = 4
tv185 = -20						; size = 4
tv162 = -16						; size = 4
tv135 = -12						; size = 4
_max_start$ = -8					; size = 4
_max_block_size$ = -4					; size = 4
_s$ = 8							; size = 4
_flush$ = 12						; size = 4
_deflate_stored PROC

; 1567 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 1568 :     /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
; 1569 :      * to pending_buf_size, and each stored block has a 5 byte header:
; 1570 :      */
; 1571 :     ulg max_block_size = 0xffff;

	mov	DWORD PTR _max_block_size$[ebp], 65535	; 0000ffffH

; 1572 :     ulg max_start;
; 1573 : 
; 1574 :     if (max_block_size > s->pending_buf_size - 5) {

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, 5
	cmp	DWORD PTR _max_block_size$[ebp], ecx
	jbe	SHORT $LN14@deflate_st

; 1575 :         max_block_size = s->pending_buf_size - 5;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+12]
	sub	eax, 5
	mov	DWORD PTR _max_block_size$[ebp], eax
$LN14@deflate_st:

; 1576 :     }
; 1577 : 
; 1578 :     /* Copy as much as possible from input to output: */
; 1579 :     for (;;) {
; 1580 :         /* Fill the window as much as possible: */
; 1581 :         if (s->lookahead <= 1) {

	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+116], 1
	ja	SHORT $LN12@deflate_st

; 1582 : 
; 1583 :             Assert(s->strstart < s->w_size+MAX_DIST(s) ||
; 1584 :                    s->block_start >= (long)s->w_size, "slide too late");
; 1585 : 
; 1586 :             fill_window(s);

	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_fill_window
	add	esp, 4

; 1587 :             if (s->lookahead == 0 && flush == Z_NO_FLUSH) return need_more;

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+116], 0
	jne	SHORT $LN11@deflate_st
	cmp	DWORD PTR _flush$[ebp], 0
	jne	SHORT $LN11@deflate_st
	xor	eax, eax
	jmp	$LN16@deflate_st
$LN11@deflate_st:

; 1588 : 
; 1589 :             if (s->lookahead == 0) break; /* flush the current block */

	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+116], 0
	jne	SHORT $LN12@deflate_st
	jmp	$LN13@deflate_st
$LN12@deflate_st:

; 1590 :         }
; 1591 :         Assert(s->block_start >= 0L, "block gone");
; 1592 : 
; 1593 :         s->strstart += s->lookahead;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+108]
	mov	ecx, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR [ecx+116]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+108], eax

; 1594 :         s->lookahead = 0;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+116], 0

; 1595 : 
; 1596 :         /* Emit a stored block if pending_buf will be full: */
; 1597 :         max_start = s->block_start + max_block_size;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+92]
	add	edx, DWORD PTR _max_block_size$[ebp]
	mov	DWORD PTR _max_start$[ebp], edx

; 1598 :         if (s->strstart == 0 || (ulg)s->strstart >= max_start) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+108], 0
	je	SHORT $LN8@deflate_st
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	cmp	edx, DWORD PTR _max_start$[ebp]
	jb	$LN9@deflate_st
$LN8@deflate_st:

; 1599 :             /* strstart == 0 is possible when wraparound on 16-bit machine */
; 1600 :             s->lookahead = (uInt)(s->strstart - max_start);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	sub	ecx, DWORD PTR _max_start$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+116], ecx

; 1601 :             s->strstart = (uInt)max_start;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _max_start$[ebp]
	mov	DWORD PTR [eax+108], ecx

; 1602 :             FLUSH_BLOCK(s, 0);

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+92], 0
	jl	SHORT $LN18@deflate_st
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR _s$[ebp]
	add	ecx, DWORD PTR [edx+92]
	mov	DWORD PTR tv135[ebp], ecx
	jmp	SHORT $LN19@deflate_st
$LN18@deflate_st:
	mov	DWORD PTR tv135[ebp], 0
$LN19@deflate_st:
	push	0
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+108]
	sub	edx, DWORD PTR [ecx+92]
	push	edx
	mov	eax, DWORD PTR tv135[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	__tr_flush_block
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	DWORD PTR [edx+92], ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_flush_pending
	add	esp, 4
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	DWORD PTR [edx+16], 0
	jne	SHORT $LN9@deflate_st
	xor	eax, eax
	jmp	$LN16@deflate_st
$LN9@deflate_st:

; 1603 :         }
; 1604 :         /* Flush if we may have to slide, otherwise block_start may become
; 1605 :          * negative and the data will be gone:
; 1606 :          */
; 1607 :         if (s->strstart - (uInt)s->block_start >= MAX_DIST(s)) {

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+108]
	sub	edx, DWORD PTR [ecx+92]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	sub	ecx, 262				; 00000106H
	cmp	edx, ecx
	jb	SHORT $LN6@deflate_st

; 1608 :             FLUSH_BLOCK(s, 0);

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+92], 0
	jl	SHORT $LN20@deflate_st
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR _s$[ebp]
	add	ecx, DWORD PTR [edx+92]
	mov	DWORD PTR tv162[ebp], ecx
	jmp	SHORT $LN21@deflate_st
$LN20@deflate_st:
	mov	DWORD PTR tv162[ebp], 0
$LN21@deflate_st:
	push	0
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+108]
	sub	edx, DWORD PTR [ecx+92]
	push	edx
	mov	eax, DWORD PTR tv162[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	__tr_flush_block
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	DWORD PTR [edx+92], ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_flush_pending
	add	esp, 4
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	DWORD PTR [edx+16], 0
	jne	SHORT $LN6@deflate_st
	xor	eax, eax
	jmp	$LN16@deflate_st
$LN6@deflate_st:

; 1609 :         }
; 1610 :     }

	jmp	$LN14@deflate_st
$LN13@deflate_st:

; 1611 :     s->insert = 0;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+5812], 0

; 1612 :     if (flush == Z_FINISH) {

	cmp	DWORD PTR _flush$[ebp], 4
	jne	SHORT $LN4@deflate_st

; 1613 :         FLUSH_BLOCK(s, 1);

	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+92], 0
	jl	SHORT $LN22@deflate_st
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR [ecx+92]
	mov	DWORD PTR tv185[ebp], eax
	jmp	SHORT $LN23@deflate_st
$LN22@deflate_st:
	mov	DWORD PTR tv185[ebp], 0
$LN23@deflate_st:
	push	1
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [edx+108]
	sub	ecx, DWORD PTR [eax+92]
	push	ecx
	mov	edx, DWORD PTR tv185[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	__tr_flush_block
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+108]
	mov	DWORD PTR [ecx+92], eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_flush_pending
	add	esp, 4
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+16], 0
	jne	SHORT $LN3@deflate_st
	mov	eax, 2
	jmp	$LN16@deflate_st
$LN3@deflate_st:

; 1614 :         return finish_done;

	mov	eax, 3
	jmp	SHORT $LN16@deflate_st
$LN4@deflate_st:

; 1615 :     }
; 1616 :     if ((long)s->strstart > s->block_start)

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [edx+108]
	cmp	ecx, DWORD PTR [eax+92]
	jle	SHORT $LN2@deflate_st

; 1617 :         FLUSH_BLOCK(s, 0);

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+92], 0
	jl	SHORT $LN24@deflate_st
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR _s$[ebp]
	add	ecx, DWORD PTR [edx+92]
	mov	DWORD PTR tv209[ebp], ecx
	jmp	SHORT $LN25@deflate_st
$LN24@deflate_st:
	mov	DWORD PTR tv209[ebp], 0
$LN25@deflate_st:
	push	0
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+108]
	sub	edx, DWORD PTR [ecx+92]
	push	edx
	mov	eax, DWORD PTR tv209[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	__tr_flush_block
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	DWORD PTR [edx+92], ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_flush_pending
	add	esp, 4
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	DWORD PTR [edx+16], 0
	jne	SHORT $LN2@deflate_st
	xor	eax, eax
	jmp	SHORT $LN16@deflate_st
$LN2@deflate_st:

; 1618 :     return block_done;

	mov	eax, 1
$LN16@deflate_st:

; 1619 : }

	mov	esp, ebp
	pop	ebp
	ret	0
_deflate_stored ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs_project\zlib-1.2.8\deflate.c
_TEXT	SEGMENT
tv149 = -40						; size = 4
tv138 = -36						; size = 4
_m$ = -32						; size = 4
_curr$1 = -28						; size = 4
_str$2 = -24						; size = 4
_more$ = -20						; size = 4
_init$3 = -16						; size = 4
_p$ = -12						; size = 4
_n$ = -8						; size = 4
_wsize$ = -4						; size = 4
_s$ = 8							; size = 4
_fill_window PROC

; 1392 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	esi

; 1393 :     register unsigned n, m;
; 1394 :     register Posf *p;
; 1395 :     unsigned more;    /* Amount of free space at the end of the window. */
; 1396 :     uInt wsize = s->w_size;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR _wsize$[ebp], ecx
$LN26@fill_windo:

; 1397 : 
; 1398 :     Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");
; 1399 : 
; 1400 :     do {
; 1401 :         more = (unsigned)(s->window_size -(ulg)s->lookahead -(ulg)s->strstart);

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [edx+60]
	sub	ecx, DWORD PTR [eax+116]
	mov	edx, DWORD PTR _s$[ebp]
	sub	ecx, DWORD PTR [edx+108]
	mov	DWORD PTR _more$[ebp], ecx

; 1402 : 
; 1403 :         /* Deal with !@#$% 64K limit: */
; 1404 :         if (sizeof(int) <= 2) {

	xor	eax, eax
	je	SHORT $LN23@fill_windo

; 1405 :             if (more == 0 && s->strstart == 0 && s->lookahead == 0) {

	cmp	DWORD PTR _more$[ebp], 0
	jne	SHORT $LN22@fill_windo
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+108], 0
	jne	SHORT $LN22@fill_windo
	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+116], 0
	jne	SHORT $LN22@fill_windo

; 1406 :                 more = wsize;

	mov	eax, DWORD PTR _wsize$[ebp]
	mov	DWORD PTR _more$[ebp], eax
	jmp	SHORT $LN23@fill_windo
$LN22@fill_windo:

; 1407 : 
; 1408 :             } else if (more == (unsigned)(-1)) {

	cmp	DWORD PTR _more$[ebp], -1
	jne	SHORT $LN23@fill_windo

; 1409 :                 /* Very unlikely, but possible on 16 bit machine if
; 1410 :                  * strstart == 0 && lookahead == 1 (input done a byte at time)
; 1411 :                  */
; 1412 :                 more--;

	mov	ecx, DWORD PTR _more$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _more$[ebp], ecx
$LN23@fill_windo:

; 1413 :             }
; 1414 :         }
; 1415 : 
; 1416 :         /* If the window is almost full and there is insufficient lookahead,
; 1417 :          * move the upper half to the lower one to make room in the upper half.
; 1418 :          */
; 1419 :         if (s->strstart >= wsize+MAX_DIST(s)) {

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+44]
	mov	ecx, DWORD PTR _wsize$[ebp]
	lea	edx, DWORD PTR [ecx+eax-262]
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+108], edx
	jb	$LN19@fill_windo

; 1420 : 
; 1421 :             zmemcpy(s->window, s->window+wsize, (unsigned)wsize);

	mov	ecx, DWORD PTR _wsize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+56]
	add	eax, DWORD PTR _wsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1422 :             s->match_start -= wsize;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+112]
	sub	ecx, DWORD PTR _wsize$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+112], ecx

; 1423 :             s->strstart    -= wsize; /* we now have strstart >= MAX_DIST */

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	sub	ecx, DWORD PTR _wsize$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+108], ecx

; 1424 :             s->block_start -= (long) wsize;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	sub	ecx, DWORD PTR _wsize$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+92], ecx

; 1425 : 
; 1426 :             /* Slide the hash table (could be avoided with 32 bit values
; 1427 :                at the expense of memory usage). We slide even when level == 0
; 1428 :                to keep the hash table consistent if we switch back to level > 0
; 1429 :                later. (Using level 0 permanently is not an optimal usage of
; 1430 :                zlib, so we don't care about this pathological case.)
; 1431 :              */
; 1432 :             n = s->hash_size;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	DWORD PTR _n$[ebp], ecx

; 1433 :             p = &s->head[n];

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	ecx, DWORD PTR _n$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	mov	DWORD PTR _p$[ebp], edx
$LN18@fill_windo:

; 1434 :             do {
; 1435 :                 m = *--p;

	mov	eax, DWORD PTR _p$[ebp]
	sub	eax, 2
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, WORD PTR [ecx]
	mov	DWORD PTR _m$[ebp], edx

; 1436 :                 *p = (Pos)(m >= wsize ? m-wsize : NIL);

	mov	eax, DWORD PTR _m$[ebp]
	cmp	eax, DWORD PTR _wsize$[ebp]
	jb	SHORT $LN29@fill_windo
	mov	ecx, DWORD PTR _m$[ebp]
	sub	ecx, DWORD PTR _wsize$[ebp]
	mov	DWORD PTR tv138[ebp], ecx
	jmp	SHORT $LN30@fill_windo
$LN29@fill_windo:
	mov	DWORD PTR tv138[ebp], 0
$LN30@fill_windo:
	mov	edx, DWORD PTR _p$[ebp]
	mov	ax, WORD PTR tv138[ebp]
	mov	WORD PTR [edx], ax

; 1437 :             } while (--n);

	mov	ecx, DWORD PTR _n$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _n$[ebp], ecx
	jne	SHORT $LN18@fill_windo

; 1438 : 
; 1439 :             n = wsize;

	mov	edx, DWORD PTR _wsize$[ebp]
	mov	DWORD PTR _n$[ebp], edx

; 1440 : #ifndef FASTEST
; 1441 :             p = &s->prev[n];

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR _n$[ebp]
	lea	eax, DWORD PTR [ecx+edx*2]
	mov	DWORD PTR _p$[ebp], eax
$LN15@fill_windo:

; 1442 :             do {
; 1443 :                 m = *--p;

	mov	ecx, DWORD PTR _p$[ebp]
	sub	ecx, 2
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, WORD PTR [edx]
	mov	DWORD PTR _m$[ebp], eax

; 1444 :                 *p = (Pos)(m >= wsize ? m-wsize : NIL);

	mov	ecx, DWORD PTR _m$[ebp]
	cmp	ecx, DWORD PTR _wsize$[ebp]
	jb	SHORT $LN31@fill_windo
	mov	edx, DWORD PTR _m$[ebp]
	sub	edx, DWORD PTR _wsize$[ebp]
	mov	DWORD PTR tv149[ebp], edx
	jmp	SHORT $LN32@fill_windo
$LN31@fill_windo:
	mov	DWORD PTR tv149[ebp], 0
$LN32@fill_windo:
	mov	eax, DWORD PTR _p$[ebp]
	mov	cx, WORD PTR tv149[ebp]
	mov	WORD PTR [eax], cx

; 1445 :                 /* If n is not on any hash chain, prev[n] is garbage but
; 1446 :                  * its value will never be used.
; 1447 :                  */
; 1448 :             } while (--n);

	mov	edx, DWORD PTR _n$[ebp]
	sub	edx, 1
	mov	DWORD PTR _n$[ebp], edx
	jne	SHORT $LN15@fill_windo

; 1449 : #endif
; 1450 :             more += wsize;

	mov	eax, DWORD PTR _more$[ebp]
	add	eax, DWORD PTR _wsize$[ebp]
	mov	DWORD PTR _more$[ebp], eax
$LN19@fill_windo:

; 1451 :         }
; 1452 :         if (s->strm->avail_in == 0) break;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	DWORD PTR [edx+4], 0
	jne	SHORT $LN12@fill_windo
	jmp	$LN24@fill_windo
$LN12@fill_windo:

; 1453 : 
; 1454 :         /* If there was no sliding:
; 1455 :          *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
; 1456 :          *    more == window_size - lookahead - strstart
; 1457 :          * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
; 1458 :          * => more >= window_size - 2*WSIZE + 2
; 1459 :          * In the BIG_MEM or MMAP case (not yet supported),
; 1460 :          *   window_size == input_size + MIN_LOOKAHEAD  &&
; 1461 :          *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
; 1462 :          * Otherwise, window_size == 2*WSIZE so more >= 2.
; 1463 :          * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
; 1464 :          */
; 1465 :         Assert(more >= 2, "more < 2");
; 1466 : 
; 1467 :         n = read_buf(s->strm, s->window + s->strstart + s->lookahead, more);

	mov	eax, DWORD PTR _more$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR [eax+108]
	mov	ecx, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR [ecx+116]
	push	edx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_read_buf
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _n$[ebp], eax

; 1468 :         s->lookahead += n;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	add	edx, DWORD PTR _n$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+116], edx

; 1469 : 
; 1470 :         /* Initialize the hash value now that we have some input: */
; 1471 :         if (s->lookahead + s->insert >= MIN_MATCH) {

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	mov	eax, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR [eax+5812]
	cmp	edx, 3
	jb	$LN25@fill_windo

; 1472 :             uInt str = s->strstart - s->insert;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+108]
	sub	eax, DWORD PTR [edx+5812]
	mov	DWORD PTR _str$2[ebp], eax

; 1473 :             s->ins_h = s->window[str];

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _str$2[ebp]
	movzx	ecx, BYTE PTR [edx+eax]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+72], ecx

; 1474 :             UPDATE_HASH(s, s->ins_h, s->window[str + 1]);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+72]
	mov	ecx, DWORD PTR [ecx+88]
	shl	edx, cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	eax, DWORD PTR _str$2[ebp]
	movzx	ecx, BYTE PTR [ecx+eax+1]
	xor	edx, ecx
	mov	eax, DWORD PTR _s$[ebp]
	and	edx, DWORD PTR [eax+84]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+72], edx
$LN10@fill_windo:

; 1475 : #if MIN_MATCH != 3
; 1476 :             Call UPDATE_HASH() MIN_MATCH-3 more times
; 1477 : #endif
; 1478 :             while (s->insert) {

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+5812], 0
	je	$LN25@fill_windo

; 1479 :                 UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+72]
	mov	ecx, DWORD PTR [ecx+88]
	shl	edx, cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	eax, DWORD PTR _str$2[ebp]
	movzx	ecx, BYTE PTR [ecx+eax+2]
	xor	edx, ecx
	mov	eax, DWORD PTR _s$[ebp]
	and	edx, DWORD PTR [eax+84]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+72], edx

; 1480 : #ifndef FASTEST
; 1481 :                 s->prev[str & s->w_mask] = s->head[s->ins_h];

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+72]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	esi, DWORD PTR _str$2[ebp]
	and	esi, DWORD PTR [ecx+52]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+64]
	mov	dx, WORD PTR [edx+eax*2]
	mov	WORD PTR [ecx+esi*2], dx

; 1482 : #endif
; 1483 :                 s->head[s->ins_h] = (Pos)str;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	dx, WORD PTR _str$2[ebp]
	mov	WORD PTR [eax+ecx*2], dx

; 1484 :                 str++;

	mov	eax, DWORD PTR _str$2[ebp]
	add	eax, 1
	mov	DWORD PTR _str$2[ebp], eax

; 1485 :                 s->insert--;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+5812]
	sub	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+5812], edx

; 1486 :                 if (s->lookahead + s->insert < MIN_MATCH)

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	mov	eax, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR [eax+5812]
	cmp	edx, 3
	jae	SHORT $LN8@fill_windo

; 1487 :                     break;

	jmp	SHORT $LN25@fill_windo
$LN8@fill_windo:

; 1488 :             }

	jmp	$LN10@fill_windo
$LN25@fill_windo:

; 1489 :         }
; 1490 :         /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
; 1491 :          * but this is not important since only literal bytes will be emitted.
; 1492 :          */
; 1493 : 
; 1494 :     } while (s->lookahead < MIN_LOOKAHEAD && s->strm->avail_in != 0);

	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+116], 262		; 00000106H
	jae	SHORT $LN24@fill_windo
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	DWORD PTR [eax+4], 0
	jne	$LN26@fill_windo
$LN24@fill_windo:

; 1495 : 
; 1496 :     /* If the WIN_INIT bytes after the end of the current data have never been
; 1497 :      * written, then zero those bytes in order to avoid memory check reports of
; 1498 :      * the use of uninitialized (or uninitialised as Julian writes) bytes by
; 1499 :      * the longest match routines.  Update the high water mark for the next
; 1500 :      * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
; 1501 :      * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
; 1502 :      */
; 1503 :     if (s->high_water < s->window_size) {

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+5824]
	cmp	eax, DWORD PTR [edx+60]
	jae	$LN27@fill_windo

; 1504 :         ulg curr = s->strstart + (ulg)(s->lookahead);

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	eax, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR [eax+116]
	mov	DWORD PTR _curr$1[ebp], edx

; 1505 :         ulg init;
; 1506 : 
; 1507 :         if (s->high_water < curr) {

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+5824]
	cmp	edx, DWORD PTR _curr$1[ebp]
	jae	SHORT $LN5@fill_windo

; 1508 :             /* Previous high water mark below current data -- zero WIN_INIT
; 1509 :              * bytes or up to end of window, whichever is less.
; 1510 :              */
; 1511 :             init = s->window_size - curr;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	sub	ecx, DWORD PTR _curr$1[ebp]
	mov	DWORD PTR _init$3[ebp], ecx

; 1512 :             if (init > WIN_INIT)

	cmp	DWORD PTR _init$3[ebp], 258		; 00000102H
	jbe	SHORT $LN4@fill_windo

; 1513 :                 init = WIN_INIT;

	mov	DWORD PTR _init$3[ebp], 258		; 00000102H
$LN4@fill_windo:

; 1514 :             zmemzero(s->window + curr, (unsigned)init);

	mov	edx, DWORD PTR _init$3[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	add	ecx, DWORD PTR _curr$1[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 1515 :             s->high_water = curr + init;

	mov	edx, DWORD PTR _curr$1[ebp]
	add	edx, DWORD PTR _init$3[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+5824], edx
	jmp	$LN27@fill_windo
$LN5@fill_windo:

; 1516 :         }
; 1517 :         else if (s->high_water < (ulg)curr + WIN_INIT) {

	mov	ecx, DWORD PTR _curr$1[ebp]
	add	ecx, 258				; 00000102H
	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+5824], ecx
	jae	SHORT $LN27@fill_windo

; 1518 :             /* High water mark at or above current data, but below current data
; 1519 :              * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
; 1520 :              * to end of window, whichever is less.
; 1521 :              */
; 1522 :             init = (ulg)curr + WIN_INIT - s->high_water;

	mov	eax, DWORD PTR _curr$1[ebp]
	add	eax, 258				; 00000102H
	mov	ecx, DWORD PTR _s$[ebp]
	sub	eax, DWORD PTR [ecx+5824]
	mov	DWORD PTR _init$3[ebp], eax

; 1523 :             if (init > s->window_size - s->high_water)

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [edx+60]
	sub	ecx, DWORD PTR [eax+5824]
	cmp	DWORD PTR _init$3[ebp], ecx
	jbe	SHORT $LN1@fill_windo

; 1524 :                 init = s->window_size - s->high_water;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [edx+60]
	sub	ecx, DWORD PTR [eax+5824]
	mov	DWORD PTR _init$3[ebp], ecx
$LN1@fill_windo:

; 1525 :             zmemzero(s->window + s->high_water, (unsigned)init);

	mov	edx, DWORD PTR _init$3[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR _s$[ebp]
	add	ecx, DWORD PTR [edx+5824]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 1526 :             s->high_water += init;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5824]
	add	ecx, DWORD PTR _init$3[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+5824], ecx
$LN27@fill_windo:

; 1527 :         }
; 1528 :     }
; 1529 : 
; 1530 :     Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
; 1531 :            "not enough room for search");
; 1532 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_fill_window ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs_project\zlib-1.2.8\deflate.c
_TEXT	SEGMENT
tv131 = -12						; size = 4
tv87 = -8						; size = 4
_s$ = -4						; size = 4
_strm$ = 8						; size = 4
_deflateResetKeep@4 PROC

; 394  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 395  :     deflate_state *s;
; 396  : 
; 397  :     if (strm == Z_NULL || strm->state == Z_NULL ||
; 398  :         strm->zalloc == (alloc_func)0 || strm->zfree == (free_func)0) {

	cmp	DWORD PTR _strm$[ebp], 0
	je	SHORT $LN2@deflateRes
	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN2@deflateRes
	mov	ecx, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [ecx+32], 0
	je	SHORT $LN2@deflateRes
	mov	edx, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [edx+36], 0
	jne	SHORT $LN3@deflateRes
$LN2@deflateRes:

; 399  :         return Z_STREAM_ERROR;

	mov	eax, -2					; fffffffeH
	jmp	$LN4@deflateRes
$LN3@deflateRes:

; 400  :     }
; 401  : 
; 402  :     strm->total_in = strm->total_out = 0;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+20], 0
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+8], 0

; 403  :     strm->msg = Z_NULL; /* use zfree if we ever allocate msg dynamically */

	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [edx+24], 0

; 404  :     strm->data_type = Z_UNKNOWN;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+44], 2

; 405  : 
; 406  :     s = (deflate_state *)strm->state;

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _s$[ebp], edx

; 407  :     s->pending = 0;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], 0

; 408  :     s->pending_out = s->pending_buf;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+16], eax

; 409  : 
; 410  :     if (s->wrap < 0) {

	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+24], 0
	jge	SHORT $LN1@deflateRes

; 411  :         s->wrap = -s->wrap; /* was made negative by deflate(..., Z_FINISH); */

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+24]
	neg	eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+24], eax
$LN1@deflateRes:

; 412  :     }
; 413  :     s->status = s->wrap ? INIT_STATE : BUSY_STATE;

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+24], 0
	je	SHORT $LN6@deflateRes
	mov	DWORD PTR tv87[ebp], 42			; 0000002aH
	jmp	SHORT $LN7@deflateRes
$LN6@deflateRes:
	mov	DWORD PTR tv87[ebp], 113		; 00000071H
$LN7@deflateRes:
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR tv87[ebp]
	mov	DWORD PTR [eax+4], ecx

; 414  :     strm->adler =
; 415  : #ifdef GZIP
; 416  :         s->wrap == 2 ? crc32(0L, Z_NULL, 0) :
; 417  : #endif
; 418  :         adler32(0L, Z_NULL, 0);

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+24], 2
	jne	SHORT $LN8@deflateRes
	push	0
	push	0
	push	0
	call	_crc32@12
	mov	DWORD PTR tv131[ebp], eax
	jmp	SHORT $LN9@deflateRes
$LN8@deflateRes:
	push	0
	push	0
	push	0
	call	_adler32@12
	mov	DWORD PTR tv131[ebp], eax
$LN9@deflateRes:
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR tv131[ebp]
	mov	DWORD PTR [eax+48], ecx

; 419  :     s->last_flush = Z_NO_FLUSH;

	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+40], 0

; 420  : 
; 421  :     _tr_init(s);

	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	__tr_init
	add	esp, 4

; 422  : 
; 423  :     return Z_OK;

	xor	eax, eax
$LN4@deflateRes:

; 424  : }

	mov	esp, ebp
	pop	ebp
	ret	4
_deflateResetKeep@4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs_project\zlib-1.2.8\deflate.c
_TEXT	SEGMENT
_overlay$ = -12						; size = 4
_wrap$ = -8						; size = 4
_s$ = -4						; size = 4
_strm$ = 8						; size = 4
_level$ = 12						; size = 4
_method$ = 16						; size = 4
_windowBits$ = 20					; size = 4
_memLevel$ = 24						; size = 4
_strategy$ = 28						; size = 4
_version$ = 32						; size = 4
_stream_size$ = 36					; size = 4
_deflateInit2_@32 PROC

; 223  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 224  :     deflate_state *s;
; 225  :     int wrap = 1;

	mov	DWORD PTR _wrap$[ebp], 1

; 226  :     static const char my_version[] = ZLIB_VERSION;
; 227  : 
; 228  :     ushf *overlay;
; 229  :     /* We overlay pending_buf and d_buf+l_buf. This works since the average
; 230  :      * output size for (length,distance) codes is <= 24 bits.
; 231  :      */
; 232  : 
; 233  :     if (version == Z_NULL || version[0] != my_version[0] ||
; 234  :         stream_size != sizeof(z_stream)) {

	cmp	DWORD PTR _version$[ebp], 0
	je	SHORT $LN14@deflateIni
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _version$[ebp]
	movsx	eax, BYTE PTR [edx+ecx]
	mov	ecx, 1
	imul	edx, ecx, 0
	movsx	ecx, BYTE PTR ?my_version@?1??deflateInit2_@@9@9[edx]
	cmp	eax, ecx
	jne	SHORT $LN14@deflateIni
	cmp	DWORD PTR _stream_size$[ebp], 56	; 00000038H
	je	SHORT $LN15@deflateIni
$LN14@deflateIni:

; 235  :         return Z_VERSION_ERROR;

	mov	eax, -6					; fffffffaH
	jmp	$LN16@deflateIni
$LN15@deflateIni:

; 236  :     }
; 237  :     if (strm == Z_NULL) return Z_STREAM_ERROR;

	cmp	DWORD PTR _strm$[ebp], 0
	jne	SHORT $LN13@deflateIni
	mov	eax, -2					; fffffffeH
	jmp	$LN16@deflateIni
$LN13@deflateIni:

; 238  : 
; 239  :     strm->msg = Z_NULL;

	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [edx+24], 0

; 240  :     if (strm->zalloc == (alloc_func)0) {

	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+32], 0
	jne	SHORT $LN12@deflateIni

; 241  : #ifdef Z_SOLO
; 242  :         return Z_STREAM_ERROR;
; 243  : #else
; 244  :         strm->zalloc = zcalloc;

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+32], OFFSET _zcalloc

; 245  :         strm->opaque = (voidpf)0;

	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [edx+40], 0
$LN12@deflateIni:

; 246  : #endif
; 247  :     }
; 248  :     if (strm->zfree == (free_func)0)

	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+36], 0
	jne	SHORT $LN11@deflateIni

; 249  : #ifdef Z_SOLO
; 250  :         return Z_STREAM_ERROR;
; 251  : #else
; 252  :         strm->zfree = zcfree;

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+36], OFFSET _zcfree
$LN11@deflateIni:

; 253  : #endif
; 254  : 
; 255  : #ifdef FASTEST
; 256  :     if (level != 0) level = 1;
; 257  : #else
; 258  :     if (level == Z_DEFAULT_COMPRESSION) level = 6;

	cmp	DWORD PTR _level$[ebp], -1
	jne	SHORT $LN10@deflateIni
	mov	DWORD PTR _level$[ebp], 6
$LN10@deflateIni:

; 259  : #endif
; 260  : 
; 261  :     if (windowBits < 0) { /* suppress zlib wrapper */

	cmp	DWORD PTR _windowBits$[ebp], 0
	jge	SHORT $LN9@deflateIni

; 262  :         wrap = 0;

	mov	DWORD PTR _wrap$[ebp], 0

; 263  :         windowBits = -windowBits;

	mov	edx, DWORD PTR _windowBits$[ebp]
	neg	edx
	mov	DWORD PTR _windowBits$[ebp], edx
	jmp	SHORT $LN8@deflateIni
$LN9@deflateIni:

; 264  :     }
; 265  : #ifdef GZIP
; 266  :     else if (windowBits > 15) {

	cmp	DWORD PTR _windowBits$[ebp], 15		; 0000000fH
	jle	SHORT $LN8@deflateIni

; 267  :         wrap = 2;       /* write gzip wrapper instead */

	mov	DWORD PTR _wrap$[ebp], 2

; 268  :         windowBits -= 16;

	mov	eax, DWORD PTR _windowBits$[ebp]
	sub	eax, 16					; 00000010H
	mov	DWORD PTR _windowBits$[ebp], eax
$LN8@deflateIni:

; 269  :     }
; 270  : #endif
; 271  :     if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method != Z_DEFLATED ||
; 272  :         windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
; 273  :         strategy < 0 || strategy > Z_FIXED) {

	cmp	DWORD PTR _memLevel$[ebp], 1
	jl	SHORT $LN5@deflateIni
	cmp	DWORD PTR _memLevel$[ebp], 9
	jg	SHORT $LN5@deflateIni
	cmp	DWORD PTR _method$[ebp], 8
	jne	SHORT $LN5@deflateIni
	cmp	DWORD PTR _windowBits$[ebp], 8
	jl	SHORT $LN5@deflateIni
	cmp	DWORD PTR _windowBits$[ebp], 15		; 0000000fH
	jg	SHORT $LN5@deflateIni
	cmp	DWORD PTR _level$[ebp], 0
	jl	SHORT $LN5@deflateIni
	cmp	DWORD PTR _level$[ebp], 9
	jg	SHORT $LN5@deflateIni
	cmp	DWORD PTR _strategy$[ebp], 0
	jl	SHORT $LN5@deflateIni
	cmp	DWORD PTR _strategy$[ebp], 4
	jle	SHORT $LN6@deflateIni
$LN5@deflateIni:

; 274  :         return Z_STREAM_ERROR;

	mov	eax, -2					; fffffffeH
	jmp	$LN16@deflateIni
$LN6@deflateIni:

; 275  :     }
; 276  :     if (windowBits == 8) windowBits = 9;  /* until 256-byte window bug fixed */

	cmp	DWORD PTR _windowBits$[ebp], 8
	jne	SHORT $LN4@deflateIni
	mov	DWORD PTR _windowBits$[ebp], 9
$LN4@deflateIni:

; 277  :     s = (deflate_state *) ZALLOC(strm, 1, sizeof(deflate_state));

	push	5828					; 000016c4H
	push	1
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	ecx
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _s$[ebp], eax

; 278  :     if (s == Z_NULL) return Z_MEM_ERROR;

	cmp	DWORD PTR _s$[ebp], 0
	jne	SHORT $LN3@deflateIni
	mov	eax, -4					; fffffffcH
	jmp	$LN16@deflateIni
$LN3@deflateIni:

; 279  :     strm->state = (struct internal_state FAR *)s;

	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+28], eax

; 280  :     s->strm = strm;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx], edx

; 281  : 
; 282  :     s->wrap = wrap;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _wrap$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 283  :     s->gzhead = Z_NULL;

	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+28], 0

; 284  :     s->w_bits = windowBits;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _windowBits$[ebp]
	mov	DWORD PTR [eax+48], ecx

; 285  :     s->w_size = 1 << s->w_bits;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, 1
	mov	ecx, DWORD PTR [edx+48]
	shl	eax, cl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+44], eax

; 286  :     s->w_mask = s->w_size - 1;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+44]
	sub	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+52], eax

; 287  : 
; 288  :     s->hash_bits = memLevel + 7;

	mov	edx, DWORD PTR _memLevel$[ebp]
	add	edx, 7
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+80], edx

; 289  :     s->hash_size = 1 << s->hash_bits;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, 1
	mov	ecx, DWORD PTR [ecx+80]
	shl	edx, cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+76], edx

; 290  :     s->hash_mask = s->hash_size - 1;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	sub	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+84], edx

; 291  :     s->hash_shift =  ((s->hash_bits+MIN_MATCH-1)/MIN_MATCH);

	mov	ecx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+80]
	add	eax, 2
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+88], eax

; 292  : 
; 293  :     s->window = (Bytef *) ZALLOC(strm, s->w_size, 2*sizeof(Byte));

	push	2
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+56], eax

; 294  :     s->prev   = (Posf *)  ZALLOC(strm, s->w_size, sizeof(Pos));

	push	2
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+44]
	push	eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	ecx
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+64], eax

; 295  :     s->head   = (Posf *)  ZALLOC(strm, s->hash_size, sizeof(Pos));

	push	2
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	push	ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+68], eax

; 296  : 
; 297  :     s->high_water = 0;      /* nothing written to s->window yet */

	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+5824], 0

; 298  : 
; 299  :     s->lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

	mov	ecx, DWORD PTR _memLevel$[ebp]
	add	ecx, 6
	mov	eax, 1
	shl	eax, cl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5788], eax

; 300  : 
; 301  :     overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);

	push	4
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5788]
	push	eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	ecx
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _overlay$[ebp], eax

; 302  :     s->pending_buf = (uchf *) overlay;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _overlay$[ebp]
	mov	DWORD PTR [edx+8], eax

; 303  :     s->pending_buf_size = (ulg)s->lit_bufsize * (sizeof(ush)+2L);

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+5788]
	shl	edx, 2
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+12], edx

; 304  : 
; 305  :     if (s->window == Z_NULL || s->prev == Z_NULL || s->head == Z_NULL ||
; 306  :         s->pending_buf == Z_NULL) {

	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+56], 0
	je	SHORT $LN1@deflateIni
	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+64], 0
	je	SHORT $LN1@deflateIni
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+68], 0
	je	SHORT $LN1@deflateIni
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	jne	SHORT $LN2@deflateIni
$LN1@deflateIni:

; 307  :         s->status = FINISH_STATE;

	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+4], 666			; 0000029aH

; 308  :         strm->msg = ERR_MSG(Z_MEM_ERROR);

	mov	eax, 4
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR _z_errmsg[ecx]
	mov	DWORD PTR [edx+24], eax

; 309  :         deflateEnd (strm);

	mov	ecx, DWORD PTR _strm$[ebp]
	push	ecx
	call	_deflateEnd@4

; 310  :         return Z_MEM_ERROR;

	mov	eax, -4					; fffffffcH
	jmp	SHORT $LN16@deflateIni
$LN2@deflateIni:

; 311  :     }
; 312  :     s->d_buf = overlay + s->lit_bufsize/sizeof(ush);

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5788]
	shr	eax, 1
	mov	ecx, DWORD PTR _overlay$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+5796], edx

; 313  :     s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;

	mov	ecx, DWORD PTR _s$[ebp]
	imul	edx, DWORD PTR [ecx+5788], 3
	mov	eax, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5784], edx

; 314  : 
; 315  :     s->level = level;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _level$[ebp]
	mov	DWORD PTR [edx+132], eax

; 316  :     s->strategy = strategy;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _strategy$[ebp]
	mov	DWORD PTR [ecx+136], edx

; 317  :     s->method = (Byte)method;

	mov	eax, DWORD PTR _s$[ebp]
	mov	cl, BYTE PTR _method$[ebp]
	mov	BYTE PTR [eax+36], cl

; 318  : 
; 319  :     return deflateReset(strm);

	mov	edx, DWORD PTR _strm$[ebp]
	push	edx
	call	_deflateReset@4
$LN16@deflateIni:

; 320  : }

	mov	esp, ebp
	pop	ebp
	ret	32					; 00000020H
_deflateInit2_@32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs_project\zlib-1.2.8\deflate.c
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_level$ = 12						; size = 4
_version$ = 16						; size = 4
_stream_size$ = 20					; size = 4
_deflateInit_@16 PROC

; 206  : {

	push	ebp
	mov	ebp, esp

; 207  :     return deflateInit2_(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL,
; 208  :                          Z_DEFAULT_STRATEGY, version, stream_size);

	mov	eax, DWORD PTR _stream_size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _version$[ebp]
	push	ecx
	push	0
	push	8
	push	15					; 0000000fH
	push	8
	mov	edx, DWORD PTR _level$[ebp]
	push	edx
	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_deflateInit2_@32

; 209  :     /* To do: ignore strm->next_in if we use it as window */
; 210  : }

	pop	ebp
	ret	16					; 00000010H
_deflateInit_@16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs_project\zlib-1.2.8\deflate.c
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_head$ = 12						; size = 4
_deflateSetHeader@8 PROC

; 442  : {

	push	ebp
	mov	ebp, esp

; 443  :     if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;

	cmp	DWORD PTR _strm$[ebp], 0
	je	SHORT $LN2@deflateSet
	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN3@deflateSet
$LN2@deflateSet:
	mov	eax, -2					; fffffffeH
	jmp	SHORT $LN4@deflateSet
$LN3@deflateSet:

; 444  :     if (strm->state->wrap != 2) return Z_STREAM_ERROR;

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	cmp	DWORD PTR [edx+24], 2
	je	SHORT $LN1@deflateSet
	mov	eax, -2					; fffffffeH
	jmp	SHORT $LN4@deflateSet
$LN1@deflateSet:

; 445  :     strm->state->gzhead = head;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _head$[ebp]
	mov	DWORD PTR [ecx+28], edx

; 446  :     return Z_OK;

	xor	eax, eax
$LN4@deflateSet:

; 447  : }

	pop	ebp
	ret	8
_deflateSetHeader@8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs_project\zlib-1.2.8\deflate.c
_TEXT	SEGMENT
_put$ = -8						; size = 4
_s$ = -4						; size = 4
_strm$ = 8						; size = 4
_bits$ = 12						; size = 4
_value$ = 16						; size = 4
_deflatePrime@12 PROC

; 468  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 469  :     deflate_state *s;
; 470  :     int put;
; 471  : 
; 472  :     if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;

	cmp	DWORD PTR _strm$[ebp], 0
	je	SHORT $LN6@deflatePri
	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN7@deflatePri
$LN6@deflatePri:
	mov	eax, -2					; fffffffeH
	jmp	$LN8@deflatePri
$LN7@deflatePri:

; 473  :     s = strm->state;

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _s$[ebp], edx

; 474  :     if ((Bytef *)(s->d_buf) < s->pending_out + ((Buf_size + 7) >> 3))

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 2
	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+5796], ecx
	jae	SHORT $LN4@deflatePri

; 475  :         return Z_BUF_ERROR;

	mov	eax, -5					; fffffffbH
	jmp	$LN8@deflatePri
$LN4@deflatePri:

; 476  :     do {
; 477  :         put = Buf_size - s->bi_valid;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, 16					; 00000010H
	sub	ecx, DWORD PTR [eax+5820]
	mov	DWORD PTR _put$[ebp], ecx

; 478  :         if (put > bits)

	mov	edx, DWORD PTR _put$[ebp]
	cmp	edx, DWORD PTR _bits$[ebp]
	jle	SHORT $LN1@deflatePri

; 479  :             put = bits;

	mov	eax, DWORD PTR _bits$[ebp]
	mov	DWORD PTR _put$[ebp], eax
$LN1@deflatePri:

; 480  :         s->bi_buf |= (ush)((value & ((1 << put) - 1)) << s->bi_valid);

	mov	edx, 1
	mov	ecx, DWORD PTR _put$[ebp]
	shl	edx, cl
	sub	edx, 1
	and	edx, DWORD PTR _value$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	shl	edx, cl
	movzx	ecx, dx
	mov	edx, DWORD PTR _s$[ebp]
	movzx	eax, WORD PTR [edx+5816]
	or	eax, ecx
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+5816], ax

; 481  :         s->bi_valid += put;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5820]
	add	eax, DWORD PTR _put$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5820], eax

; 482  :         _tr_flush_bits(s);

	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	__tr_flush_bits
	add	esp, 4

; 483  :         value >>= put;

	mov	eax, DWORD PTR _value$[ebp]
	mov	ecx, DWORD PTR _put$[ebp]
	sar	eax, cl
	mov	DWORD PTR _value$[ebp], eax

; 484  :         bits -= put;

	mov	ecx, DWORD PTR _bits$[ebp]
	sub	ecx, DWORD PTR _put$[ebp]
	mov	DWORD PTR _bits$[ebp], ecx

; 485  :     } while (bits);

	jne	$LN4@deflatePri

; 486  :     return Z_OK;

	xor	eax, eax
$LN8@deflatePri:

; 487  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_deflatePrime@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs_project\zlib-1.2.8\deflate.c
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_pending$ = 12						; size = 4
_bits$ = 16						; size = 4
_deflatePending@12 PROC

; 454  : {

	push	ebp
	mov	ebp, esp

; 455  :     if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;

	cmp	DWORD PTR _strm$[ebp], 0
	je	SHORT $LN3@deflatePen
	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN4@deflatePen
$LN3@deflatePen:
	mov	eax, -2					; fffffffeH
	jmp	SHORT $LN5@deflatePen
$LN4@deflatePen:

; 456  :     if (pending != Z_NULL)

	cmp	DWORD PTR _pending$[ebp], 0
	je	SHORT $LN2@deflatePen

; 457  :         *pending = strm->state->pending;

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _pending$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	mov	DWORD PTR [eax], ecx
$LN2@deflatePen:

; 458  :     if (bits != Z_NULL)

	cmp	DWORD PTR _bits$[ebp], 0
	je	SHORT $LN1@deflatePen

; 459  :         *bits = strm->state->bi_valid;

	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _bits$[ebp]
	mov	edx, DWORD PTR [eax+5820]
	mov	DWORD PTR [ecx], edx
$LN1@deflatePen:

; 460  :     return Z_OK;

	xor	eax, eax
$LN5@deflatePen:

; 461  : }

	pop	ebp
	ret	12					; 0000000cH
_deflatePending@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs_project\zlib-1.2.8\deflate.c
_TEXT	SEGMENT
tv138 = -32						; size = 4
tv130 = -28						; size = 4
_complen$ = -24						; size = 4
tv80 = -20						; size = 4
tv77 = -16						; size = 4
_str$ = -12						; size = 4
_s$ = -8						; size = 4
_wraplen$ = -4						; size = 4
_strm$ = 8						; size = 4
_sourceLen$ = 12					; size = 4
_deflateBound@8 PROC

; 569  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H

; 570  :     deflate_state *s;
; 571  :     uLong complen, wraplen;
; 572  :     Bytef *str;
; 573  : 
; 574  :     /* conservative upper bound for compressed data */
; 575  :     complen = sourceLen +
; 576  :               ((sourceLen + 7) >> 3) + ((sourceLen + 63) >> 6) + 5;

	mov	eax, DWORD PTR _sourceLen$[ebp]
	add	eax, 7
	shr	eax, 3
	add	eax, DWORD PTR _sourceLen$[ebp]
	mov	ecx, DWORD PTR _sourceLen$[ebp]
	add	ecx, 63					; 0000003fH
	shr	ecx, 6
	lea	edx, DWORD PTR [eax+ecx+5]
	mov	DWORD PTR _complen$[ebp], edx

; 577  : 
; 578  :     /* if can't get parameters, return conservative bound plus zlib wrapper */
; 579  :     if (strm == Z_NULL || strm->state == Z_NULL)

	cmp	DWORD PTR _strm$[ebp], 0
	je	SHORT $LN20@deflateBou
	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN21@deflateBou
$LN20@deflateBou:

; 580  :         return complen + 6;

	mov	eax, DWORD PTR _complen$[ebp]
	add	eax, 6
	jmp	$LN22@deflateBou
$LN21@deflateBou:

; 581  : 
; 582  :     /* compute wrapper length */
; 583  :     s = strm->state;

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _s$[ebp], edx

; 584  :     switch (s->wrap) {

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR tv77[ebp], ecx
	cmp	DWORD PTR tv77[ebp], 0
	je	SHORT $LN17@deflateBou
	cmp	DWORD PTR tv77[ebp], 1
	je	SHORT $LN16@deflateBou
	cmp	DWORD PTR tv77[ebp], 2
	je	SHORT $LN15@deflateBou
	jmp	$LN3@deflateBou
$LN17@deflateBou:

; 585  :     case 0:                                 /* raw deflate */
; 586  :         wraplen = 0;

	mov	DWORD PTR _wraplen$[ebp], 0

; 587  :         break;

	jmp	$LN18@deflateBou
$LN16@deflateBou:

; 588  :     case 1:                                 /* zlib wrapper */
; 589  :         wraplen = 6 + (s->strstart ? 4 : 0);

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+108], 0
	je	SHORT $LN24@deflateBou
	mov	DWORD PTR tv80[ebp], 4
	jmp	SHORT $LN25@deflateBou
$LN24@deflateBou:
	mov	DWORD PTR tv80[ebp], 0
$LN25@deflateBou:
	mov	eax, DWORD PTR tv80[ebp]
	add	eax, 6
	mov	DWORD PTR _wraplen$[ebp], eax

; 590  :         break;

	jmp	$LN18@deflateBou
$LN15@deflateBou:

; 591  :     case 2:                                 /* gzip wrapper */
; 592  :         wraplen = 18;

	mov	DWORD PTR _wraplen$[ebp], 18		; 00000012H

; 593  :         if (s->gzhead != Z_NULL) {          /* user-supplied gzip header */

	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+28], 0
	je	$LN14@deflateBou

; 594  :             if (s->gzhead->extra != Z_NULL)

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+28]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN13@deflateBou

; 595  :                 wraplen += 2 + s->gzhead->extra_len;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _wraplen$[ebp]
	lea	edx, DWORD PTR [ecx+eax+2]
	mov	DWORD PTR _wraplen$[ebp], edx
$LN13@deflateBou:

; 596  :             str = s->gzhead->name;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _str$[ebp], edx

; 597  :             if (str != Z_NULL)

	cmp	DWORD PTR _str$[ebp], 0
	je	SHORT $LN12@deflateBou
$LN11@deflateBou:

; 598  :                 do {
; 599  :                     wraplen++;

	mov	eax, DWORD PTR _wraplen$[ebp]
	add	eax, 1
	mov	DWORD PTR _wraplen$[ebp], eax

; 600  :                 } while (*str++);

	mov	ecx, DWORD PTR _str$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR tv130[ebp], edx
	mov	eax, DWORD PTR _str$[ebp]
	add	eax, 1
	mov	DWORD PTR _str$[ebp], eax
	cmp	DWORD PTR tv130[ebp], 0
	jne	SHORT $LN11@deflateBou
$LN12@deflateBou:

; 601  :             str = s->gzhead->comment;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR _str$[ebp], eax

; 602  :             if (str != Z_NULL)

	cmp	DWORD PTR _str$[ebp], 0
	je	SHORT $LN8@deflateBou
$LN7@deflateBou:

; 603  :                 do {
; 604  :                     wraplen++;

	mov	ecx, DWORD PTR _wraplen$[ebp]
	add	ecx, 1
	mov	DWORD PTR _wraplen$[ebp], ecx

; 605  :                 } while (*str++);

	mov	edx, DWORD PTR _str$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	DWORD PTR tv138[ebp], eax
	mov	ecx, DWORD PTR _str$[ebp]
	add	ecx, 1
	mov	DWORD PTR _str$[ebp], ecx
	cmp	DWORD PTR tv138[ebp], 0
	jne	SHORT $LN7@deflateBou
$LN8@deflateBou:

; 606  :             if (s->gzhead->hcrc)

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+28]
	cmp	DWORD PTR [eax+44], 0
	je	SHORT $LN14@deflateBou

; 607  :                 wraplen += 2;

	mov	ecx, DWORD PTR _wraplen$[ebp]
	add	ecx, 2
	mov	DWORD PTR _wraplen$[ebp], ecx
$LN14@deflateBou:

; 608  :         }
; 609  :         break;

	jmp	SHORT $LN18@deflateBou
$LN3@deflateBou:

; 610  :     default:                                /* for compiler happiness */
; 611  :         wraplen = 6;

	mov	DWORD PTR _wraplen$[ebp], 6
$LN18@deflateBou:

; 612  :     }
; 613  : 
; 614  :     /* if not default parameters, return conservative bound */
; 615  :     if (s->w_bits != 15 || s->hash_bits != 8 + 7)

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+48], 15			; 0000000fH
	jne	SHORT $LN1@deflateBou
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+80], 15			; 0000000fH
	je	SHORT $LN2@deflateBou
$LN1@deflateBou:

; 616  :         return complen + wraplen;

	mov	eax, DWORD PTR _complen$[ebp]
	add	eax, DWORD PTR _wraplen$[ebp]
	jmp	SHORT $LN22@deflateBou
$LN2@deflateBou:

; 617  : 
; 618  :     /* default settings: return tight bound for that case */
; 619  :     return sourceLen + (sourceLen >> 12) + (sourceLen >> 14) +
; 620  :            (sourceLen >> 25) + 13 - 6 + wraplen;

	mov	ecx, DWORD PTR _sourceLen$[ebp]
	shr	ecx, 12					; 0000000cH
	add	ecx, DWORD PTR _sourceLen$[ebp]
	mov	edx, DWORD PTR _sourceLen$[ebp]
	shr	edx, 14					; 0000000eH
	add	ecx, edx
	mov	eax, DWORD PTR _sourceLen$[ebp]
	shr	eax, 25					; 00000019H
	add	ecx, DWORD PTR _wraplen$[ebp]
	lea	eax, DWORD PTR [eax+ecx+7]
$LN22@deflateBou:

; 621  : }

	mov	esp, ebp
	pop	ebp
	ret	8
_deflateBound@8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs_project\zlib-1.2.8\deflate.c
_TEXT	SEGMENT
_s$ = -4						; size = 4
_strm$ = 8						; size = 4
_good_length$ = 12					; size = 4
_max_lazy$ = 16						; size = 4
_nice_length$ = 20					; size = 4
_max_chain$ = 24					; size = 4
_deflateTune@20 PROC

; 537  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 538  :     deflate_state *s;
; 539  : 
; 540  :     if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;

	cmp	DWORD PTR _strm$[ebp], 0
	je	SHORT $LN1@deflateTun
	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN2@deflateTun
$LN1@deflateTun:
	mov	eax, -2					; fffffffeH
	jmp	SHORT $LN3@deflateTun
$LN2@deflateTun:

; 541  :     s = strm->state;

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _s$[ebp], edx

; 542  :     s->good_match = good_length;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _good_length$[ebp]
	mov	DWORD PTR [eax+140], ecx

; 543  :     s->max_lazy_match = max_lazy;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _max_lazy$[ebp]
	mov	DWORD PTR [edx+128], eax

; 544  :     s->nice_match = nice_length;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _nice_length$[ebp]
	mov	DWORD PTR [ecx+144], edx

; 545  :     s->max_chain_length = max_chain;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _max_chain$[ebp]
	mov	DWORD PTR [eax+124], ecx

; 546  :     return Z_OK;

	xor	eax, eax
$LN3@deflateTun:

; 547  : }

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
_deflateTune@20 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs_project\zlib-1.2.8\deflate.c
_TEXT	SEGMENT
_func$ = -12						; size = 4
_err$ = -8						; size = 4
_s$ = -4						; size = 4
_strm$ = 8						; size = 4
_level$ = 12						; size = 4
_strategy$ = 16						; size = 4
_deflateParams@12 PROC

; 494  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 495  :     deflate_state *s;
; 496  :     compress_func func;
; 497  :     int err = Z_OK;

	mov	DWORD PTR _err$[ebp], 0

; 498  : 
; 499  :     if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;

	cmp	DWORD PTR _strm$[ebp], 0
	je	SHORT $LN8@deflatePar
	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN9@deflatePar
$LN8@deflatePar:
	mov	eax, -2					; fffffffeH
	jmp	$LN10@deflatePar
$LN9@deflatePar:

; 500  :     s = strm->state;

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _s$[ebp], edx

; 501  : 
; 502  : #ifdef FASTEST
; 503  :     if (level != 0) level = 1;
; 504  : #else
; 505  :     if (level == Z_DEFAULT_COMPRESSION) level = 6;

	cmp	DWORD PTR _level$[ebp], -1
	jne	SHORT $LN7@deflatePar
	mov	DWORD PTR _level$[ebp], 6
$LN7@deflatePar:

; 506  : #endif
; 507  :     if (level < 0 || level > 9 || strategy < 0 || strategy > Z_FIXED) {

	cmp	DWORD PTR _level$[ebp], 0
	jl	SHORT $LN5@deflatePar
	cmp	DWORD PTR _level$[ebp], 9
	jg	SHORT $LN5@deflatePar
	cmp	DWORD PTR _strategy$[ebp], 0
	jl	SHORT $LN5@deflatePar
	cmp	DWORD PTR _strategy$[ebp], 4
	jle	SHORT $LN6@deflatePar
$LN5@deflatePar:

; 508  :         return Z_STREAM_ERROR;

	mov	eax, -2					; fffffffeH
	jmp	$LN10@deflatePar
$LN6@deflatePar:

; 509  :     }
; 510  :     func = configuration_table[s->level].func;

	mov	eax, DWORD PTR _s$[ebp]
	imul	ecx, DWORD PTR [eax+132], 12
	mov	edx, DWORD PTR _configuration_table[ecx+8]
	mov	DWORD PTR _func$[ebp], edx

; 511  : 
; 512  :     if ((strategy != s->strategy || func != configuration_table[level].func) &&
; 513  :         strm->total_in != 0) {

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _strategy$[ebp]
	cmp	ecx, DWORD PTR [eax+136]
	jne	SHORT $LN3@deflatePar
	imul	edx, DWORD PTR _level$[ebp], 12
	mov	eax, DWORD PTR _func$[ebp]
	cmp	eax, DWORD PTR _configuration_table[edx+8]
	je	SHORT $LN4@deflatePar
$LN3@deflatePar:
	mov	ecx, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN4@deflatePar

; 514  :         /* Flush the last buffer: */
; 515  :         err = deflate(strm, Z_BLOCK);

	push	5
	mov	edx, DWORD PTR _strm$[ebp]
	push	edx
	call	_deflate@8
	mov	DWORD PTR _err$[ebp], eax

; 516  :         if (err == Z_BUF_ERROR && s->pending == 0)

	cmp	DWORD PTR _err$[ebp], -5		; fffffffbH
	jne	SHORT $LN4@deflatePar
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN4@deflatePar

; 517  :             err = Z_OK;

	mov	DWORD PTR _err$[ebp], 0
$LN4@deflatePar:

; 518  :     }
; 519  :     if (s->level != level) {

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+132]
	cmp	edx, DWORD PTR _level$[ebp]
	je	SHORT $LN1@deflatePar

; 520  :         s->level = level;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _level$[ebp]
	mov	DWORD PTR [eax+132], ecx

; 521  :         s->max_lazy_match   = configuration_table[level].max_lazy;

	imul	edx, DWORD PTR _level$[ebp], 12
	movzx	eax, WORD PTR _configuration_table[edx+2]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+128], eax

; 522  :         s->good_match       = configuration_table[level].good_length;

	imul	edx, DWORD PTR _level$[ebp], 12
	movzx	eax, WORD PTR _configuration_table[edx]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+140], eax

; 523  :         s->nice_match       = configuration_table[level].nice_length;

	imul	edx, DWORD PTR _level$[ebp], 12
	movzx	eax, WORD PTR _configuration_table[edx+4]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+144], eax

; 524  :         s->max_chain_length = configuration_table[level].max_chain;

	imul	edx, DWORD PTR _level$[ebp], 12
	movzx	eax, WORD PTR _configuration_table[edx+6]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+124], eax
$LN1@deflatePar:

; 525  :     }
; 526  :     s->strategy = strategy;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _strategy$[ebp]
	mov	DWORD PTR [edx+136], eax

; 527  :     return err;

	mov	eax, DWORD PTR _err$[ebp]
$LN10@deflatePar:

; 528  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_deflateParams@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs_project\zlib-1.2.8\deflate.c
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_strm$ = 8						; size = 4
_deflateReset@4 PROC

; 429  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 430  :     int ret;
; 431  : 
; 432  :     ret = deflateResetKeep(strm);

	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_deflateResetKeep@4
	mov	DWORD PTR _ret$[ebp], eax

; 433  :     if (ret == Z_OK)

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN1@deflateRes

; 434  :         lm_init(strm->state);

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	call	_lm_init
	add	esp, 4
$LN1@deflateRes:

; 435  :     return ret;

	mov	eax, DWORD PTR _ret$[ebp]

; 436  : }

	mov	esp, ebp
	pop	ebp
	ret	4
_deflateReset@4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs_project\zlib-1.2.8\deflate.c
_TEXT	SEGMENT
_overlay$ = -12						; size = 4
_ss$ = -8						; size = 4
_ds$ = -4						; size = 4
_dest$ = 8						; size = 4
_source$ = 12						; size = 4
_deflateCopy@8 PROC

; 1017 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 1018 : #ifdef MAXSEG_64K
; 1019 :     return Z_STREAM_ERROR;
; 1020 : #else
; 1021 :     deflate_state *ds;
; 1022 :     deflate_state *ss;
; 1023 :     ushf *overlay;
; 1024 : 
; 1025 : 
; 1026 :     if (source == Z_NULL || dest == Z_NULL || source->state == Z_NULL) {

	cmp	DWORD PTR _source$[ebp], 0
	je	SHORT $LN4@deflateCop
	cmp	DWORD PTR _dest$[ebp], 0
	je	SHORT $LN4@deflateCop
	mov	eax, DWORD PTR _source$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN5@deflateCop
$LN4@deflateCop:

; 1027 :         return Z_STREAM_ERROR;

	mov	eax, -2					; fffffffeH
	jmp	$LN6@deflateCop
$LN5@deflateCop:

; 1028 :     }
; 1029 : 
; 1030 :     ss = source->state;

	mov	ecx, DWORD PTR _source$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _ss$[ebp], edx

; 1031 : 
; 1032 :     zmemcpy((voidpf)dest, (voidpf)source, sizeof(z_stream));

	push	56					; 00000038H
	mov	eax, DWORD PTR _source$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1033 : 
; 1034 :     ds = (deflate_state *) ZALLOC(dest, 1, sizeof(deflate_state));

	push	5828					; 000016c4H
	push	1
	mov	edx, DWORD PTR _dest$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ds$[ebp], eax

; 1035 :     if (ds == Z_NULL) return Z_MEM_ERROR;

	cmp	DWORD PTR _ds$[ebp], 0
	jne	SHORT $LN3@deflateCop
	mov	eax, -4					; fffffffcH
	jmp	$LN6@deflateCop
$LN3@deflateCop:

; 1036 :     dest->state = (struct internal_state FAR *) ds;

	mov	eax, DWORD PTR _dest$[ebp]
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	DWORD PTR [eax+28], ecx

; 1037 :     zmemcpy((voidpf)ds, (voidpf)ss, sizeof(deflate_state));

	push	5828					; 000016c4H
	mov	edx, DWORD PTR _ss$[ebp]
	push	edx
	mov	eax, DWORD PTR _ds$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1038 :     ds->strm = dest;

	mov	ecx, DWORD PTR _ds$[ebp]
	mov	edx, DWORD PTR _dest$[ebp]
	mov	DWORD PTR [ecx], edx

; 1039 : 
; 1040 :     ds->window = (Bytef *) ZALLOC(dest, ds->w_size, 2*sizeof(Byte));

	push	2
	mov	eax, DWORD PTR _ds$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	mov	edx, DWORD PTR _dest$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	DWORD PTR [ecx+56], eax

; 1041 :     ds->prev   = (Posf *)  ZALLOC(dest, ds->w_size, sizeof(Pos));

	push	2
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+44]
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR _dest$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	ecx
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _ds$[ebp]
	mov	DWORD PTR [edx+64], eax

; 1042 :     ds->head   = (Posf *)  ZALLOC(dest, ds->hash_size, sizeof(Pos));

	push	2
	mov	eax, DWORD PTR _ds$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	push	ecx
	mov	edx, DWORD PTR _dest$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	DWORD PTR [ecx+68], eax

; 1043 :     overlay = (ushf *) ZALLOC(dest, ds->lit_bufsize, sizeof(ush)+2);

	push	4
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+5788]
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR _dest$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	ecx
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _overlay$[ebp], eax

; 1044 :     ds->pending_buf = (uchf *) overlay;

	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR _overlay$[ebp]
	mov	DWORD PTR [edx+8], eax

; 1045 : 
; 1046 :     if (ds->window == Z_NULL || ds->prev == Z_NULL || ds->head == Z_NULL ||
; 1047 :         ds->pending_buf == Z_NULL) {

	mov	ecx, DWORD PTR _ds$[ebp]
	cmp	DWORD PTR [ecx+56], 0
	je	SHORT $LN1@deflateCop
	mov	edx, DWORD PTR _ds$[ebp]
	cmp	DWORD PTR [edx+64], 0
	je	SHORT $LN1@deflateCop
	mov	eax, DWORD PTR _ds$[ebp]
	cmp	DWORD PTR [eax+68], 0
	je	SHORT $LN1@deflateCop
	mov	ecx, DWORD PTR _ds$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	jne	SHORT $LN2@deflateCop
$LN1@deflateCop:

; 1048 :         deflateEnd (dest);

	mov	edx, DWORD PTR _dest$[ebp]
	push	edx
	call	_deflateEnd@4

; 1049 :         return Z_MEM_ERROR;

	mov	eax, -4					; fffffffcH
	jmp	$LN6@deflateCop
$LN2@deflateCop:

; 1050 :     }
; 1051 :     /* following zmemcpy do not work for 16-bit MSDOS */
; 1052 :     zmemcpy(ds->window, ss->window, ds->w_size * 2 * sizeof(Byte));

	mov	eax, DWORD PTR _ds$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	shl	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _ss$[ebp]
	mov	eax, DWORD PTR [edx+56]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1053 :     zmemcpy((voidpf)ds->prev, (voidpf)ss->prev, ds->w_size * sizeof(Pos));

	mov	eax, DWORD PTR _ds$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	shl	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _ss$[ebp]
	mov	eax, DWORD PTR [edx+64]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1054 :     zmemcpy((voidpf)ds->head, (voidpf)ss->head, ds->hash_size * sizeof(Pos));

	mov	eax, DWORD PTR _ds$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	shl	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _ss$[ebp]
	mov	eax, DWORD PTR [edx+68]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1055 :     zmemcpy(ds->pending_buf, ss->pending_buf, (uInt)ds->pending_buf_size);

	mov	eax, DWORD PTR _ds$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _ss$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1056 : 
; 1057 :     ds->pending_out = ds->pending_buf + (ss->pending_out - ss->pending_buf);

	mov	eax, DWORD PTR _ss$[ebp]
	mov	ecx, DWORD PTR _ss$[ebp]
	mov	edx, DWORD PTR [eax+16]
	sub	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _ds$[ebp]
	add	edx, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	DWORD PTR [ecx+16], edx

; 1058 :     ds->d_buf = overlay + ds->lit_bufsize/sizeof(ush);

	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+5788]
	shr	eax, 1
	mov	ecx, DWORD PTR _overlay$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	eax, DWORD PTR _ds$[ebp]
	mov	DWORD PTR [eax+5796], edx

; 1059 :     ds->l_buf = ds->pending_buf + (1+sizeof(ush))*ds->lit_bufsize;

	mov	ecx, DWORD PTR _ds$[ebp]
	imul	edx, DWORD PTR [ecx+5788], 3
	mov	eax, DWORD PTR _ds$[ebp]
	add	edx, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	DWORD PTR [ecx+5784], edx

; 1060 : 
; 1061 :     ds->l_desc.dyn_tree = ds->dyn_ltree;

	mov	edx, DWORD PTR _ds$[ebp]
	add	edx, 148				; 00000094H
	mov	eax, DWORD PTR _ds$[ebp]
	mov	DWORD PTR [eax+2840], edx

; 1062 :     ds->d_desc.dyn_tree = ds->dyn_dtree;

	mov	ecx, DWORD PTR _ds$[ebp]
	add	ecx, 2440				; 00000988H
	mov	edx, DWORD PTR _ds$[ebp]
	mov	DWORD PTR [edx+2852], ecx

; 1063 :     ds->bl_desc.dyn_tree = ds->bl_tree;

	mov	eax, DWORD PTR _ds$[ebp]
	add	eax, 2684				; 00000a7cH
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	DWORD PTR [ecx+2864], eax

; 1064 : 
; 1065 :     return Z_OK;

	xor	eax, eax
$LN6@deflateCop:

; 1066 : #endif /* MAXSEG_64K */
; 1067 : }

	mov	esp, ebp
	pop	ebp
	ret	8
_deflateCopy@8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs_project\zlib-1.2.8\deflate.c
_TEXT	SEGMENT
_avail$ = -24						; size = 4
_next$ = -20						; size = 4
_n$ = -16						; size = 4
_wrap$ = -12						; size = 4
_str$ = -8						; size = 4
_s$ = -4						; size = 4
_strm$ = 8						; size = 4
_dictionary$ = 12					; size = 4
_dictLength$ = 16					; size = 4
_deflateSetDictionary@12 PROC

; 327  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi

; 328  :     deflate_state *s;
; 329  :     uInt str, n;
; 330  :     int wrap;
; 331  :     unsigned avail;
; 332  :     z_const unsigned char *next;
; 333  : 
; 334  :     if (strm == Z_NULL || strm->state == Z_NULL || dictionary == Z_NULL)

	cmp	DWORD PTR _strm$[ebp], 0
	je	SHORT $LN12@deflateSet
	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN12@deflateSet
	cmp	DWORD PTR _dictionary$[ebp], 0
	jne	SHORT $LN13@deflateSet
$LN12@deflateSet:

; 335  :         return Z_STREAM_ERROR;

	mov	eax, -2					; fffffffeH
	jmp	$LN14@deflateSet
$LN13@deflateSet:

; 336  :     s = strm->state;

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _s$[ebp], edx

; 337  :     wrap = s->wrap;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _wrap$[ebp], ecx

; 338  :     if (wrap == 2 || (wrap == 1 && s->status != INIT_STATE) || s->lookahead)

	cmp	DWORD PTR _wrap$[ebp], 2
	je	SHORT $LN10@deflateSet
	cmp	DWORD PTR _wrap$[ebp], 1
	jne	SHORT $LN9@deflateSet
	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+4], 42			; 0000002aH
	jne	SHORT $LN10@deflateSet
$LN9@deflateSet:
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+116], 0
	je	SHORT $LN11@deflateSet
$LN10@deflateSet:

; 339  :         return Z_STREAM_ERROR;

	mov	eax, -2					; fffffffeH
	jmp	$LN14@deflateSet
$LN11@deflateSet:

; 340  : 
; 341  :     /* when using zlib wrappers, compute Adler-32 for provided dictionary */
; 342  :     if (wrap == 1)

	cmp	DWORD PTR _wrap$[ebp], 1
	jne	SHORT $LN8@deflateSet

; 343  :         strm->adler = adler32(strm->adler, dictionary, dictLength);

	mov	ecx, DWORD PTR _dictLength$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dictionary$[ebp]
	push	edx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	call	_adler32@12
	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [edx+48], eax
$LN8@deflateSet:

; 344  :     s->wrap = 0;                    /* avoid computing Adler-32 in read_buf */

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+24], 0

; 345  : 
; 346  :     /* if dictionary would fill window, just replace the history */
; 347  :     if (dictLength >= s->w_size) {

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _dictLength$[ebp]
	cmp	edx, DWORD PTR [ecx+44]
	jb	SHORT $LN7@deflateSet

; 348  :         if (wrap == 0) {            /* already empty otherwise */

	cmp	DWORD PTR _wrap$[ebp], 0
	jne	SHORT $LN6@deflateSet

; 349  :             CLEAR_HASH(s);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+68]
	xor	edx, edx
	mov	WORD PTR [eax+ecx*2-2], dx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	lea	edx, DWORD PTR [ecx+ecx-2]
	push	edx
	push	0
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 350  :             s->strstart = 0;

	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+108], 0

; 351  :             s->block_start = 0L;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+92], 0

; 352  :             s->insert = 0;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5812], 0
$LN6@deflateSet:

; 353  :         }
; 354  :         dictionary += dictLength - s->w_size;  /* use the tail */

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _dictLength$[ebp]
	sub	eax, DWORD PTR [edx+44]
	add	eax, DWORD PTR _dictionary$[ebp]
	mov	DWORD PTR _dictionary$[ebp], eax

; 355  :         dictLength = s->w_size;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR _dictLength$[ebp], edx
$LN7@deflateSet:

; 356  :     }
; 357  : 
; 358  :     /* insert dictionary into window and hash */
; 359  :     avail = strm->avail_in;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _avail$[ebp], ecx

; 360  :     next = strm->next_in;

	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _next$[ebp], eax

; 361  :     strm->avail_in = dictLength;

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR _dictLength$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 362  :     strm->next_in = (z_const Bytef *)dictionary;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR _dictionary$[ebp]
	mov	DWORD PTR [eax], ecx

; 363  :     fill_window(s);

	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_fill_window
	add	esp, 4
$LN5@deflateSet:

; 364  :     while (s->lookahead >= MIN_MATCH) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+116], 3
	jb	$LN4@deflateSet

; 365  :         str = s->strstart;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	DWORD PTR _str$[ebp], edx

; 366  :         n = s->lookahead - (MIN_MATCH-1);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	sub	ecx, 2
	mov	DWORD PTR _n$[ebp], ecx
$LN3@deflateSet:

; 367  :         do {
; 368  :             UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]);

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+72]
	mov	ecx, DWORD PTR [eax+88]
	shl	edx, cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	eax, DWORD PTR _str$[ebp]
	movzx	ecx, BYTE PTR [ecx+eax+2]
	xor	edx, ecx
	mov	eax, DWORD PTR _s$[ebp]
	and	edx, DWORD PTR [eax+84]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+72], edx

; 369  : #ifndef FASTEST
; 370  :             s->prev[str & s->w_mask] = s->head[s->ins_h];

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+72]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	esi, DWORD PTR _str$[ebp]
	and	esi, DWORD PTR [ecx+52]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+64]
	mov	dx, WORD PTR [edx+eax*2]
	mov	WORD PTR [ecx+esi*2], dx

; 371  : #endif
; 372  :             s->head[s->ins_h] = (Pos)str;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	dx, WORD PTR _str$[ebp]
	mov	WORD PTR [eax+ecx*2], dx

; 373  :             str++;

	mov	eax, DWORD PTR _str$[ebp]
	add	eax, 1
	mov	DWORD PTR _str$[ebp], eax

; 374  :         } while (--n);

	mov	ecx, DWORD PTR _n$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _n$[ebp], ecx
	jne	SHORT $LN3@deflateSet

; 375  :         s->strstart = str;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _str$[ebp]
	mov	DWORD PTR [edx+108], eax

; 376  :         s->lookahead = MIN_MATCH-1;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+116], 2

; 377  :         fill_window(s);

	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_fill_window
	add	esp, 4

; 378  :     }

	jmp	$LN5@deflateSet
$LN4@deflateSet:

; 379  :     s->strstart += s->lookahead;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	edx, DWORD PTR _s$[ebp]
	add	ecx, DWORD PTR [edx+116]
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+108], ecx

; 380  :     s->block_start = (long)s->strstart;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+108]
	mov	DWORD PTR [ecx+92], eax

; 381  :     s->insert = s->lookahead;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+116]
	mov	DWORD PTR [ecx+5812], eax

; 382  :     s->lookahead = 0;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+116], 0

; 383  :     s->match_length = s->prev_length = MIN_MATCH-1;

	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+120], 2
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+96], 2

; 384  :     s->match_available = 0;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+104], 0

; 385  :     strm->next_in = next;

	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR _next$[ebp]
	mov	DWORD PTR [edx], eax

; 386  :     strm->avail_in = avail;

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR _avail$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 387  :     s->wrap = wrap;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _wrap$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 388  :     return Z_OK;

	xor	eax, eax
$LN14@deflateSet:

; 389  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_deflateSetDictionary@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs_project\zlib-1.2.8\deflate.c
_TEXT	SEGMENT
tv151 = -8						; size = 4
_status$ = -4						; size = 4
_strm$ = 8						; size = 4
_deflateEnd@4 PROC

; 981  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 982  :     int status;
; 983  : 
; 984  :     if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;

	cmp	DWORD PTR _strm$[ebp], 0
	je	SHORT $LN6@deflateEnd
	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN7@deflateEnd
$LN6@deflateEnd:
	mov	eax, -2					; fffffffeH
	jmp	$LN8@deflateEnd
$LN7@deflateEnd:

; 985  : 
; 986  :     status = strm->state->status;

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _status$[ebp], eax

; 987  :     if (status != INIT_STATE &&
; 988  :         status != EXTRA_STATE &&
; 989  :         status != NAME_STATE &&
; 990  :         status != COMMENT_STATE &&
; 991  :         status != HCRC_STATE &&
; 992  :         status != BUSY_STATE &&
; 993  :         status != FINISH_STATE) {

	cmp	DWORD PTR _status$[ebp], 42		; 0000002aH
	je	SHORT $LN5@deflateEnd
	cmp	DWORD PTR _status$[ebp], 69		; 00000045H
	je	SHORT $LN5@deflateEnd
	cmp	DWORD PTR _status$[ebp], 73		; 00000049H
	je	SHORT $LN5@deflateEnd
	cmp	DWORD PTR _status$[ebp], 91		; 0000005bH
	je	SHORT $LN5@deflateEnd
	cmp	DWORD PTR _status$[ebp], 103		; 00000067H
	je	SHORT $LN5@deflateEnd
	cmp	DWORD PTR _status$[ebp], 113		; 00000071H
	je	SHORT $LN5@deflateEnd
	cmp	DWORD PTR _status$[ebp], 666		; 0000029aH
	je	SHORT $LN5@deflateEnd

; 994  :       return Z_STREAM_ERROR;

	mov	eax, -2					; fffffffeH
	jmp	$LN8@deflateEnd
$LN5@deflateEnd:

; 995  :     }
; 996  : 
; 997  :     /* Deallocate in reverse order of allocations: */
; 998  :     TRY_FREE(strm, strm->state->pending_buf);

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN4@deflateEnd
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 8
$LN4@deflateEnd:

; 999  :     TRY_FREE(strm, strm->state->head);

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	cmp	DWORD PTR [edx+68], 0
	je	SHORT $LN3@deflateEnd
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+68]
	push	edx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 8
$LN3@deflateEnd:

; 1000 :     TRY_FREE(strm, strm->state->prev);

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	cmp	DWORD PTR [edx+64], 0
	je	SHORT $LN2@deflateEnd
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+64]
	push	edx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 8
$LN2@deflateEnd:

; 1001 :     TRY_FREE(strm, strm->state->window);

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	cmp	DWORD PTR [edx+56], 0
	je	SHORT $LN1@deflateEnd
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+56]
	push	edx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 8
$LN1@deflateEnd:

; 1002 : 
; 1003 :     ZFREE(strm, strm->state);

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 8

; 1004 :     strm->state = Z_NULL;

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+28], 0

; 1005 : 
; 1006 :     return status == BUSY_STATE ? Z_DATA_ERROR : Z_OK;

	cmp	DWORD PTR _status$[ebp], 113		; 00000071H
	jne	SHORT $LN10@deflateEnd
	mov	DWORD PTR tv151[ebp], -3		; fffffffdH
	jmp	SHORT $LN11@deflateEnd
$LN10@deflateEnd:
	mov	DWORD PTR tv151[ebp], 0
$LN11@deflateEnd:
	mov	eax, DWORD PTR tv151[ebp]
$LN8@deflateEnd:

; 1007 : }

	mov	esp, ebp
	pop	ebp
	ret	4
_deflateEnd@4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs_project\zlib-1.2.8\deflate.c
_TEXT	SEGMENT
tv839 = -96						; size = 4
tv693 = -92						; size = 4
tv692 = -88						; size = 4
tv654 = -84						; size = 4
_old_flush$ = -80					; size = 4
tv650 = -76						; size = 4
tv306 = -72						; size = 4
tv305 = -68						; size = 4
tv242 = -64						; size = 4
tv237 = -60						; size = 4
tv232 = -56						; size = 4
tv227 = -52						; size = 4
tv223 = -48						; size = 4
tv203 = -44						; size = 4
tv202 = -40						; size = 4
_val$1 = -36						; size = 4
_val$2 = -32						; size = 4
_level_flags$3 = -28					; size = 4
_bstate$4 = -24						; size = 4
_beg$5 = -20						; size = 4
_beg$6 = -16						; size = 4
_beg$7 = -12						; size = 4
_header$8 = -8						; size = 4
_s$ = -4						; size = 4
_strm$ = 8						; size = 4
_flush$ = 12						; size = 4
_deflate@8 PROC

; 668  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	esi

; 669  :     int old_flush; /* value of flush param for previous deflate call */
; 670  :     deflate_state *s;
; 671  : 
; 672  :     if (strm == Z_NULL || strm->state == Z_NULL ||
; 673  :         flush > Z_BLOCK || flush < 0) {

	cmp	DWORD PTR _strm$[ebp], 0
	je	SHORT $LN82@deflate
	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN82@deflate
	cmp	DWORD PTR _flush$[ebp], 5
	jg	SHORT $LN82@deflate
	cmp	DWORD PTR _flush$[ebp], 0
	jge	SHORT $LN83@deflate
$LN82@deflate:

; 674  :         return Z_STREAM_ERROR;

	mov	eax, -2					; fffffffeH
	jmp	$LN84@deflate
$LN83@deflate:

; 675  :     }
; 676  :     s = strm->state;

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _s$[ebp], edx

; 677  : 
; 678  :     if (strm->next_out == Z_NULL ||
; 679  :         (strm->next_in == Z_NULL && strm->avail_in != 0) ||
; 680  :         (s->status == FINISH_STATE && flush != Z_FINISH)) {

	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN80@deflate
	mov	ecx, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN79@deflate
	mov	edx, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [edx+4], 0
	jne	SHORT $LN80@deflate
$LN79@deflate:
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+4], 666			; 0000029aH
	jne	SHORT $LN81@deflate
	cmp	DWORD PTR _flush$[ebp], 4
	je	SHORT $LN81@deflate
$LN80@deflate:

; 681  :         ERR_RETURN(strm, Z_STREAM_ERROR);

	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR _z_errmsg[ecx]
	mov	DWORD PTR [edx+24], eax
	mov	eax, -2					; fffffffeH
	jmp	$LN84@deflate
$LN81@deflate:

; 682  :     }
; 683  :     if (strm->avail_out == 0) ERR_RETURN(strm, Z_BUF_ERROR);

	mov	ecx, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	jne	SHORT $LN78@deflate
	mov	edx, 4
	imul	eax, edx, 7
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR _z_errmsg[eax]
	mov	DWORD PTR [ecx+24], edx
	mov	eax, -5					; fffffffbH
	jmp	$LN84@deflate
$LN78@deflate:

; 684  : 
; 685  :     s->strm = strm; /* just in case */

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax], ecx

; 686  :     old_flush = s->last_flush;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR _old_flush$[ebp], eax

; 687  :     s->last_flush = flush;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _flush$[ebp]
	mov	DWORD PTR [ecx+40], edx

; 688  : 
; 689  :     /* Write the header */
; 690  :     if (s->status == INIT_STATE) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+4], 42			; 0000002aH
	jne	$LN77@deflate

; 691  : #ifdef GZIP
; 692  :         if (s->wrap == 2) {

	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+24], 2
	jne	$LN76@deflate

; 693  :             strm->adler = crc32(0L, Z_NULL, 0);

	push	0
	push	0
	push	0
	call	_crc32@12
	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [edx+48], eax

; 694  :             put_byte(s, 31);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	BYTE PTR [eax+ecx], 31			; 0000001fH
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], edx

; 695  :             put_byte(s, 139);

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	BYTE PTR [ecx+edx], 139			; 0000008bH
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	add	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+20], eax

; 696  :             put_byte(s, 8);

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	BYTE PTR [edx+eax], 8
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 697  :             if (s->gzhead == Z_NULL) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	$LN75@deflate

; 698  :                 put_byte(s, 0);

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	BYTE PTR [ecx+edx], 0
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	add	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+20], eax

; 699  :                 put_byte(s, 0);

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	BYTE PTR [edx+eax], 0
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 700  :                 put_byte(s, 0);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	BYTE PTR [eax+ecx], 0
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], edx

; 701  :                 put_byte(s, 0);

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	BYTE PTR [ecx+edx], 0
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	add	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+20], eax

; 702  :                 put_byte(s, 0);

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	BYTE PTR [edx+eax], 0
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 703  :                 put_byte(s, s->level == 9 ? 2 :
; 704  :                             (s->strategy >= Z_HUFFMAN_ONLY || s->level < 2 ?
; 705  :                              4 : 0));

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+132], 9
	jne	SHORT $LN88@deflate
	mov	DWORD PTR tv203[ebp], 2
	jmp	SHORT $LN89@deflate
$LN88@deflate:
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+136], 2
	jge	SHORT $LN86@deflate
	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+132], 2
	jl	SHORT $LN86@deflate
	mov	DWORD PTR tv202[ebp], 0
	jmp	SHORT $LN87@deflate
$LN86@deflate:
	mov	DWORD PTR tv202[ebp], 4
$LN87@deflate:
	mov	eax, DWORD PTR tv202[ebp]
	mov	DWORD PTR tv203[ebp], eax
$LN89@deflate:
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	al, BYTE PTR tv203[ebp]
	mov	BYTE PTR [ecx+edx], al
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], edx

; 706  :                 put_byte(s, OS_CODE);

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	BYTE PTR [ecx+edx], 11			; 0000000bH
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	add	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+20], eax

; 707  :                 s->status = BUSY_STATE;

	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+4], 113			; 00000071H

; 708  :             }
; 709  :             else {

	jmp	$LN74@deflate
$LN75@deflate:

; 710  :                 put_byte(s, (s->gzhead->text ? 1 : 0) +
; 711  :                             (s->gzhead->hcrc ? 2 : 0) +
; 712  :                             (s->gzhead->extra == Z_NULL ? 0 : 4) +
; 713  :                             (s->gzhead->name == Z_NULL ? 0 : 8) +
; 714  :                             (s->gzhead->comment == Z_NULL ? 0 : 16)
; 715  :                         );

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN90@deflate
	mov	DWORD PTR tv223[ebp], 1
	jmp	SHORT $LN91@deflate
$LN90@deflate:
	mov	DWORD PTR tv223[ebp], 0
$LN91@deflate:
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+28]
	cmp	DWORD PTR [eax+44], 0
	je	SHORT $LN92@deflate
	mov	DWORD PTR tv227[ebp], 2
	jmp	SHORT $LN93@deflate
$LN92@deflate:
	mov	DWORD PTR tv227[ebp], 0
$LN93@deflate:
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	cmp	DWORD PTR [edx+16], 0
	jne	SHORT $LN94@deflate
	mov	DWORD PTR tv232[ebp], 0
	jmp	SHORT $LN95@deflate
$LN94@deflate:
	mov	DWORD PTR tv232[ebp], 4
$LN95@deflate:
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+28], 0
	jne	SHORT $LN96@deflate
	mov	DWORD PTR tv237[ebp], 0
	jmp	SHORT $LN97@deflate
$LN96@deflate:
	mov	DWORD PTR tv237[ebp], 8
$LN97@deflate:
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+28]
	cmp	DWORD PTR [eax+36], 0
	jne	SHORT $LN98@deflate
	mov	DWORD PTR tv242[ebp], 0
	jmp	SHORT $LN99@deflate
$LN98@deflate:
	mov	DWORD PTR tv242[ebp], 16		; 00000010H
$LN99@deflate:
	mov	ecx, DWORD PTR tv223[ebp]
	add	ecx, DWORD PTR tv227[ebp]
	add	ecx, DWORD PTR tv232[ebp]
	add	ecx, DWORD PTR tv237[ebp]
	add	ecx, DWORD PTR tv242[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 716  :                 put_byte(s, (Byte)(s->gzhead->time & 0xff));

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+4]
	and	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax+8]
	mov	BYTE PTR [eax+ecx], dl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], edx

; 717  :                 put_byte(s, (Byte)((s->gzhead->time >> 8) & 0xff));

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+4]
	shr	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	mov	BYTE PTR [ecx+edx], al
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	add	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+20], eax

; 718  :                 put_byte(s, (Byte)((s->gzhead->time >> 16) & 0xff));

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR [eax+4]
	shr	ecx, 16					; 00000010H
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 719  :                 put_byte(s, (Byte)((s->gzhead->time >> 24) & 0xff));

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+4]
	shr	edx, 24					; 00000018H
	and	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax+8]
	mov	BYTE PTR [eax+ecx], dl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], edx

; 720  :                 put_byte(s, s->level == 9 ? 2 :
; 721  :                             (s->strategy >= Z_HUFFMAN_ONLY || s->level < 2 ?
; 722  :                              4 : 0));

	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+132], 9
	jne	SHORT $LN102@deflate
	mov	DWORD PTR tv306[ebp], 2
	jmp	SHORT $LN103@deflate
$LN102@deflate:
	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+136], 2
	jge	SHORT $LN100@deflate
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+132], 2
	jl	SHORT $LN100@deflate
	mov	DWORD PTR tv305[ebp], 0
	jmp	SHORT $LN101@deflate
$LN100@deflate:
	mov	DWORD PTR tv305[ebp], 4
$LN101@deflate:
	mov	ecx, DWORD PTR tv305[ebp]
	mov	DWORD PTR tv306[ebp], ecx
$LN103@deflate:
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	cl, BYTE PTR tv306[ebp]
	mov	BYTE PTR [edx+eax], cl
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	add	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+20], eax

; 723  :                 put_byte(s, s->gzhead->os & 0xff);

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 724  :                 if (s->gzhead->extra != Z_NULL) {

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+16], 0
	je	SHORT $LN73@deflate

; 725  :                     put_byte(s, s->gzhead->extra_len & 0xff);

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR [eax+20]
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 726  :                     put_byte(s, (s->gzhead->extra_len >> 8) & 0xff);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+20]
	shr	edx, 8
	and	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax+8]
	mov	BYTE PTR [eax+ecx], dl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], edx
$LN73@deflate:

; 727  :                 }
; 728  :                 if (s->gzhead->hcrc)

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	cmp	DWORD PTR [edx+44], 0
	je	SHORT $LN72@deflate

; 729  :                     strm->adler = crc32(strm->adler, s->pending_buf,
; 730  :                                         s->pending);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	call	_crc32@12
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+48], eax
$LN72@deflate:

; 731  :                 s->gzindex = 0;

	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+32], 0

; 732  :                 s->status = EXTRA_STATE;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+4], 69			; 00000045H
$LN74@deflate:

; 733  :             }
; 734  :         }
; 735  :         else

	jmp	$LN77@deflate
$LN76@deflate:

; 736  : #endif
; 737  :         {
; 738  :             uInt header = (Z_DEFLATED + ((s->w_bits-8)<<4)) << 8;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	sub	edx, 8
	shl	edx, 4
	add	edx, 8
	shl	edx, 8
	mov	DWORD PTR _header$8[ebp], edx

; 739  :             uInt level_flags;
; 740  : 
; 741  :             if (s->strategy >= Z_HUFFMAN_ONLY || s->level < 2)

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+136], 2
	jge	SHORT $LN69@deflate
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+132], 2
	jge	SHORT $LN70@deflate
$LN69@deflate:

; 742  :                 level_flags = 0;

	mov	DWORD PTR _level_flags$3[ebp], 0
	jmp	SHORT $LN68@deflate
$LN70@deflate:

; 743  :             else if (s->level < 6)

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+132], 6
	jge	SHORT $LN67@deflate

; 744  :                 level_flags = 1;

	mov	DWORD PTR _level_flags$3[ebp], 1
	jmp	SHORT $LN68@deflate
$LN67@deflate:

; 745  :             else if (s->level == 6)

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+132], 6
	jne	SHORT $LN65@deflate

; 746  :                 level_flags = 2;

	mov	DWORD PTR _level_flags$3[ebp], 2

; 747  :             else

	jmp	SHORT $LN68@deflate
$LN65@deflate:

; 748  :                 level_flags = 3;

	mov	DWORD PTR _level_flags$3[ebp], 3
$LN68@deflate:

; 749  :             header |= (level_flags << 6);

	mov	ecx, DWORD PTR _level_flags$3[ebp]
	shl	ecx, 6
	or	ecx, DWORD PTR _header$8[ebp]
	mov	DWORD PTR _header$8[ebp], ecx

; 750  :             if (s->strstart != 0) header |= PRESET_DICT;

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+108], 0
	je	SHORT $LN63@deflate
	mov	eax, DWORD PTR _header$8[ebp]
	or	eax, 32					; 00000020H
	mov	DWORD PTR _header$8[ebp], eax
$LN63@deflate:

; 751  :             header += 31 - (header % 31);

	mov	eax, DWORD PTR _header$8[ebp]
	xor	edx, edx
	mov	ecx, 31					; 0000001fH
	div	ecx
	mov	eax, 31					; 0000001fH
	sub	eax, edx
	add	eax, DWORD PTR _header$8[ebp]
	mov	DWORD PTR _header$8[ebp], eax

; 752  : 
; 753  :             s->status = BUSY_STATE;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+4], 113			; 00000071H

; 754  :             putShortMSB(s, header);

	mov	edx, DWORD PTR _header$8[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_putShortMSB
	add	esp, 8

; 755  : 
; 756  :             /* Save the adler32 of the preset dictionary: */
; 757  :             if (s->strstart != 0) {

	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+108], 0
	je	SHORT $LN62@deflate

; 758  :                 putShortMSB(s, (uInt)(strm->adler >> 16));

	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+48]
	shr	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_putShortMSB
	add	esp, 8

; 759  :                 putShortMSB(s, (uInt)(strm->adler & 0xffff));

	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+48]
	and	eax, 65535				; 0000ffffH
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_putShortMSB
	add	esp, 8
$LN62@deflate:

; 760  :             }
; 761  :             strm->adler = adler32(0L, Z_NULL, 0);

	push	0
	push	0
	push	0
	call	_adler32@12
	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [edx+48], eax
$LN77@deflate:

; 762  :         }
; 763  :     }
; 764  : #ifdef GZIP
; 765  :     if (s->status == EXTRA_STATE) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+4], 69			; 00000045H
	jne	$LN61@deflate

; 766  :         if (s->gzhead->extra != Z_NULL) {

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	cmp	DWORD PTR [edx+16], 0
	je	$LN60@deflate

; 767  :             uInt beg = s->pending;  /* start of bytes to update crc */

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _beg$7[ebp], ecx
$LN59@deflate:

; 768  : 
; 769  :             while (s->gzindex < (s->gzhead->extra_len & 0xffff)) {

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR [eax+20]
	and	ecx, 65535				; 0000ffffH
	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+32], ecx
	jae	$LN58@deflate

; 770  :                 if (s->pending == s->pending_buf_size) {

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+20]
	cmp	edx, DWORD PTR [ecx+12]
	jne	SHORT $LN57@deflate

; 771  :                     if (s->gzhead->hcrc && s->pending > beg)

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+44], 0
	je	SHORT $LN56@deflate
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	cmp	eax, DWORD PTR _beg$7[ebp]
	jbe	SHORT $LN56@deflate

; 772  :                         strm->adler = crc32(strm->adler, s->pending_buf + beg,
; 773  :                                             s->pending - beg);

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	sub	edx, DWORD PTR _beg$7[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _beg$7[ebp]
	push	ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+48]
	push	eax
	call	_crc32@12
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+48], eax
$LN56@deflate:

; 774  :                     flush_pending(strm);

	mov	edx, DWORD PTR _strm$[ebp]
	push	edx
	call	_flush_pending
	add	esp, 4

; 775  :                     beg = s->pending;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _beg$7[ebp], ecx

; 776  :                     if (s->pending == s->pending_buf_size)

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	cmp	ecx, DWORD PTR [eax+12]
	jne	SHORT $LN57@deflate

; 777  :                         break;

	jmp	SHORT $LN58@deflate
$LN57@deflate:

; 778  :                 }
; 779  :                 put_byte(s, s->gzhead->extra[s->gzindex]);

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR [eax+16]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	mov	esi, DWORD PTR _s$[ebp]
	mov	esi, DWORD PTR [esi+8]
	mov	dl, BYTE PTR [eax+edx]
	mov	BYTE PTR [esi+ecx], dl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 780  :                 s->gzindex++;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+32], ecx

; 781  :             }

	jmp	$LN59@deflate
$LN58@deflate:

; 782  :             if (s->gzhead->hcrc && s->pending > beg)

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+44], 0
	je	SHORT $LN54@deflate
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	cmp	eax, DWORD PTR _beg$7[ebp]
	jbe	SHORT $LN54@deflate

; 783  :                 strm->adler = crc32(strm->adler, s->pending_buf + beg,
; 784  :                                     s->pending - beg);

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	sub	edx, DWORD PTR _beg$7[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _beg$7[ebp]
	push	ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+48]
	push	eax
	call	_crc32@12
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+48], eax
$LN54@deflate:

; 785  :             if (s->gzindex == s->gzhead->extra_len) {

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	cmp	edx, DWORD PTR [eax+20]
	jne	SHORT $LN53@deflate

; 786  :                 s->gzindex = 0;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+32], 0

; 787  :                 s->status = NAME_STATE;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+4], 73			; 00000049H
$LN53@deflate:

; 788  :             }
; 789  :         }
; 790  :         else

	jmp	SHORT $LN61@deflate
$LN60@deflate:

; 791  :             s->status = NAME_STATE;

	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+4], 73			; 00000049H
$LN61@deflate:

; 792  :     }
; 793  :     if (s->status == NAME_STATE) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+4], 73			; 00000049H
	jne	$LN51@deflate

; 794  :         if (s->gzhead->name != Z_NULL) {

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	cmp	DWORD PTR [edx+28], 0
	je	$LN50@deflate

; 795  :             uInt beg = s->pending;  /* start of bytes to update crc */

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _beg$6[ebp], ecx
$LN49@deflate:

; 796  :             int val;
; 797  : 
; 798  :             do {
; 799  :                 if (s->pending == s->pending_buf_size) {

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	cmp	ecx, DWORD PTR [eax+12]
	jne	SHORT $LN46@deflate

; 800  :                     if (s->gzhead->hcrc && s->pending > beg)

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+28]
	cmp	DWORD PTR [eax+44], 0
	je	SHORT $LN45@deflate
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	cmp	edx, DWORD PTR _beg$6[ebp]
	jbe	SHORT $LN45@deflate

; 801  :                         strm->adler = crc32(strm->adler, s->pending_buf + beg,
; 802  :                                             s->pending - beg);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	sub	ecx, DWORD PTR _beg$6[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, DWORD PTR _beg$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	call	_crc32@12
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+48], eax
$LN45@deflate:

; 803  :                     flush_pending(strm);

	mov	edx, DWORD PTR _strm$[ebp]
	push	edx
	call	_flush_pending
	add	esp, 4

; 804  :                     beg = s->pending;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _beg$6[ebp], ecx

; 805  :                     if (s->pending == s->pending_buf_size) {

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	cmp	ecx, DWORD PTR [eax+12]
	jne	SHORT $LN46@deflate

; 806  :                         val = 1;

	mov	DWORD PTR _val$2[ebp], 1

; 807  :                         break;

	jmp	SHORT $LN47@deflate
$LN46@deflate:

; 808  :                     }
; 809  :                 }
; 810  :                 val = s->gzhead->name[s->gzindex++];

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR [eax+28]
	movzx	ecx, BYTE PTR [eax+edx]
	mov	DWORD PTR _val$2[ebp], ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+32]
	add	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+32], eax

; 811  :                 put_byte(s, val);

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	cl, BYTE PTR _val$2[ebp]
	mov	BYTE PTR [edx+eax], cl
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	add	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+20], eax

; 812  :             } while (val != 0);

	cmp	DWORD PTR _val$2[ebp], 0
	jne	$LN49@deflate
$LN47@deflate:

; 813  :             if (s->gzhead->hcrc && s->pending > beg)

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+28]
	cmp	DWORD PTR [eax+44], 0
	je	SHORT $LN43@deflate
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	cmp	edx, DWORD PTR _beg$6[ebp]
	jbe	SHORT $LN43@deflate

; 814  :                 strm->adler = crc32(strm->adler, s->pending_buf + beg,
; 815  :                                     s->pending - beg);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	sub	ecx, DWORD PTR _beg$6[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, DWORD PTR _beg$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	call	_crc32@12
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+48], eax
$LN43@deflate:

; 816  :             if (val == 0) {

	cmp	DWORD PTR _val$2[ebp], 0
	jne	SHORT $LN42@deflate

; 817  :                 s->gzindex = 0;

	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+32], 0

; 818  :                 s->status = COMMENT_STATE;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+4], 91			; 0000005bH
$LN42@deflate:

; 819  :             }
; 820  :         }
; 821  :         else

	jmp	SHORT $LN51@deflate
$LN50@deflate:

; 822  :             s->status = COMMENT_STATE;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+4], 91			; 0000005bH
$LN51@deflate:

; 823  :     }
; 824  :     if (s->status == COMMENT_STATE) {

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+4], 91			; 0000005bH
	jne	$LN40@deflate

; 825  :         if (s->gzhead->comment != Z_NULL) {

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+36], 0
	je	$LN39@deflate

; 826  :             uInt beg = s->pending;  /* start of bytes to update crc */

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _beg$5[ebp], eax
$LN38@deflate:

; 827  :             int val;
; 828  : 
; 829  :             do {
; 830  :                 if (s->pending == s->pending_buf_size) {

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	cmp	eax, DWORD PTR [edx+12]
	jne	SHORT $LN35@deflate

; 831  :                     if (s->gzhead->hcrc && s->pending > beg)

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	cmp	DWORD PTR [edx+44], 0
	je	SHORT $LN34@deflate
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR _beg$5[ebp]
	jbe	SHORT $LN34@deflate

; 832  :                         strm->adler = crc32(strm->adler, s->pending_buf + beg,
; 833  :                                             s->pending - beg);

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	sub	eax, DWORD PTR _beg$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, DWORD PTR _beg$5[ebp]
	push	edx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	call	_crc32@12
	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [edx+48], eax
$LN34@deflate:

; 834  :                     flush_pending(strm);

	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_flush_pending
	add	esp, 4

; 835  :                     beg = s->pending;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR _beg$5[ebp], edx

; 836  :                     if (s->pending == s->pending_buf_size) {

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+20]
	cmp	edx, DWORD PTR [ecx+12]
	jne	SHORT $LN35@deflate

; 837  :                         val = 1;

	mov	DWORD PTR _val$1[ebp], 1

; 838  :                         break;

	jmp	SHORT $LN36@deflate
$LN35@deflate:

; 839  :                     }
; 840  :                 }
; 841  :                 val = s->gzhead->comment[s->gzindex++];

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR [ecx+36]
	movzx	edx, BYTE PTR [ecx+eax]
	mov	DWORD PTR _val$1[ebp], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+32], ecx

; 842  :                 put_byte(s, val);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	dl, BYTE PTR _val$1[ebp]
	mov	BYTE PTR [eax+ecx], dl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 843  :             } while (val != 0);

	cmp	DWORD PTR _val$1[ebp], 0
	jne	$LN38@deflate
$LN36@deflate:

; 844  :             if (s->gzhead->hcrc && s->pending > beg)

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+44], 0
	je	SHORT $LN32@deflate
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	cmp	eax, DWORD PTR _beg$5[ebp]
	jbe	SHORT $LN32@deflate

; 845  :                 strm->adler = crc32(strm->adler, s->pending_buf + beg,
; 846  :                                     s->pending - beg);

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	sub	edx, DWORD PTR _beg$5[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _beg$5[ebp]
	push	ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+48]
	push	eax
	call	_crc32@12
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+48], eax
$LN32@deflate:

; 847  :             if (val == 0)

	cmp	DWORD PTR _val$1[ebp], 0
	jne	SHORT $LN31@deflate

; 848  :                 s->status = HCRC_STATE;

	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+4], 103			; 00000067H
$LN31@deflate:

; 849  :         }
; 850  :         else

	jmp	SHORT $LN40@deflate
$LN39@deflate:

; 851  :             s->status = HCRC_STATE;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+4], 103			; 00000067H
$LN40@deflate:

; 852  :     }
; 853  :     if (s->status == HCRC_STATE) {

	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+4], 103			; 00000067H
	jne	$LN29@deflate

; 854  :         if (s->gzhead->hcrc) {

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+28]
	cmp	DWORD PTR [eax+44], 0
	je	$LN28@deflate

; 855  :             if (s->pending + 2 > s->pending_buf_size)

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 2
	mov	eax, DWORD PTR _s$[ebp]
	cmp	edx, DWORD PTR [eax+12]
	jbe	SHORT $LN27@deflate

; 856  :                 flush_pending(strm);

	mov	ecx, DWORD PTR _strm$[ebp]
	push	ecx
	call	_flush_pending
	add	esp, 4
$LN27@deflate:

; 857  :             if (s->pending + 2 <= s->pending_buf_size) {

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	add	eax, 2
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	eax, DWORD PTR [ecx+12]
	ja	SHORT $LN26@deflate

; 858  :                 put_byte(s, (Byte)(strm->adler & 0xff));

	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+48]
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	mov	BYTE PTR [ecx+edx], al
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	add	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+20], eax

; 859  :                 put_byte(s, (Byte)((strm->adler >> 8) & 0xff));

	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+48]
	shr	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	mov	BYTE PTR [ecx+edx], al
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	add	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+20], eax

; 860  :                 strm->adler = crc32(0L, Z_NULL, 0);

	push	0
	push	0
	push	0
	call	_crc32@12
	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [edx+48], eax

; 861  :                 s->status = BUSY_STATE;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+4], 113			; 00000071H
$LN26@deflate:

; 862  :             }
; 863  :         }
; 864  :         else

	jmp	SHORT $LN29@deflate
$LN28@deflate:

; 865  :             s->status = BUSY_STATE;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+4], 113			; 00000071H
$LN29@deflate:

; 866  :     }
; 867  : #endif
; 868  : 
; 869  :     /* Flush as much pending output as possible */
; 870  :     if (s->pending != 0) {

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+20], 0
	je	SHORT $LN24@deflate

; 871  :         flush_pending(strm);

	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_flush_pending
	add	esp, 4

; 872  :         if (strm->avail_out == 0) {

	mov	ecx, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	jne	SHORT $LN23@deflate

; 873  :             /* Since avail_out is 0, deflate will be called again with
; 874  :              * more output space, but possibly with both pending and
; 875  :              * avail_in equal to zero. There won't be anything to do,
; 876  :              * but this is not an error situation so make sure we
; 877  :              * return OK instead of BUF_ERROR at next call of deflate:
; 878  :              */
; 879  :             s->last_flush = -1;

	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+40], -1

; 880  :             return Z_OK;

	xor	eax, eax
	jmp	$LN84@deflate
$LN23@deflate:

; 881  :         }
; 882  : 
; 883  :     /* Make sure there is something to do and avoid duplicate consecutive
; 884  :      * flushes. For repeated and useless calls with Z_FINISH, we keep
; 885  :      * returning Z_STREAM_END instead of Z_BUF_ERROR.
; 886  :      */
; 887  :     } else if (strm->avail_in == 0 && RANK(flush) <= RANK(old_flush) &&

	jmp	SHORT $LN22@deflate
$LN24@deflate:

; 888  :                flush != Z_FINISH) {

	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN22@deflate
	cmp	DWORD PTR _flush$[ebp], 4
	jle	SHORT $LN104@deflate
	mov	DWORD PTR tv650[ebp], 9
	jmp	SHORT $LN105@deflate
$LN104@deflate:
	mov	DWORD PTR tv650[ebp], 0
$LN105@deflate:
	cmp	DWORD PTR _old_flush$[ebp], 4
	jle	SHORT $LN106@deflate
	mov	DWORD PTR tv654[ebp], 9
	jmp	SHORT $LN107@deflate
$LN106@deflate:
	mov	DWORD PTR tv654[ebp], 0
$LN107@deflate:
	mov	ecx, DWORD PTR _flush$[ebp]
	shl	ecx, 1
	sub	ecx, DWORD PTR tv650[ebp]
	mov	edx, DWORD PTR _old_flush$[ebp]
	shl	edx, 1
	sub	edx, DWORD PTR tv654[ebp]
	cmp	ecx, edx
	jg	SHORT $LN22@deflate
	cmp	DWORD PTR _flush$[ebp], 4
	je	SHORT $LN22@deflate

; 889  :         ERR_RETURN(strm, Z_BUF_ERROR);

	mov	eax, 4
	imul	ecx, eax, 7
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR _z_errmsg[ecx]
	mov	DWORD PTR [edx+24], eax
	mov	eax, -5					; fffffffbH
	jmp	$LN84@deflate
$LN22@deflate:

; 890  :     }
; 891  : 
; 892  :     /* User must not provide more input after the first FINISH: */
; 893  :     if (s->status == FINISH_STATE && strm->avail_in != 0) {

	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+4], 666			; 0000029aH
	jne	SHORT $LN20@deflate
	mov	edx, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [edx+4], 0
	je	SHORT $LN20@deflate

; 894  :         ERR_RETURN(strm, Z_BUF_ERROR);

	mov	eax, 4
	imul	ecx, eax, 7
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR _z_errmsg[ecx]
	mov	DWORD PTR [edx+24], eax
	mov	eax, -5					; fffffffbH
	jmp	$LN84@deflate
$LN20@deflate:

; 895  :     }
; 896  : 
; 897  :     /* Start a new block or continue the current one.
; 898  :      */
; 899  :     if (strm->avail_in != 0 || s->lookahead != 0 ||
; 900  :         (flush != Z_NO_FLUSH && s->status != FINISH_STATE)) {

	mov	ecx, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jne	SHORT $LN18@deflate
	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+116], 0
	jne	SHORT $LN18@deflate
	cmp	DWORD PTR _flush$[ebp], 0
	je	$LN19@deflate
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+4], 666			; 0000029aH
	je	$LN19@deflate
$LN18@deflate:

; 901  :         block_state bstate;
; 902  : 
; 903  :         bstate = s->strategy == Z_HUFFMAN_ONLY ? deflate_huff(s, flush) :
; 904  :                     (s->strategy == Z_RLE ? deflate_rle(s, flush) :
; 905  :                         (*(configuration_table[s->level].func))(s, flush));

	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+136], 2
	jne	SHORT $LN110@deflate
	mov	edx, DWORD PTR _flush$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_deflate_huff
	add	esp, 8
	mov	DWORD PTR tv693[ebp], eax
	jmp	SHORT $LN111@deflate
$LN110@deflate:
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+136], 3
	jne	SHORT $LN108@deflate
	mov	edx, DWORD PTR _flush$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_deflate_rle
	add	esp, 8
	mov	DWORD PTR tv692[ebp], eax
	jmp	SHORT $LN109@deflate
$LN108@deflate:
	mov	ecx, DWORD PTR _flush$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	imul	ecx, DWORD PTR [eax+132], 12
	mov	edx, DWORD PTR _configuration_table[ecx+8]
	call	edx
	add	esp, 8
	mov	DWORD PTR tv692[ebp], eax
$LN109@deflate:
	mov	eax, DWORD PTR tv692[ebp]
	mov	DWORD PTR tv693[ebp], eax
$LN111@deflate:
	mov	ecx, DWORD PTR tv693[ebp]
	mov	DWORD PTR _bstate$4[ebp], ecx

; 906  : 
; 907  :         if (bstate == finish_started || bstate == finish_done) {

	cmp	DWORD PTR _bstate$4[ebp], 2
	je	SHORT $LN16@deflate
	cmp	DWORD PTR _bstate$4[ebp], 3
	jne	SHORT $LN17@deflate
$LN16@deflate:

; 908  :             s->status = FINISH_STATE;

	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+4], 666			; 0000029aH
$LN17@deflate:

; 909  :         }
; 910  :         if (bstate == need_more || bstate == finish_started) {

	cmp	DWORD PTR _bstate$4[ebp], 0
	je	SHORT $LN14@deflate
	cmp	DWORD PTR _bstate$4[ebp], 2
	jne	SHORT $LN15@deflate
$LN14@deflate:

; 911  :             if (strm->avail_out == 0) {

	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN13@deflate

; 912  :                 s->last_flush = -1; /* avoid BUF_ERROR next call, see above */

	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+40], -1
$LN13@deflate:

; 913  :             }
; 914  :             return Z_OK;

	xor	eax, eax
	jmp	$LN84@deflate
$LN15@deflate:

; 915  :             /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
; 916  :              * of deflate should use the same flush parameter to make sure
; 917  :              * that the flush is complete. So we don't have to output an
; 918  :              * empty block here, this will be done at next call. This also
; 919  :              * ensures that for a very small output buffer, we emit at most
; 920  :              * one empty block.
; 921  :              */
; 922  :         }
; 923  :         if (bstate == block_done) {

	cmp	DWORD PTR _bstate$4[ebp], 1
	jne	$LN19@deflate

; 924  :             if (flush == Z_PARTIAL_FLUSH) {

	cmp	DWORD PTR _flush$[ebp], 1
	jne	SHORT $LN11@deflate

; 925  :                 _tr_align(s);

	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	__tr_align
	add	esp, 4
	jmp	SHORT $LN10@deflate
$LN11@deflate:

; 926  :             } else if (flush != Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */

	cmp	DWORD PTR _flush$[ebp], 5
	je	SHORT $LN10@deflate

; 927  :                 _tr_stored_block(s, (char*)0, 0L, 0);

	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	__tr_stored_block
	add	esp, 16					; 00000010H

; 928  :                 /* For a full flush, this empty block will be recognized
; 929  :                  * as a special marker by inflate_sync().
; 930  :                  */
; 931  :                 if (flush == Z_FULL_FLUSH) {

	cmp	DWORD PTR _flush$[ebp], 3
	jne	SHORT $LN10@deflate

; 932  :                     CLEAR_HASH(s);             /* forget history */

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	xor	eax, eax
	mov	WORD PTR [ecx+edx*2-2], ax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	lea	eax, DWORD PTR [edx+edx-2]
	push	eax
	push	0
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 933  :                     if (s->lookahead == 0) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+116], 0
	jne	SHORT $LN10@deflate

; 934  :                         s->strstart = 0;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+108], 0

; 935  :                         s->block_start = 0L;

	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+92], 0

; 936  :                         s->insert = 0;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+5812], 0
$LN10@deflate:

; 937  :                     }
; 938  :                 }
; 939  :             }
; 940  :             flush_pending(strm);

	mov	ecx, DWORD PTR _strm$[ebp]
	push	ecx
	call	_flush_pending
	add	esp, 4

; 941  :             if (strm->avail_out == 0) {

	mov	edx, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [edx+16], 0
	jne	SHORT $LN19@deflate

; 942  :               s->last_flush = -1; /* avoid BUF_ERROR at next call, see above */

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+40], -1

; 943  :               return Z_OK;

	xor	eax, eax
	jmp	$LN84@deflate
$LN19@deflate:

; 944  :             }
; 945  :         }
; 946  :     }
; 947  :     Assert(strm->avail_out > 0, "bug2");
; 948  : 
; 949  :     if (flush != Z_FINISH) return Z_OK;

	cmp	DWORD PTR _flush$[ebp], 4
	je	SHORT $LN5@deflate
	xor	eax, eax
	jmp	$LN84@deflate
$LN5@deflate:

; 950  :     if (s->wrap <= 0) return Z_STREAM_END;

	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+24], 0
	jg	SHORT $LN4@deflate
	mov	eax, 1
	jmp	$LN84@deflate
$LN4@deflate:

; 951  : 
; 952  :     /* Write the trailer */
; 953  : #ifdef GZIP
; 954  :     if (s->wrap == 2) {

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+24], 2
	jne	$LN3@deflate

; 955  :         put_byte(s, (Byte)(strm->adler & 0xff));

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 956  :         put_byte(s, (Byte)((strm->adler >> 8) & 0xff));

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	shr	ecx, 8
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 957  :         put_byte(s, (Byte)((strm->adler >> 16) & 0xff));

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	shr	ecx, 16					; 00000010H
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 958  :         put_byte(s, (Byte)((strm->adler >> 24) & 0xff));

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	shr	ecx, 24					; 00000018H
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 959  :         put_byte(s, (Byte)(strm->total_in & 0xff));

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 960  :         put_byte(s, (Byte)((strm->total_in >> 8) & 0xff));

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 8
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 961  :         put_byte(s, (Byte)((strm->total_in >> 16) & 0xff));

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 16					; 00000010H
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 962  :         put_byte(s, (Byte)((strm->total_in >> 24) & 0xff));

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 24					; 00000018H
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 963  :     }
; 964  :     else

	jmp	SHORT $LN2@deflate
$LN3@deflate:

; 965  : #endif
; 966  :     {
; 967  :         putShortMSB(s, (uInt)(strm->adler >> 16));

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	shr	ecx, 16					; 00000010H
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_putShortMSB
	add	esp, 8

; 968  :         putShortMSB(s, (uInt)(strm->adler & 0xffff));

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	and	ecx, 65535				; 0000ffffH
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_putShortMSB
	add	esp, 8
$LN2@deflate:

; 969  :     }
; 970  :     flush_pending(strm);

	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_flush_pending
	add	esp, 4

; 971  :     /* If avail_out is zero, the application will call deflate again
; 972  :      * to flush the rest.
; 973  :      */
; 974  :     if (s->wrap > 0) s->wrap = -s->wrap; /* write the trailer only once! */

	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+24], 0
	jle	SHORT $LN1@deflate
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+24]
	neg	eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+24], eax
$LN1@deflate:

; 975  :     return s->pending != 0 ? Z_OK : Z_STREAM_END;

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+20], 0
	je	SHORT $LN112@deflate
	mov	DWORD PTR tv839[ebp], 0
	jmp	SHORT $LN113@deflate
$LN112@deflate:
	mov	DWORD PTR tv839[ebp], 1
$LN113@deflate:
	mov	eax, DWORD PTR tv839[ebp]
$LN84@deflate:

; 976  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
_deflate@8 ENDP
_TEXT	ENDS
END
