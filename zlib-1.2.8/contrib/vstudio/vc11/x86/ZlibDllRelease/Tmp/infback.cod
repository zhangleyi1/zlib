; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.31101.0 

	TITLE	D:\vs_project\zlib-1.2.8\infback.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BD@PJCBIDD@invalid?5block?5type?$AA@	; `string'
PUBLIC	??_C@_0BN@LGAADGOK@invalid?5stored?5block?5lengths?$AA@ ; `string'
PUBLIC	??_C@_0CE@GMIGFPBB@too?5many?5length?5or?5distance?5symb@ ; `string'
PUBLIC	??_C@_0BJ@HDEPPGOH@invalid?5code?5lengths?5set?$AA@ ; `string'
PUBLIC	??_C@_0BK@BMMPFBBH@invalid?5bit?5length?5repeat?$AA@ ; `string'
PUBLIC	??_C@_0CF@DGDMADCD@invalid?5code?5?9?9?5missing?5end?9of?9b@ ; `string'
PUBLIC	??_C@_0BM@IIMGAINC@invalid?5literal?1lengths?5set?$AA@ ; `string'
PUBLIC	??_C@_0BG@GMDFCBGP@invalid?5distances?5set?$AA@	; `string'
PUBLIC	??_C@_0BM@FFFLPBBC@invalid?5literal?1length?5code?$AA@ ; `string'
PUBLIC	??_C@_0BG@LBKINIKP@invalid?5distance?5code?$AA@	; `string'
PUBLIC	??_C@_0BO@ECPMAOGG@invalid?5distance?5too?5far?5back?$AA@ ; `string'
EXTRN	_inflate_fast:PROC
;	COMDAT ??_C@_0BO@ECPMAOGG@invalid?5distance?5too?5far?5back?$AA@
CONST	SEGMENT
??_C@_0BO@ECPMAOGG@invalid?5distance?5too?5far?5back?$AA@ DB 'invalid dis'
	DB	'tance too far back', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@LBKINIKP@invalid?5distance?5code?$AA@
CONST	SEGMENT
??_C@_0BG@LBKINIKP@invalid?5distance?5code?$AA@ DB 'invalid distance code'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@FFFLPBBC@invalid?5literal?1length?5code?$AA@
CONST	SEGMENT
??_C@_0BM@FFFLPBBC@invalid?5literal?1length?5code?$AA@ DB 'invalid litera'
	DB	'l/length code', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@GMDFCBGP@invalid?5distances?5set?$AA@
CONST	SEGMENT
??_C@_0BG@GMDFCBGP@invalid?5distances?5set?$AA@ DB 'invalid distances set'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@IIMGAINC@invalid?5literal?1lengths?5set?$AA@
CONST	SEGMENT
??_C@_0BM@IIMGAINC@invalid?5literal?1lengths?5set?$AA@ DB 'invalid litera'
	DB	'l/lengths set', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@DGDMADCD@invalid?5code?5?9?9?5missing?5end?9of?9b@
CONST	SEGMENT
??_C@_0CF@DGDMADCD@invalid?5code?5?9?9?5missing?5end?9of?9b@ DB 'invalid '
	DB	'code -- missing end-of-block', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@BMMPFBBH@invalid?5bit?5length?5repeat?$AA@
CONST	SEGMENT
??_C@_0BK@BMMPFBBH@invalid?5bit?5length?5repeat?$AA@ DB 'invalid bit leng'
	DB	'th repeat', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@HDEPPGOH@invalid?5code?5lengths?5set?$AA@
CONST	SEGMENT
??_C@_0BJ@HDEPPGOH@invalid?5code?5lengths?5set?$AA@ DB 'invalid code leng'
	DB	'ths set', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@GMIGFPBB@too?5many?5length?5or?5distance?5symb@
CONST	SEGMENT
??_C@_0CE@GMIGFPBB@too?5many?5length?5or?5distance?5symb@ DB 'too many le'
	DB	'ngth or distance symbols', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@LGAADGOK@invalid?5stored?5block?5lengths?$AA@
CONST	SEGMENT
??_C@_0BN@LGAADGOK@invalid?5stored?5block?5lengths?$AA@ DB 'invalid store'
	DB	'd block lengths', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@PJCBIDD@invalid?5block?5type?$AA@
CONST	SEGMENT
??_C@_0BD@PJCBIDD@invalid?5block?5type?$AA@ DB 'invalid block type', 00H ; `string'
	ORG $+2
?lenfix@?1??fixedtables@@9@9 DB 060H			; `fixedtables'::`2'::lenfix
	DB	07H
	DW	00H
	DB	00H
	DB	08H
	DW	050H
	DB	00H
	DB	08H
	DW	010H
	DB	014H
	DB	08H
	DW	073H
	DB	012H
	DB	07H
	DW	01fH
	DB	00H
	DB	08H
	DW	070H
	DB	00H
	DB	08H
	DW	030H
	DB	00H
	DB	09H
	DW	0c0H
	DB	010H
	DB	07H
	DW	0aH
	DB	00H
	DB	08H
	DW	060H
	DB	00H
	DB	08H
	DW	020H
	DB	00H
	DB	09H
	DW	0a0H
	DB	00H
	DB	08H
	DW	00H
	DB	00H
	DB	08H
	DW	080H
	DB	00H
	DB	08H
	DW	040H
	DB	00H
	DB	09H
	DW	0e0H
	DB	010H
	DB	07H
	DW	06H
	DB	00H
	DB	08H
	DW	058H
	DB	00H
	DB	08H
	DW	018H
	DB	00H
	DB	09H
	DW	090H
	DB	013H
	DB	07H
	DW	03bH
	DB	00H
	DB	08H
	DW	078H
	DB	00H
	DB	08H
	DW	038H
	DB	00H
	DB	09H
	DW	0d0H
	DB	011H
	DB	07H
	DW	011H
	DB	00H
	DB	08H
	DW	068H
	DB	00H
	DB	08H
	DW	028H
	DB	00H
	DB	09H
	DW	0b0H
	DB	00H
	DB	08H
	DW	08H
	DB	00H
	DB	08H
	DW	088H
	DB	00H
	DB	08H
	DW	048H
	DB	00H
	DB	09H
	DW	0f0H
	DB	010H
	DB	07H
	DW	04H
	DB	00H
	DB	08H
	DW	054H
	DB	00H
	DB	08H
	DW	014H
	DB	015H
	DB	08H
	DW	0e3H
	DB	013H
	DB	07H
	DW	02bH
	DB	00H
	DB	08H
	DW	074H
	DB	00H
	DB	08H
	DW	034H
	DB	00H
	DB	09H
	DW	0c8H
	DB	011H
	DB	07H
	DW	0dH
	DB	00H
	DB	08H
	DW	064H
	DB	00H
	DB	08H
	DW	024H
	DB	00H
	DB	09H
	DW	0a8H
	DB	00H
	DB	08H
	DW	04H
	DB	00H
	DB	08H
	DW	084H
	DB	00H
	DB	08H
	DW	044H
	DB	00H
	DB	09H
	DW	0e8H
	DB	010H
	DB	07H
	DW	08H
	DB	00H
	DB	08H
	DW	05cH
	DB	00H
	DB	08H
	DW	01cH
	DB	00H
	DB	09H
	DW	098H
	DB	014H
	DB	07H
	DW	053H
	DB	00H
	DB	08H
	DW	07cH
	DB	00H
	DB	08H
	DW	03cH
	DB	00H
	DB	09H
	DW	0d8H
	DB	012H
	DB	07H
	DW	017H
	DB	00H
	DB	08H
	DW	06cH
	DB	00H
	DB	08H
	DW	02cH
	DB	00H
	DB	09H
	DW	0b8H
	DB	00H
	DB	08H
	DW	0cH
	DB	00H
	DB	08H
	DW	08cH
	DB	00H
	DB	08H
	DW	04cH
	DB	00H
	DB	09H
	DW	0f8H
	DB	010H
	DB	07H
	DW	03H
	DB	00H
	DB	08H
	DW	052H
	DB	00H
	DB	08H
	DW	012H
	DB	015H
	DB	08H
	DW	0a3H
	DB	013H
	DB	07H
	DW	023H
	DB	00H
	DB	08H
	DW	072H
	DB	00H
	DB	08H
	DW	032H
	DB	00H
	DB	09H
	DW	0c4H
	DB	011H
	DB	07H
	DW	0bH
	DB	00H
	DB	08H
	DW	062H
	DB	00H
	DB	08H
	DW	022H
	DB	00H
	DB	09H
	DW	0a4H
	DB	00H
	DB	08H
	DW	02H
	DB	00H
	DB	08H
	DW	082H
	DB	00H
	DB	08H
	DW	042H
	DB	00H
	DB	09H
	DW	0e4H
	DB	010H
	DB	07H
	DW	07H
	DB	00H
	DB	08H
	DW	05aH
	DB	00H
	DB	08H
	DW	01aH
	DB	00H
	DB	09H
	DW	094H
	DB	014H
	DB	07H
	DW	043H
	DB	00H
	DB	08H
	DW	07aH
	DB	00H
	DB	08H
	DW	03aH
	DB	00H
	DB	09H
	DW	0d4H
	DB	012H
	DB	07H
	DW	013H
	DB	00H
	DB	08H
	DW	06aH
	DB	00H
	DB	08H
	DW	02aH
	DB	00H
	DB	09H
	DW	0b4H
	DB	00H
	DB	08H
	DW	0aH
	DB	00H
	DB	08H
	DW	08aH
	DB	00H
	DB	08H
	DW	04aH
	DB	00H
	DB	09H
	DW	0f4H
	DB	010H
	DB	07H
	DW	05H
	DB	00H
	DB	08H
	DW	056H
	DB	00H
	DB	08H
	DW	016H
	DB	040H
	DB	08H
	DW	00H
	DB	013H
	DB	07H
	DW	033H
	DB	00H
	DB	08H
	DW	076H
	DB	00H
	DB	08H
	DW	036H
	DB	00H
	DB	09H
	DW	0ccH
	DB	011H
	DB	07H
	DW	0fH
	DB	00H
	DB	08H
	DW	066H
	DB	00H
	DB	08H
	DW	026H
	DB	00H
	DB	09H
	DW	0acH
	DB	00H
	DB	08H
	DW	06H
	DB	00H
	DB	08H
	DW	086H
	DB	00H
	DB	08H
	DW	046H
	DB	00H
	DB	09H
	DW	0ecH
	DB	010H
	DB	07H
	DW	09H
	DB	00H
	DB	08H
	DW	05eH
	DB	00H
	DB	08H
	DW	01eH
	DB	00H
	DB	09H
	DW	09cH
	DB	014H
	DB	07H
	DW	063H
	DB	00H
	DB	08H
	DW	07eH
	DB	00H
	DB	08H
	DW	03eH
	DB	00H
	DB	09H
	DW	0dcH
	DB	012H
	DB	07H
	DW	01bH
	DB	00H
	DB	08H
	DW	06eH
	DB	00H
	DB	08H
	DW	02eH
	DB	00H
	DB	09H
	DW	0bcH
	DB	00H
	DB	08H
	DW	0eH
	DB	00H
	DB	08H
	DW	08eH
	DB	00H
	DB	08H
	DW	04eH
	DB	00H
	DB	09H
	DW	0fcH
	DB	060H
	DB	07H
	DW	00H
	DB	00H
	DB	08H
	DW	051H
	DB	00H
	DB	08H
	DW	011H
	DB	015H
	DB	08H
	DW	083H
	DB	012H
	DB	07H
	DW	01fH
	DB	00H
	DB	08H
	DW	071H
	DB	00H
	DB	08H
	DW	031H
	DB	00H
	DB	09H
	DW	0c2H
	DB	010H
	DB	07H
	DW	0aH
	DB	00H
	DB	08H
	DW	061H
	DB	00H
	DB	08H
	DW	021H
	DB	00H
	DB	09H
	DW	0a2H
	DB	00H
	DB	08H
	DW	01H
	DB	00H
	DB	08H
	DW	081H
	DB	00H
	DB	08H
	DW	041H
	DB	00H
	DB	09H
	DW	0e2H
	DB	010H
	DB	07H
	DW	06H
	DB	00H
	DB	08H
	DW	059H
	DB	00H
	DB	08H
	DW	019H
	DB	00H
	DB	09H
	DW	092H
	DB	013H
	DB	07H
	DW	03bH
	DB	00H
	DB	08H
	DW	079H
	DB	00H
	DB	08H
	DW	039H
	DB	00H
	DB	09H
	DW	0d2H
	DB	011H
	DB	07H
	DW	011H
	DB	00H
	DB	08H
	DW	069H
	DB	00H
	DB	08H
	DW	029H
	DB	00H
	DB	09H
	DW	0b2H
	DB	00H
	DB	08H
	DW	09H
	DB	00H
	DB	08H
	DW	089H
	DB	00H
	DB	08H
	DW	049H
	DB	00H
	DB	09H
	DW	0f2H
	DB	010H
	DB	07H
	DW	04H
	DB	00H
	DB	08H
	DW	055H
	DB	00H
	DB	08H
	DW	015H
	DB	010H
	DB	08H
	DW	0102H
	DB	013H
	DB	07H
	DW	02bH
	DB	00H
	DB	08H
	DW	075H
	DB	00H
	DB	08H
	DW	035H
	DB	00H
	DB	09H
	DW	0caH
	DB	011H
	DB	07H
	DW	0dH
	DB	00H
	DB	08H
	DW	065H
	DB	00H
	DB	08H
	DW	025H
	DB	00H
	DB	09H
	DW	0aaH
	DB	00H
	DB	08H
	DW	05H
	DB	00H
	DB	08H
	DW	085H
	DB	00H
	DB	08H
	DW	045H
	DB	00H
	DB	09H
	DW	0eaH
	DB	010H
	DB	07H
	DW	08H
	DB	00H
	DB	08H
	DW	05dH
	DB	00H
	DB	08H
	DW	01dH
	DB	00H
	DB	09H
	DW	09aH
	DB	014H
	DB	07H
	DW	053H
	DB	00H
	DB	08H
	DW	07dH
	DB	00H
	DB	08H
	DW	03dH
	DB	00H
	DB	09H
	DW	0daH
	DB	012H
	DB	07H
	DW	017H
	DB	00H
	DB	08H
	DW	06dH
	DB	00H
	DB	08H
	DW	02dH
	DB	00H
	DB	09H
	DW	0baH
	DB	00H
	DB	08H
	DW	0dH
	DB	00H
	DB	08H
	DW	08dH
	DB	00H
	DB	08H
	DW	04dH
	DB	00H
	DB	09H
	DW	0faH
	DB	010H
	DB	07H
	DW	03H
	DB	00H
	DB	08H
	DW	053H
	DB	00H
	DB	08H
	DW	013H
	DB	015H
	DB	08H
	DW	0c3H
	DB	013H
	DB	07H
	DW	023H
	DB	00H
	DB	08H
	DW	073H
	DB	00H
	DB	08H
	DW	033H
	DB	00H
	DB	09H
	DW	0c6H
	DB	011H
	DB	07H
	DW	0bH
	DB	00H
	DB	08H
	DW	063H
	DB	00H
	DB	08H
	DW	023H
	DB	00H
	DB	09H
	DW	0a6H
	DB	00H
	DB	08H
	DW	03H
	DB	00H
	DB	08H
	DW	083H
	DB	00H
	DB	08H
	DW	043H
	DB	00H
	DB	09H
	DW	0e6H
	DB	010H
	DB	07H
	DW	07H
	DB	00H
	DB	08H
	DW	05bH
	DB	00H
	DB	08H
	DW	01bH
	DB	00H
	DB	09H
	DW	096H
	DB	014H
	DB	07H
	DW	043H
	DB	00H
	DB	08H
	DW	07bH
	DB	00H
	DB	08H
	DW	03bH
	DB	00H
	DB	09H
	DW	0d6H
	DB	012H
	DB	07H
	DW	013H
	DB	00H
	DB	08H
	DW	06bH
	DB	00H
	DB	08H
	DW	02bH
	DB	00H
	DB	09H
	DW	0b6H
	DB	00H
	DB	08H
	DW	0bH
	DB	00H
	DB	08H
	DW	08bH
	DB	00H
	DB	08H
	DW	04bH
	DB	00H
	DB	09H
	DW	0f6H
	DB	010H
	DB	07H
	DW	05H
	DB	00H
	DB	08H
	DW	057H
	DB	00H
	DB	08H
	DW	017H
	DB	040H
	DB	08H
	DW	00H
	DB	013H
	DB	07H
	DW	033H
	DB	00H
	DB	08H
	DW	077H
	DB	00H
	DB	08H
	DW	037H
	DB	00H
	DB	09H
	DW	0ceH
	DB	011H
	DB	07H
	DW	0fH
	DB	00H
	DB	08H
	DW	067H
	DB	00H
	DB	08H
	DW	027H
	DB	00H
	DB	09H
	DW	0aeH
	DB	00H
	DB	08H
	DW	07H
	DB	00H
	DB	08H
	DW	087H
	DB	00H
	DB	08H
	DW	047H
	DB	00H
	DB	09H
	DW	0eeH
	DB	010H
	DB	07H
	DW	09H
	DB	00H
	DB	08H
	DW	05fH
	DB	00H
	DB	08H
	DW	01fH
	DB	00H
	DB	09H
	DW	09eH
	DB	014H
	DB	07H
	DW	063H
	DB	00H
	DB	08H
	DW	07fH
	DB	00H
	DB	08H
	DW	03fH
	DB	00H
	DB	09H
	DW	0deH
	DB	012H
	DB	07H
	DW	01bH
	DB	00H
	DB	08H
	DW	06fH
	DB	00H
	DB	08H
	DW	02fH
	DB	00H
	DB	09H
	DW	0beH
	DB	00H
	DB	08H
	DW	0fH
	DB	00H
	DB	08H
	DW	08fH
	DB	00H
	DB	08H
	DW	04fH
	DB	00H
	DB	09H
	DW	0feH
	DB	060H
	DB	07H
	DW	00H
	DB	00H
	DB	08H
	DW	050H
	DB	00H
	DB	08H
	DW	010H
	DB	014H
	DB	08H
	DW	073H
	DB	012H
	DB	07H
	DW	01fH
	DB	00H
	DB	08H
	DW	070H
	DB	00H
	DB	08H
	DW	030H
	DB	00H
	DB	09H
	DW	0c1H
	DB	010H
	DB	07H
	DW	0aH
	DB	00H
	DB	08H
	DW	060H
	DB	00H
	DB	08H
	DW	020H
	DB	00H
	DB	09H
	DW	0a1H
	DB	00H
	DB	08H
	DW	00H
	DB	00H
	DB	08H
	DW	080H
	DB	00H
	DB	08H
	DW	040H
	DB	00H
	DB	09H
	DW	0e1H
	DB	010H
	DB	07H
	DW	06H
	DB	00H
	DB	08H
	DW	058H
	DB	00H
	DB	08H
	DW	018H
	DB	00H
	DB	09H
	DW	091H
	DB	013H
	DB	07H
	DW	03bH
	DB	00H
	DB	08H
	DW	078H
	DB	00H
	DB	08H
	DW	038H
	DB	00H
	DB	09H
	DW	0d1H
	DB	011H
	DB	07H
	DW	011H
	DB	00H
	DB	08H
	DW	068H
	DB	00H
	DB	08H
	DW	028H
	DB	00H
	DB	09H
	DW	0b1H
	DB	00H
	DB	08H
	DW	08H
	DB	00H
	DB	08H
	DW	088H
	DB	00H
	DB	08H
	DW	048H
	DB	00H
	DB	09H
	DW	0f1H
	DB	010H
	DB	07H
	DW	04H
	DB	00H
	DB	08H
	DW	054H
	DB	00H
	DB	08H
	DW	014H
	DB	015H
	DB	08H
	DW	0e3H
	DB	013H
	DB	07H
	DW	02bH
	DB	00H
	DB	08H
	DW	074H
	DB	00H
	DB	08H
	DW	034H
	DB	00H
	DB	09H
	DW	0c9H
	DB	011H
	DB	07H
	DW	0dH
	DB	00H
	DB	08H
	DW	064H
	DB	00H
	DB	08H
	DW	024H
	DB	00H
	DB	09H
	DW	0a9H
	DB	00H
	DB	08H
	DW	04H
	DB	00H
	DB	08H
	DW	084H
	DB	00H
	DB	08H
	DW	044H
	DB	00H
	DB	09H
	DW	0e9H
	DB	010H
	DB	07H
	DW	08H
	DB	00H
	DB	08H
	DW	05cH
	DB	00H
	DB	08H
	DW	01cH
	DB	00H
	DB	09H
	DW	099H
	DB	014H
	DB	07H
	DW	053H
	DB	00H
	DB	08H
	DW	07cH
	DB	00H
	DB	08H
	DW	03cH
	DB	00H
	DB	09H
	DW	0d9H
	DB	012H
	DB	07H
	DW	017H
	DB	00H
	DB	08H
	DW	06cH
	DB	00H
	DB	08H
	DW	02cH
	DB	00H
	DB	09H
	DW	0b9H
	DB	00H
	DB	08H
	DW	0cH
	DB	00H
	DB	08H
	DW	08cH
	DB	00H
	DB	08H
	DW	04cH
	DB	00H
	DB	09H
	DW	0f9H
	DB	010H
	DB	07H
	DW	03H
	DB	00H
	DB	08H
	DW	052H
	DB	00H
	DB	08H
	DW	012H
	DB	015H
	DB	08H
	DW	0a3H
	DB	013H
	DB	07H
	DW	023H
	DB	00H
	DB	08H
	DW	072H
	DB	00H
	DB	08H
	DW	032H
	DB	00H
	DB	09H
	DW	0c5H
	DB	011H
	DB	07H
	DW	0bH
	DB	00H
	DB	08H
	DW	062H
	DB	00H
	DB	08H
	DW	022H
	DB	00H
	DB	09H
	DW	0a5H
	DB	00H
	DB	08H
	DW	02H
	DB	00H
	DB	08H
	DW	082H
	DB	00H
	DB	08H
	DW	042H
	DB	00H
	DB	09H
	DW	0e5H
	DB	010H
	DB	07H
	DW	07H
	DB	00H
	DB	08H
	DW	05aH
	DB	00H
	DB	08H
	DW	01aH
	DB	00H
	DB	09H
	DW	095H
	DB	014H
	DB	07H
	DW	043H
	DB	00H
	DB	08H
	DW	07aH
	DB	00H
	DB	08H
	DW	03aH
	DB	00H
	DB	09H
	DW	0d5H
	DB	012H
	DB	07H
	DW	013H
	DB	00H
	DB	08H
	DW	06aH
	DB	00H
	DB	08H
	DW	02aH
	DB	00H
	DB	09H
	DW	0b5H
	DB	00H
	DB	08H
	DW	0aH
	DB	00H
	DB	08H
	DW	08aH
	DB	00H
	DB	08H
	DW	04aH
	DB	00H
	DB	09H
	DW	0f5H
	DB	010H
	DB	07H
	DW	05H
	DB	00H
	DB	08H
	DW	056H
	DB	00H
	DB	08H
	DW	016H
	DB	040H
	DB	08H
	DW	00H
	DB	013H
	DB	07H
	DW	033H
	DB	00H
	DB	08H
	DW	076H
	DB	00H
	DB	08H
	DW	036H
	DB	00H
	DB	09H
	DW	0cdH
	DB	011H
	DB	07H
	DW	0fH
	DB	00H
	DB	08H
	DW	066H
	DB	00H
	DB	08H
	DW	026H
	DB	00H
	DB	09H
	DW	0adH
	DB	00H
	DB	08H
	DW	06H
	DB	00H
	DB	08H
	DW	086H
	DB	00H
	DB	08H
	DW	046H
	DB	00H
	DB	09H
	DW	0edH
	DB	010H
	DB	07H
	DW	09H
	DB	00H
	DB	08H
	DW	05eH
	DB	00H
	DB	08H
	DW	01eH
	DB	00H
	DB	09H
	DW	09dH
	DB	014H
	DB	07H
	DW	063H
	DB	00H
	DB	08H
	DW	07eH
	DB	00H
	DB	08H
	DW	03eH
	DB	00H
	DB	09H
	DW	0ddH
	DB	012H
	DB	07H
	DW	01bH
	DB	00H
	DB	08H
	DW	06eH
	DB	00H
	DB	08H
	DW	02eH
	DB	00H
	DB	09H
	DW	0bdH
	DB	00H
	DB	08H
	DW	0eH
	DB	00H
	DB	08H
	DW	08eH
	DB	00H
	DB	08H
	DW	04eH
	DB	00H
	DB	09H
	DW	0fdH
	DB	060H
	DB	07H
	DW	00H
	DB	00H
	DB	08H
	DW	051H
	DB	00H
	DB	08H
	DW	011H
	DB	015H
	DB	08H
	DW	083H
	DB	012H
	DB	07H
	DW	01fH
	DB	00H
	DB	08H
	DW	071H
	DB	00H
	DB	08H
	DW	031H
	DB	00H
	DB	09H
	DW	0c3H
	DB	010H
	DB	07H
	DW	0aH
	DB	00H
	DB	08H
	DW	061H
	DB	00H
	DB	08H
	DW	021H
	DB	00H
	DB	09H
	DW	0a3H
	DB	00H
	DB	08H
	DW	01H
	DB	00H
	DB	08H
	DW	081H
	DB	00H
	DB	08H
	DW	041H
	DB	00H
	DB	09H
	DW	0e3H
	DB	010H
	DB	07H
	DW	06H
	DB	00H
	DB	08H
	DW	059H
	DB	00H
	DB	08H
	DW	019H
	DB	00H
	DB	09H
	DW	093H
	DB	013H
	DB	07H
	DW	03bH
	DB	00H
	DB	08H
	DW	079H
	DB	00H
	DB	08H
	DW	039H
	DB	00H
	DB	09H
	DW	0d3H
	DB	011H
	DB	07H
	DW	011H
	DB	00H
	DB	08H
	DW	069H
	DB	00H
	DB	08H
	DW	029H
	DB	00H
	DB	09H
	DW	0b3H
	DB	00H
	DB	08H
	DW	09H
	DB	00H
	DB	08H
	DW	089H
	DB	00H
	DB	08H
	DW	049H
	DB	00H
	DB	09H
	DW	0f3H
	DB	010H
	DB	07H
	DW	04H
	DB	00H
	DB	08H
	DW	055H
	DB	00H
	DB	08H
	DW	015H
	DB	010H
	DB	08H
	DW	0102H
	DB	013H
	DB	07H
	DW	02bH
	DB	00H
	DB	08H
	DW	075H
	DB	00H
	DB	08H
	DW	035H
	DB	00H
	DB	09H
	DW	0cbH
	DB	011H
	DB	07H
	DW	0dH
	DB	00H
	DB	08H
	DW	065H
	DB	00H
	DB	08H
	DW	025H
	DB	00H
	DB	09H
	DW	0abH
	DB	00H
	DB	08H
	DW	05H
	DB	00H
	DB	08H
	DW	085H
	DB	00H
	DB	08H
	DW	045H
	DB	00H
	DB	09H
	DW	0ebH
	DB	010H
	DB	07H
	DW	08H
	DB	00H
	DB	08H
	DW	05dH
	DB	00H
	DB	08H
	DW	01dH
	DB	00H
	DB	09H
	DW	09bH
	DB	014H
	DB	07H
	DW	053H
	DB	00H
	DB	08H
	DW	07dH
	DB	00H
	DB	08H
	DW	03dH
	DB	00H
	DB	09H
	DW	0dbH
	DB	012H
	DB	07H
	DW	017H
	DB	00H
	DB	08H
	DW	06dH
	DB	00H
	DB	08H
	DW	02dH
	DB	00H
	DB	09H
	DW	0bbH
	DB	00H
	DB	08H
	DW	0dH
	DB	00H
	DB	08H
	DW	08dH
	DB	00H
	DB	08H
	DW	04dH
	DB	00H
	DB	09H
	DW	0fbH
	DB	010H
	DB	07H
	DW	03H
	DB	00H
	DB	08H
	DW	053H
	DB	00H
	DB	08H
	DW	013H
	DB	015H
	DB	08H
	DW	0c3H
	DB	013H
	DB	07H
	DW	023H
	DB	00H
	DB	08H
	DW	073H
	DB	00H
	DB	08H
	DW	033H
	DB	00H
	DB	09H
	DW	0c7H
	DB	011H
	DB	07H
	DW	0bH
	DB	00H
	DB	08H
	DW	063H
	DB	00H
	DB	08H
	DW	023H
	DB	00H
	DB	09H
	DW	0a7H
	DB	00H
	DB	08H
	DW	03H
	DB	00H
	DB	08H
	DW	083H
	DB	00H
	DB	08H
	DW	043H
	DB	00H
	DB	09H
	DW	0e7H
	DB	010H
	DB	07H
	DW	07H
	DB	00H
	DB	08H
	DW	05bH
	DB	00H
	DB	08H
	DW	01bH
	DB	00H
	DB	09H
	DW	097H
	DB	014H
	DB	07H
	DW	043H
	DB	00H
	DB	08H
	DW	07bH
	DB	00H
	DB	08H
	DW	03bH
	DB	00H
	DB	09H
	DW	0d7H
	DB	012H
	DB	07H
	DW	013H
	DB	00H
	DB	08H
	DW	06bH
	DB	00H
	DB	08H
	DW	02bH
	DB	00H
	DB	09H
	DW	0b7H
	DB	00H
	DB	08H
	DW	0bH
	DB	00H
	DB	08H
	DW	08bH
	DB	00H
	DB	08H
	DW	04bH
	DB	00H
	DB	09H
	DW	0f7H
	DB	010H
	DB	07H
	DW	05H
	DB	00H
	DB	08H
	DW	057H
	DB	00H
	DB	08H
	DW	017H
	DB	040H
	DB	08H
	DW	00H
	DB	013H
	DB	07H
	DW	033H
	DB	00H
	DB	08H
	DW	077H
	DB	00H
	DB	08H
	DW	037H
	DB	00H
	DB	09H
	DW	0cfH
	DB	011H
	DB	07H
	DW	0fH
	DB	00H
	DB	08H
	DW	067H
	DB	00H
	DB	08H
	DW	027H
	DB	00H
	DB	09H
	DW	0afH
	DB	00H
	DB	08H
	DW	07H
	DB	00H
	DB	08H
	DW	087H
	DB	00H
	DB	08H
	DW	047H
	DB	00H
	DB	09H
	DW	0efH
	DB	010H
	DB	07H
	DW	09H
	DB	00H
	DB	08H
	DW	05fH
	DB	00H
	DB	08H
	DW	01fH
	DB	00H
	DB	09H
	DW	09fH
	DB	014H
	DB	07H
	DW	063H
	DB	00H
	DB	08H
	DW	07fH
	DB	00H
	DB	08H
	DW	03fH
	DB	00H
	DB	09H
	DW	0dfH
	DB	012H
	DB	07H
	DW	01bH
	DB	00H
	DB	08H
	DW	06fH
	DB	00H
	DB	08H
	DW	02fH
	DB	00H
	DB	09H
	DW	0bfH
	DB	00H
	DB	08H
	DW	0fH
	DB	00H
	DB	08H
	DW	08fH
	DB	00H
	DB	08H
	DW	04fH
	DB	00H
	DB	09H
	DW	0ffH
?order@?1??inflateBack@@9@9 DW 010H			; `inflateBack'::`2'::order
	DW	011H
	DW	012H
	DW	00H
	DW	08H
	DW	07H
	DW	09H
	DW	06H
	DW	0aH
	DW	05H
	DW	0bH
	DW	04H
	DW	0cH
	DW	03H
	DW	0dH
	DW	02H
	DW	0eH
	DW	01H
	DW	0fH
	ORG $+2
?distfix@?1??fixedtables@@9@9 DB 010H			; `fixedtables'::`2'::distfix
	DB	05H
	DW	01H
	DB	017H
	DB	05H
	DW	0101H
	DB	013H
	DB	05H
	DW	011H
	DB	01bH
	DB	05H
	DW	01001H
	DB	011H
	DB	05H
	DW	05H
	DB	019H
	DB	05H
	DW	0401H
	DB	015H
	DB	05H
	DW	041H
	DB	01dH
	DB	05H
	DW	04001H
	DB	010H
	DB	05H
	DW	03H
	DB	018H
	DB	05H
	DW	0201H
	DB	014H
	DB	05H
	DW	021H
	DB	01cH
	DB	05H
	DW	02001H
	DB	012H
	DB	05H
	DW	09H
	DB	01aH
	DB	05H
	DW	0801H
	DB	016H
	DB	05H
	DW	081H
	DB	040H
	DB	05H
	DW	00H
	DB	010H
	DB	05H
	DW	02H
	DB	017H
	DB	05H
	DW	0181H
	DB	013H
	DB	05H
	DW	019H
	DB	01bH
	DB	05H
	DW	01801H
	DB	011H
	DB	05H
	DW	07H
	DB	019H
	DB	05H
	DW	0601H
	DB	015H
	DB	05H
	DW	061H
	DB	01dH
	DB	05H
	DW	06001H
	DB	010H
	DB	05H
	DW	04H
	DB	018H
	DB	05H
	DW	0301H
	DB	014H
	DB	05H
	DW	031H
	DB	01cH
	DB	05H
	DW	03001H
	DB	012H
	DB	05H
	DW	0dH
	DB	01aH
	DB	05H
	DW	0c01H
	DB	016H
	DB	05H
	DW	0c1H
	DB	040H
	DB	05H
	DW	00H
PUBLIC	_inflateBackEnd@4
PUBLIC	_inflateBack@20
PUBLIC	_inflateBackInit_@20
; Function compile flags: /Ogtp
; File d:\vs_project\zlib-1.2.8\infback.c
;	COMDAT _inflateBackInit_@20
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_windowBits$ = 12					; size = 4
_window$ = 16						; size = 4
_version$ = 20						; size = 4
_stream_size$ = 24					; size = 4
_inflateBackInit_@20 PROC				; COMDAT

; 34   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 35   :     struct inflate_state FAR *state;
; 36   : 
; 37   :     if (version == Z_NULL || version[0] != ZLIB_VERSION[0] ||
; 38   :         stream_size != (int)(sizeof(z_stream)))

  00003	8b 45 14	 mov	 eax, DWORD PTR _version$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	0f 84 c0 00 00
	00		 je	 $LN6@inflateBac
  0000e	80 38 31	 cmp	 BYTE PTR [eax], 49	; 00000031H
  00011	0f 85 b7 00 00
	00		 jne	 $LN6@inflateBac
  00017	83 7d 18 38	 cmp	 DWORD PTR _stream_size$[ebp], 56 ; 00000038H
  0001b	0f 85 ad 00 00
	00		 jne	 $LN6@inflateBac

; 40   :     if (strm == Z_NULL || window == Z_NULL ||
; 41   :         windowBits < 8 || windowBits > 15)

  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	8b 75 08	 mov	 esi, DWORD PTR _strm$[ebp]
  00026	57		 push	 edi
  00027	85 f6		 test	 esi, esi
  00029	0f 84 93 00 00
	00		 je	 $LN4@inflateBac
  0002f	8b 5d 10	 mov	 ebx, DWORD PTR _window$[ebp]
  00032	85 db		 test	 ebx, ebx
  00034	0f 84 88 00 00
	00		 je	 $LN4@inflateBac
  0003a	8b 7d 0c	 mov	 edi, DWORD PTR _windowBits$[ebp]
  0003d	8d 47 f8	 lea	 eax, DWORD PTR [edi-8]
  00040	83 f8 07	 cmp	 eax, 7
  00043	77 7d		 ja	 SHORT $LN4@inflateBac

; 43   :     strm->msg = Z_NULL;                 /* in case we return an error */
; 44   :     if (strm->zalloc == (alloc_func)0) {

  00045	83 7e 20 00	 cmp	 DWORD PTR [esi+32], 0
  00049	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
  00050	75 0e		 jne	 SHORT $LN3@inflateBac

; 45   : #ifdef Z_SOLO
; 46   :         return Z_STREAM_ERROR;
; 47   : #else
; 48   :         strm->zalloc = zcalloc;

  00052	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], OFFSET _zcalloc

; 49   :         strm->opaque = (voidpf)0;

  00059	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0
$LN3@inflateBac:

; 50   : #endif
; 51   :     }
; 52   :     if (strm->zfree == (free_func)0)

  00060	83 7e 24 00	 cmp	 DWORD PTR [esi+36], 0
  00064	75 07		 jne	 SHORT $LN2@inflateBac

; 53   : #ifdef Z_SOLO
; 54   :         return Z_STREAM_ERROR;
; 55   : #else
; 56   :     strm->zfree = zcfree;

  00066	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], OFFSET _zcfree
$LN2@inflateBac:

; 57   : #endif
; 58   :     state = (struct inflate_state FAR *)ZALLOC(strm, 1,
; 59   :                                                sizeof(struct inflate_state));

  0006d	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00070	68 cc 1b 00 00	 push	 7116			; 00001bccH
  00075	6a 01		 push	 1
  00077	ff 76 28	 push	 DWORD PTR [esi+40]
  0007a	ff d0		 call	 eax
  0007c	8b d0		 mov	 edx, eax
  0007e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 60   :     if (state == Z_NULL) return Z_MEM_ERROR;

  00081	85 d2		 test	 edx, edx
  00083	75 0a		 jne	 SHORT $LN1@inflateBac
  00085	5f		 pop	 edi
  00086	5e		 pop	 esi
  00087	8d 42 fc	 lea	 eax, DWORD PTR [edx-4]
  0008a	5b		 pop	 ebx

; 70   : }

  0008b	5d		 pop	 ebp
  0008c	c2 14 00	 ret	 20			; 00000014H
$LN1@inflateBac:

; 61   :     Tracev((stderr, "inflate: allocated\n"));
; 62   :     strm->state = (struct internal_state FAR *)state;

  0008f	89 56 1c	 mov	 DWORD PTR [esi+28], edx

; 63   :     state->dmax = 32768U;
; 64   :     state->wbits = windowBits;
; 65   :     state->wsize = 1U << windowBits;

  00092	8b cf		 mov	 ecx, edi
  00094	89 7a 24	 mov	 DWORD PTR [edx+36], edi
  00097	b8 01 00 00 00	 mov	 eax, 1
  0009c	5f		 pop	 edi
  0009d	d3 e0		 shl	 eax, cl
  0009f	5e		 pop	 esi
  000a0	89 42 28	 mov	 DWORD PTR [edx+40], eax

; 66   :     state->window = window;
; 67   :     state->wnext = 0;
; 68   :     state->whave = 0;
; 69   :     return Z_OK;

  000a3	33 c0		 xor	 eax, eax
  000a5	89 5a 34	 mov	 DWORD PTR [edx+52], ebx
  000a8	c7 42 14 00 80
	00 00		 mov	 DWORD PTR [edx+20], 32768 ; 00008000H
  000af	c7 42 30 00 00
	00 00		 mov	 DWORD PTR [edx+48], 0
  000b6	c7 42 2c 00 00
	00 00		 mov	 DWORD PTR [edx+44], 0
  000bd	5b		 pop	 ebx

; 70   : }

  000be	5d		 pop	 ebp
  000bf	c2 14 00	 ret	 20			; 00000014H
$LN4@inflateBac:
  000c2	5f		 pop	 edi
  000c3	5e		 pop	 esi

; 42   :         return Z_STREAM_ERROR;

  000c4	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  000c9	5b		 pop	 ebx

; 70   : }

  000ca	5d		 pop	 ebp
  000cb	c2 14 00	 ret	 20			; 00000014H
$LN6@inflateBac:

; 39   :         return Z_VERSION_ERROR;

  000ce	b8 fa ff ff ff	 mov	 eax, -6			; fffffffaH

; 70   : }

  000d3	5d		 pop	 ebp
  000d4	c2 14 00	 ret	 20			; 00000014H
_inflateBackInit_@20 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\vs_project\zlib-1.2.8\infback.c
;	COMDAT _fixedtables
_TEXT	SEGMENT
_fixedtables PROC					; COMDAT
; _state$ = ecx

; 85   : #ifdef BUILDFIXED
; 86   :     static int virgin = 1;
; 87   :     static code *lenfix, *distfix;
; 88   :     static code fixed[544];
; 89   : 
; 90   :     /* build fixed huffman tables if first call (may not be thread safe) */
; 91   :     if (virgin) {
; 92   :         unsigned sym, bits;
; 93   :         static code *next;
; 94   : 
; 95   :         /* literal/length table */
; 96   :         sym = 0;
; 97   :         while (sym < 144) state->lens[sym++] = 8;
; 98   :         while (sym < 256) state->lens[sym++] = 9;
; 99   :         while (sym < 280) state->lens[sym++] = 7;
; 100  :         while (sym < 288) state->lens[sym++] = 8;
; 101  :         next = fixed;
; 102  :         lenfix = next;
; 103  :         bits = 9;
; 104  :         inflate_table(LENS, state->lens, 288, &(next), &(bits), state->work);
; 105  : 
; 106  :         /* distance table */
; 107  :         sym = 0;
; 108  :         while (sym < 32) state->lens[sym++] = 5;
; 109  :         distfix = next;
; 110  :         bits = 5;
; 111  :         inflate_table(DISTS, state->lens, 32, &(next), &(bits), state->work);
; 112  : 
; 113  :         /* do this just once */
; 114  :         virgin = 0;
; 115  :     }
; 116  : #else /* !BUILDFIXED */
; 117  : #   include "inffixed.h"
; 118  : #endif /* BUILDFIXED */
; 119  :     state->lencode = lenfix;

  00000	c7 41 4c 00 00
	00 00		 mov	 DWORD PTR [ecx+76], OFFSET ?lenfix@?1??fixedtables@@9@9

; 120  :     state->lenbits = 9;

  00007	c7 41 54 09 00
	00 00		 mov	 DWORD PTR [ecx+84], 9

; 121  :     state->distcode = distfix;

  0000e	c7 41 50 00 00
	00 00		 mov	 DWORD PTR [ecx+80], OFFSET ?distfix@?1??fixedtables@@9@9

; 122  :     state->distbits = 5;

  00015	c7 41 58 05 00
	00 00		 mov	 DWORD PTR [ecx+88], 5

; 123  : }

  0001c	c3		 ret	 0
_fixedtables ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\vs_project\zlib-1.2.8\infback.c
;	COMDAT _inflateBack@20
_TEXT	SEGMENT
tv1685 = -48						; size = 4
tv1684 = -48						; size = 4
tv1683 = -48						; size = 4
$T1 = -44						; size = 4
tv1677 = -44						; size = 4
tv1675 = -44						; size = 4
tv1674 = -44						; size = 4
tv1688 = -40						; size = 4
_len$1$ = -36						; size = 4
_here$1$ = -36						; size = 4
_copy$4$ = -32						; size = 4
_last$ = -32						; size = 4
_here$ = -32						; size = 4
_put$1$ = -28						; size = 4
_left$1$ = -24						; size = 4
_bits$1$ = -20						; size = 4
_next$5$ = -16						; size = 4
_state$1$ = -12						; size = 4
_next$ = -8						; size = 4
_hold$1$ = -4						; size = 4
_strm$ = 8						; size = 4
_in$ = 12						; size = 4
_in_desc$ = 16						; size = 4
_out$ = 20						; size = 4
_out_desc$ = 24						; size = 4
_inflateBack@20 PROC					; COMDAT

; 256  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 257  :     struct inflate_state FAR *state;
; 258  :     z_const unsigned char FAR *next;    /* next input */
; 259  :     unsigned char FAR *put;     /* next output */
; 260  :     unsigned have, left;        /* available input and output */
; 261  :     unsigned long hold;         /* bit buffer */
; 262  :     unsigned bits;              /* bits in bit buffer */
; 263  :     unsigned copy;              /* number of stored or match bytes to copy */
; 264  :     unsigned char FAR *from;    /* where to copy match bytes from */
; 265  :     code here;                  /* current decoding table entry */
; 266  :     code last;                  /* parent table entry */
; 267  :     unsigned len;               /* length to copy for repeats, bits to drop */
; 268  :     int ret;                    /* return code */
; 269  :     static const unsigned short order[19] = /* permutation of code lengths */
; 270  :         {16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
; 271  : 
; 272  :     /* Check that the strm exists and that the state was initialized */
; 273  :     if (strm == Z_NULL || strm->state == Z_NULL)

  00003	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00006	83 ec 30	 sub	 esp, 48			; 00000030H
  00009	85 c0		 test	 eax, eax
  0000b	0f 84 a4 0d 00
	00		 je	 $LN333@inflateBac
  00011	8b 50 1c	 mov	 edx, DWORD PTR [eax+28]
  00014	89 55 f4	 mov	 DWORD PTR _state$1$[ebp], edx
  00017	85 d2		 test	 edx, edx
  00019	0f 84 96 0d 00
	00		 je	 $LN333@inflateBac

; 275  :     state = (struct inflate_state FAR *)strm->state;
; 276  : 
; 277  :     /* Reset the state */
; 278  :     strm->msg = Z_NULL;

  0001f	53		 push	 ebx
  00020	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0

; 279  :     state->mode = TYPE;

  00027	c7 02 0b 00 00
	00		 mov	 DWORD PTR [edx], 11	; 0000000bH

; 280  :     state->last = 0;

  0002d	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0

; 281  :     state->whave = 0;

  00034	c7 42 2c 00 00
	00 00		 mov	 DWORD PTR [edx+44], 0

; 282  :     next = strm->next_in;

  0003b	8b 18		 mov	 ebx, DWORD PTR [eax]
  0003d	89 5d f0	 mov	 DWORD PTR _next$5$[ebp], ebx
  00040	89 5d f8	 mov	 DWORD PTR _next$[ebp], ebx
  00043	56		 push	 esi
  00044	57		 push	 edi

; 283  :     have = next != Z_NULL ? strm->avail_in : 0;

  00045	85 db		 test	 ebx, ebx
  00047	74 05		 je	 SHORT $LN337@inflateBac
  00049	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  0004c	eb 02		 jmp	 SHORT $LN338@inflateBac
$LN337@inflateBac:
  0004e	33 f6		 xor	 esi, esi
$LN338@inflateBac:

; 284  :     hold = 0;
; 285  :     bits = 0;
; 286  :     put = state->window;

  00050	8b 42 34	 mov	 eax, DWORD PTR [edx+52]
  00053	33 c9		 xor	 ecx, ecx
  00055	89 45 e4	 mov	 DWORD PTR _put$1$[ebp], eax
  00058	33 ff		 xor	 edi, edi

; 287  :     left = state->wsize;

  0005a	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  0005d	89 45 e8	 mov	 DWORD PTR _left$1$[ebp], eax

; 288  : 
; 289  :     /* Inflate until end of block marked as last */
; 290  :     for (;;)
; 291  :         switch (state->mode) {

  00060	8b 02		 mov	 eax, DWORD PTR [edx]
  00062	83 e8 0b	 sub	 eax, 11			; 0000000bH
  00065	89 4d fc	 mov	 DWORD PTR _hold$1$[ebp], ecx
  00068	89 7d ec	 mov	 DWORD PTR _bits$1$[ebp], edi
  0006b	83 f8 12	 cmp	 eax, 18			; 00000012H
  0006e	0f 87 aa 0c 00
	00		 ja	 $LN1@inflateBac
  00074	8b 5d f0	 mov	 ebx, DWORD PTR _next$5$[ebp]
  00077	eb 07 8d a4 24
	00 00 00 00	 npad	 9
$LL332@inflateBac:
  00080	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN467@inflateBac[eax]
  00087	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN499@inflateBac[eax*4]
$LN328@inflateBac:

; 292  :         case TYPE:
; 293  :             /* determine and dispatch block type */
; 294  :             if (state->last) {

  0008e	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  00092	74 18		 je	 SHORT $LN323@inflateBac

; 295  :                 BYTEBITS();

  00094	8b cf		 mov	 ecx, edi

; 296  :                 state->mode = DONE;

  00096	c7 02 1c 00 00
	00		 mov	 DWORD PTR [edx], 28	; 0000001cH
  0009c	83 e1 07	 and	 ecx, 7
  0009f	d3 6d fc	 shr	 DWORD PTR _hold$1$[ebp], cl
  000a2	2b f9		 sub	 edi, ecx
  000a4	89 7d ec	 mov	 DWORD PTR _bits$1$[ebp], edi

; 297  :                 break;

  000a7	e9 5b 0c 00 00	 jmp	 $LN497@inflateBac
$LN323@inflateBac:

; 298  :             }
; 299  :             NEEDBITS(3);

  000ac	83 ff 03	 cmp	 edi, 3
  000af	73 3d		 jae	 SHORT $LN322@inflateBac
$LL320@inflateBac:
  000b1	85 f6		 test	 esi, esi
  000b3	75 1a		 jne	 SHORT $LN314@inflateBac
  000b5	8d 45 f8	 lea	 eax, DWORD PTR _next$[ebp]
  000b8	50		 push	 eax
  000b9	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  000bc	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  000bf	8b f0		 mov	 esi, eax
  000c1	83 c4 08	 add	 esp, 8
  000c4	85 f6		 test	 esi, esi
  000c6	0f 84 6d 0c 00
	00		 je	 $LN363@inflateBac
  000cc	8b 5d f8	 mov	 ebx, DWORD PTR _next$[ebp]
$LN314@inflateBac:
  000cf	0f b6 03	 movzx	 eax, BYTE PTR [ebx]
  000d2	8b cf		 mov	 ecx, edi
  000d4	d3 e0		 shl	 eax, cl
  000d6	43		 inc	 ebx
  000d7	8b 4d fc	 mov	 ecx, DWORD PTR _hold$1$[ebp]
  000da	83 c7 08	 add	 edi, 8
  000dd	03 c8		 add	 ecx, eax
  000df	89 5d f8	 mov	 DWORD PTR _next$[ebp], ebx
  000e2	4e		 dec	 esi
  000e3	89 4d fc	 mov	 DWORD PTR _hold$1$[ebp], ecx
  000e6	83 ff 03	 cmp	 edi, 3
  000e9	72 c6		 jb	 SHORT $LL320@inflateBac
  000eb	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
$LN322@inflateBac:

; 300  :             state->last = BITS(1);

  000ee	8b c1		 mov	 eax, ecx

; 301  :             DROPBITS(1);

  000f0	d1 e9		 shr	 ecx, 1
  000f2	83 e0 01	 and	 eax, 1
  000f5	89 4d fc	 mov	 DWORD PTR _hold$1$[ebp], ecx
  000f8	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 302  :             switch (BITS(2)) {

  000fb	8b c1		 mov	 eax, ecx
  000fd	83 e0 03	 and	 eax, 3
  00100	83 f8 03	 cmp	 eax, 3
  00103	77 39		 ja	 SHORT $LN301@inflateBac
  00105	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN500@inflateBac[eax*4]
$LN305@inflateBac:

; 303  :             case 0:                             /* stored block */
; 304  :                 Tracev((stderr, "inflate:     stored block%s\n",
; 305  :                         state->last ? " (last)" : ""));
; 306  :                 state->mode = STORED;

  0010c	c7 02 0d 00 00
	00		 mov	 DWORD PTR [edx], 13	; 0000000dH

; 307  :                 break;

  00112	eb 2a		 jmp	 SHORT $LN301@inflateBac
$LN304@inflateBac:

; 308  :             case 1:                             /* fixed block */
; 309  :                 fixedtables(state);

  00114	8b ca		 mov	 ecx, edx
  00116	e8 00 00 00 00	 call	 _fixedtables

; 310  :                 Tracev((stderr, "inflate:     fixed codes block%s\n",
; 311  :                         state->last ? " (last)" : ""));
; 312  :                 state->mode = LEN;              /* decode codes */
; 313  :                 break;

  0011b	8b 4d fc	 mov	 ecx, DWORD PTR _hold$1$[ebp]
  0011e	c7 02 14 00 00
	00		 mov	 DWORD PTR [edx], 20	; 00000014H
  00124	eb 18		 jmp	 SHORT $LN301@inflateBac
$LN303@inflateBac:

; 314  :             case 2:                             /* dynamic block */
; 315  :                 Tracev((stderr, "inflate:     dynamic codes block%s\n",
; 316  :                         state->last ? " (last)" : ""));
; 317  :                 state->mode = TABLE;

  00126	c7 02 10 00 00
	00		 mov	 DWORD PTR [edx], 16	; 00000010H

; 318  :                 break;

  0012c	eb 10		 jmp	 SHORT $LN301@inflateBac
$LN302@inflateBac:

; 319  :             case 3:
; 320  :                 strm->msg = (char *)"invalid block type";

  0012e	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00131	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BD@PJCBIDD@invalid?5block?5type?$AA@

; 321  :                 state->mode = BAD;

  00138	c7 02 1d 00 00
	00		 mov	 DWORD PTR [edx], 29	; 0000001dH
$LN301@inflateBac:

; 322  :             }
; 323  :             DROPBITS(2);
; 324  :             break;

  0013e	8b 5d f8	 mov	 ebx, DWORD PTR _next$[ebp]
  00141	c1 e9 02	 shr	 ecx, 2
  00144	83 ef 03	 sub	 edi, 3
  00147	89 4d fc	 mov	 DWORD PTR _hold$1$[ebp], ecx
  0014a	89 7d ec	 mov	 DWORD PTR _bits$1$[ebp], edi
  0014d	89 5d f0	 mov	 DWORD PTR _next$5$[ebp], ebx
  00150	e9 bb 0b 00 00	 jmp	 $LN387@inflateBac
$LN297@inflateBac:

; 325  : 
; 326  :         case STORED:
; 327  :             /* get and verify stored block length */
; 328  :             BYTEBITS();                         /* go to byte boundary */

  00155	8b cf		 mov	 ecx, edi
  00157	83 e1 07	 and	 ecx, 7
  0015a	d3 6d fc	 shr	 DWORD PTR _hold$1$[ebp], cl
  0015d	2b f9		 sub	 edi, ecx
  0015f	89 7d ec	 mov	 DWORD PTR _bits$1$[ebp], edi

; 329  :             NEEDBITS(32);

  00162	83 ff 20	 cmp	 edi, 32			; 00000020H
  00165	73 42		 jae	 SHORT $LN485@inflateBac
$LL291@inflateBac:
  00167	85 f6		 test	 esi, esi
  00169	75 1a		 jne	 SHORT $LN285@inflateBac
  0016b	8d 45 f8	 lea	 eax, DWORD PTR _next$[ebp]
  0016e	50		 push	 eax
  0016f	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  00172	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00175	8b f0		 mov	 esi, eax
  00177	83 c4 08	 add	 esp, 8
  0017a	85 f6		 test	 esi, esi
  0017c	0f 84 b7 0b 00
	00		 je	 $LN363@inflateBac
  00182	8b 5d f8	 mov	 ebx, DWORD PTR _next$[ebp]
$LN285@inflateBac:
  00185	0f b6 03	 movzx	 eax, BYTE PTR [ebx]
  00188	8b cf		 mov	 ecx, edi
  0018a	d3 e0		 shl	 eax, cl
  0018c	83 c7 08	 add	 edi, 8
  0018f	8b 4d fc	 mov	 ecx, DWORD PTR _hold$1$[ebp]
  00192	43		 inc	 ebx
  00193	03 c8		 add	 ecx, eax
  00195	89 5d f8	 mov	 DWORD PTR _next$[ebp], ebx
  00198	4e		 dec	 esi
  00199	89 4d fc	 mov	 DWORD PTR _hold$1$[ebp], ecx
  0019c	89 7d ec	 mov	 DWORD PTR _bits$1$[ebp], edi
  0019f	83 ff 20	 cmp	 edi, 32			; 00000020H
  001a2	72 c3		 jb	 SHORT $LL291@inflateBac
  001a4	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  001a7	eb 03		 jmp	 SHORT $LN293@inflateBac
$LN485@inflateBac:
  001a9	8b 4d fc	 mov	 ecx, DWORD PTR _hold$1$[ebp]
$LN293@inflateBac:

; 330  :             if ((hold & 0xffff) != ((hold >> 16) ^ 0xffff)) {

  001ac	8b c1		 mov	 eax, ecx
  001ae	8b d9		 mov	 ebx, ecx
  001b0	f7 d0		 not	 eax
  001b2	81 e3 ff ff 00
	00		 and	 ebx, 65535		; 0000ffffH
  001b8	c1 e8 10	 shr	 eax, 16			; 00000010H
  001bb	3b d8		 cmp	 ebx, eax
  001bd	74 1b		 je	 SHORT $LN281@inflateBac

; 331  :                 strm->msg = (char *)"invalid stored block lengths";

  001bf	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  001c2	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BN@LGAADGOK@invalid?5stored?5block?5lengths?$AA@

; 332  :                 state->mode = BAD;

  001c9	c7 02 1d 00 00
	00		 mov	 DWORD PTR [edx], 29	; 0000001dH

; 333  :                 break;

  001cf	8b 5d f8	 mov	 ebx, DWORD PTR _next$[ebp]
  001d2	89 5d f0	 mov	 DWORD PTR _next$5$[ebp], ebx
  001d5	e9 36 0b 00 00	 jmp	 $LN387@inflateBac
$LN281@inflateBac:

; 334  :             }
; 335  :             state->length = (unsigned)hold & 0xffff;
; 336  :             Tracev((stderr, "inflate:       stored length %u\n",
; 337  :                     state->length));
; 338  :             INITBITS();

  001da	33 c9		 xor	 ecx, ecx
  001dc	89 5a 40	 mov	 DWORD PTR [edx+64], ebx
  001df	33 ff		 xor	 edi, edi
  001e1	89 4d fc	 mov	 DWORD PTR _hold$1$[ebp], ecx
  001e4	89 7d ec	 mov	 DWORD PTR _bits$1$[ebp], edi

; 339  : 
; 340  :             /* copy stored block from input to output */
; 341  :             while (state->length != 0) {

  001e7	3b d9		 cmp	 ebx, ecx
  001e9	0f 84 84 00 00
	00		 je	 $LN276@inflateBac
  001ef	8b 45 e8	 mov	 eax, DWORD PTR _left$1$[ebp]
$LL277@inflateBac:

; 342  :                 copy = state->length;

  001f2	8b 5a 40	 mov	 ebx, DWORD PTR [edx+64]

; 343  :                 PULL();

  001f5	85 f6		 test	 esi, esi
  001f7	75 1d		 jne	 SHORT $LN274@inflateBac
  001f9	8d 45 f8	 lea	 eax, DWORD PTR _next$[ebp]
  001fc	50		 push	 eax
  001fd	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  00200	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00203	8b f0		 mov	 esi, eax
  00205	83 c4 08	 add	 esp, 8
  00208	85 f6		 test	 esi, esi
  0020a	0f 84 29 0b 00
	00		 je	 $LN363@inflateBac
  00210	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  00213	8b 45 e8	 mov	 eax, DWORD PTR _left$1$[ebp]
$LN274@inflateBac:

; 344  :                 ROOM();

  00216	85 c0		 test	 eax, eax
  00218	75 25		 jne	 SHORT $LN269@inflateBac
  0021a	8b 4a 28	 mov	 ecx, DWORD PTR [edx+40]
  0021d	8b 42 34	 mov	 eax, DWORD PTR [edx+52]
  00220	51		 push	 ecx
  00221	50		 push	 eax
  00222	ff 75 18	 push	 DWORD PTR _out_desc$[ebp]
  00225	89 45 e4	 mov	 DWORD PTR _put$1$[ebp], eax
  00228	89 4d e8	 mov	 DWORD PTR _left$1$[ebp], ecx
  0022b	89 4a 2c	 mov	 DWORD PTR [edx+44], ecx
  0022e	ff 55 14	 call	 DWORD PTR _out$[ebp]
  00231	83 c4 0c	 add	 esp, 12			; 0000000cH
  00234	85 c0		 test	 eax, eax
  00236	0f 85 17 0b 00
	00		 jne	 $LN366@inflateBac
  0023c	8b 45 e8	 mov	 eax, DWORD PTR _left$1$[ebp]
$LN269@inflateBac:

; 345  :                 if (copy > have) copy = have;

  0023f	3b de		 cmp	 ebx, esi
  00241	0f 47 de	 cmova	 ebx, esi

; 346  :                 if (copy > left) copy = left;

  00244	3b d8		 cmp	 ebx, eax
  00246	0f 47 d8	 cmova	 ebx, eax

; 347  :                 zmemcpy(put, next, copy);

  00249	8b 45 e4	 mov	 eax, DWORD PTR _put$1$[ebp]
  0024c	53		 push	 ebx
  0024d	ff 75 f8	 push	 DWORD PTR _next$[ebp]
  00250	50		 push	 eax
  00251	e8 00 00 00 00	 call	 _memcpy

; 348  :                 have -= copy;
; 349  :                 next += copy;
; 350  :                 left -= copy;
; 351  :                 put += copy;
; 352  :                 state->length -= copy;

  00256	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  00259	83 c4 0c	 add	 esp, 12			; 0000000cH
  0025c	8b 45 e8	 mov	 eax, DWORD PTR _left$1$[ebp]
  0025f	2b f3		 sub	 esi, ebx
  00261	01 5d f8	 add	 DWORD PTR _next$[ebp], ebx
  00264	2b c3		 sub	 eax, ebx
  00266	01 5d e4	 add	 DWORD PTR _put$1$[ebp], ebx
  00269	29 5a 40	 sub	 DWORD PTR [edx+64], ebx
  0026c	89 45 e8	 mov	 DWORD PTR _left$1$[ebp], eax
  0026f	75 81		 jne	 SHORT $LL277@inflateBac
  00271	8b cf		 mov	 ecx, edi
$LN276@inflateBac:

; 353  :             }
; 354  :             Tracev((stderr, "inflate:       stored end\n"));
; 355  :             state->mode = TYPE;

  00273	c7 02 0b 00 00
	00		 mov	 DWORD PTR [edx], 11	; 0000000bH

; 356  :             break;

  00279	8b 5d f8	 mov	 ebx, DWORD PTR _next$[ebp]
  0027c	89 5d f0	 mov	 DWORD PTR _next$5$[ebp], ebx
  0027f	e9 8c 0a 00 00	 jmp	 $LN387@inflateBac
$LN262@inflateBac:

; 357  : 
; 358  :         case TABLE:
; 359  :             /* get dynamic table entries descriptor */
; 360  :             NEEDBITS(14);

  00284	83 ff 0e	 cmp	 edi, 14			; 0000000eH
  00287	73 3f		 jae	 SHORT $LN261@inflateBac
  00289	8d a4 24 00 00
	00 00		 npad	 7
$LL259@inflateBac:
  00290	85 f6		 test	 esi, esi
  00292	75 1a		 jne	 SHORT $LN253@inflateBac
  00294	8d 45 f8	 lea	 eax, DWORD PTR _next$[ebp]
  00297	50		 push	 eax
  00298	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  0029b	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  0029e	8b f0		 mov	 esi, eax
  002a0	83 c4 08	 add	 esp, 8
  002a3	85 f6		 test	 esi, esi
  002a5	0f 84 8e 0a 00
	00		 je	 $LN363@inflateBac
  002ab	8b 5d f8	 mov	 ebx, DWORD PTR _next$[ebp]
$LN253@inflateBac:
  002ae	0f b6 03	 movzx	 eax, BYTE PTR [ebx]
  002b1	8b cf		 mov	 ecx, edi
  002b3	d3 e0		 shl	 eax, cl
  002b5	43		 inc	 ebx
  002b6	01 45 fc	 add	 DWORD PTR _hold$1$[ebp], eax
  002b9	83 c7 08	 add	 edi, 8
  002bc	4e		 dec	 esi
  002bd	89 5d f8	 mov	 DWORD PTR _next$[ebp], ebx
  002c0	83 ff 0e	 cmp	 edi, 14			; 0000000eH
  002c3	72 cb		 jb	 SHORT $LL259@inflateBac
  002c5	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
$LN261@inflateBac:

; 361  :             state->nlen = BITS(5) + 257;

  002c8	8b 5d fc	 mov	 ebx, DWORD PTR _hold$1$[ebp]

; 362  :             DROPBITS(5);
; 363  :             state->ndist = BITS(5) + 1;
; 364  :             DROPBITS(5);
; 365  :             state->ncode = BITS(4) + 4;
; 366  :             DROPBITS(4);

  002cb	83 ef 0e	 sub	 edi, 14			; 0000000eH
  002ce	8b c3		 mov	 eax, ebx
  002d0	89 7d ec	 mov	 DWORD PTR _bits$1$[ebp], edi
  002d3	83 e0 1f	 and	 eax, 31			; 0000001fH
  002d6	c1 eb 05	 shr	 ebx, 5
  002d9	05 01 01 00 00	 add	 eax, 257		; 00000101H
  002de	89 42 60	 mov	 DWORD PTR [edx+96], eax
  002e1	8b c3		 mov	 eax, ebx
  002e3	83 e0 1f	 and	 eax, 31			; 0000001fH
  002e6	c1 eb 05	 shr	 ebx, 5
  002e9	40		 inc	 eax
  002ea	89 42 64	 mov	 DWORD PTR [edx+100], eax
  002ed	8b c3		 mov	 eax, ebx
  002ef	83 e0 0f	 and	 eax, 15			; 0000000fH
  002f2	c1 eb 04	 shr	 ebx, 4
  002f5	83 c0 04	 add	 eax, 4
  002f8	89 5d fc	 mov	 DWORD PTR _hold$1$[ebp], ebx

; 367  : #ifndef PKZIP_BUG_WORKAROUND
; 368  :             if (state->nlen > 286 || state->ndist > 30) {

  002fb	81 7a 60 1e 01
	00 00		 cmp	 DWORD PTR [edx+96], 286	; 0000011eH
  00302	89 42 5c	 mov	 DWORD PTR [edx+92], eax
  00305	0f 87 09 05 00
	00		 ja	 $LN239@inflateBac
  0030b	83 7a 64 1e	 cmp	 DWORD PTR [edx+100], 30	; 0000001eH
  0030f	0f 87 ff 04 00
	00		 ja	 $LN239@inflateBac

; 372  :             }
; 373  : #endif
; 374  :             Tracev((stderr, "inflate:       table sizes ok\n"));
; 375  : 
; 376  :             /* get code length code lengths (not a typo) */
; 377  :             state->have = 0;

  00315	c7 42 68 00 00
	00 00		 mov	 DWORD PTR [edx+104], 0

; 378  :             while (state->have < state->ncode) {

  0031c	85 c0		 test	 eax, eax
  0031e	76 6b		 jbe	 SHORT $LN346@inflateBac
$LL238@inflateBac:

; 379  :                 NEEDBITS(3);

  00320	83 ff 03	 cmp	 edi, 3
  00323	73 3a		 jae	 SHORT $LN235@inflateBac
  00325	8b 55 f8	 mov	 edx, DWORD PTR _next$[ebp]
$LL233@inflateBac:
  00328	85 f6		 test	 esi, esi
  0032a	75 1a		 jne	 SHORT $LN227@inflateBac
  0032c	8d 45 f8	 lea	 eax, DWORD PTR _next$[ebp]
  0032f	50		 push	 eax
  00330	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  00333	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00336	8b f0		 mov	 esi, eax
  00338	83 c4 08	 add	 esp, 8
  0033b	85 f6		 test	 esi, esi
  0033d	0f 84 f6 09 00
	00		 je	 $LN363@inflateBac
  00343	8b 55 f8	 mov	 edx, DWORD PTR _next$[ebp]
$LN227@inflateBac:
  00346	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00349	8b cf		 mov	 ecx, edi
  0034b	d3 e0		 shl	 eax, cl
  0034d	42		 inc	 edx
  0034e	83 c7 08	 add	 edi, 8
  00351	89 55 f8	 mov	 DWORD PTR _next$[ebp], edx
  00354	4e		 dec	 esi
  00355	03 d8		 add	 ebx, eax
  00357	83 ff 03	 cmp	 edi, 3
  0035a	72 cc		 jb	 SHORT $LL233@inflateBac
  0035c	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
$LN235@inflateBac:

; 380  :                 state->lens[order[state->have++]] = (unsigned short)BITS(3);

  0035f	8b 42 68	 mov	 eax, DWORD PTR [edx+104]
  00362	8b cb		 mov	 ecx, ebx
  00364	83 e1 07	 and	 ecx, 7

; 381  :                 DROPBITS(3);

  00367	c1 eb 03	 shr	 ebx, 3
  0036a	83 ef 03	 sub	 edi, 3
  0036d	89 5d fc	 mov	 DWORD PTR _hold$1$[ebp], ebx
  00370	89 7d ec	 mov	 DWORD PTR _bits$1$[ebp], edi
  00373	0f b7 04 45 00
	00 00 00	 movzx	 eax, WORD PTR ?order@?1??inflateBack@@9@9[eax*2]
  0037b	66 89 4c 42 70	 mov	 WORD PTR [edx+eax*2+112], cx
  00380	ff 42 68	 inc	 DWORD PTR [edx+104]
  00383	8b 42 68	 mov	 eax, DWORD PTR [edx+104]
  00386	3b 42 5c	 cmp	 eax, DWORD PTR [edx+92]
  00389	72 95		 jb	 SHORT $LL238@inflateBac
$LN346@inflateBac:

; 382  :             }
; 383  :             while (state->have < 19)

  0038b	83 7a 68 13	 cmp	 DWORD PTR [edx+104], 19	; 00000013H
  0038f	73 1b		 jae	 SHORT $LN219@inflateBac
$LL220@inflateBac:

; 384  :                 state->lens[order[state->have++]] = 0;

  00391	8b 42 68	 mov	 eax, DWORD PTR [edx+104]
  00394	33 c9		 xor	 ecx, ecx
  00396	0f b7 04 45 00
	00 00 00	 movzx	 eax, WORD PTR ?order@?1??inflateBack@@9@9[eax*2]
  0039e	66 89 4c 42 70	 mov	 WORD PTR [edx+eax*2+112], cx
  003a3	ff 42 68	 inc	 DWORD PTR [edx+104]
  003a6	83 7a 68 13	 cmp	 DWORD PTR [edx+104], 19	; 00000013H
  003aa	72 e5		 jb	 SHORT $LL220@inflateBac
$LN219@inflateBac:

; 385  :             state->next = state->codes;

  003ac	8d 82 30 05 00
	00		 lea	 eax, DWORD PTR [edx+1328]

; 386  :             state->lencode = (code const FAR *)(state->next);
; 387  :             state->lenbits = 7;

  003b2	c7 42 54 07 00
	00 00		 mov	 DWORD PTR [edx+84], 7
  003b9	8d 4a 6c	 lea	 ecx, DWORD PTR [edx+108]
  003bc	89 42 4c	 mov	 DWORD PTR [edx+76], eax

; 388  :             ret = inflate_table(CODES, state->lens, 19, &(state->next),
; 389  :                                 &(state->lenbits), state->work);

  003bf	8d 9a f0 02 00
	00		 lea	 ebx, DWORD PTR [edx+752]
  003c5	89 01		 mov	 DWORD PTR [ecx], eax
  003c7	8d 42 54	 lea	 eax, DWORD PTR [edx+84]
  003ca	83 c2 70	 add	 edx, 112		; 00000070H
  003cd	53		 push	 ebx
  003ce	50		 push	 eax
  003cf	51		 push	 ecx
  003d0	6a 13		 push	 19			; 00000013H
  003d2	33 c9		 xor	 ecx, ecx
  003d4	89 45 d8	 mov	 DWORD PTR tv1688[ebp], eax
  003d7	89 55 d0	 mov	 DWORD PTR tv1685[ebp], edx
  003da	e8 00 00 00 00	 call	 _inflate_table

; 392  :                 state->mode = BAD;

  003df	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  003e2	83 c4 10	 add	 esp, 16			; 00000010H
  003e5	85 c0		 test	 eax, eax
  003e7	74 15		 je	 SHORT $LN218@inflateBac

; 390  :             if (ret) {
; 391  :                 strm->msg = (char *)"invalid code lengths set";

  003e9	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  003ec	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BJ@HDEPPGOH@invalid?5code?5lengths?5set?$AA@

; 392  :                 state->mode = BAD;

  003f3	c7 02 1d 00 00
	00		 mov	 DWORD PTR [edx], 29	; 0000001dH

; 393  :                 break;

  003f9	e9 09 09 00 00	 jmp	 $LN497@inflateBac
$LN218@inflateBac:

; 394  :             }
; 395  :             Tracev((stderr, "inflate:       code lengths ok\n"));
; 396  : 
; 397  :             /* get length and distance code code lengths */
; 398  :             state->have = 0;
; 399  :             while (state->have < state->nlen + state->ndist) {

  003fe	8b 42 64	 mov	 eax, DWORD PTR [edx+100]
  00401	c7 42 68 00 00
	00 00		 mov	 DWORD PTR [edx+104], 0
  00408	8b 5d f8	 mov	 ebx, DWORD PTR _next$[ebp]
  0040b	89 5d f0	 mov	 DWORD PTR _next$5$[ebp], ebx
  0040e	03 42 60	 add	 eax, DWORD PTR [edx+96]
  00411	0f 84 8c 02 00
	00		 je	 $LN216@inflateBac
  00417	eb 07 8d a4 24
	00 00 00 00	 npad	 9
$LL217@inflateBac:

; 400  :                 for (;;) {
; 401  :                     here = state->lencode[BITS(state->lenbits)];

  00420	8b 45 d8	 mov	 eax, DWORD PTR tv1688[ebp]
  00423	ba 01 00 00 00	 mov	 edx, 1
  00428	8b 08		 mov	 ecx, DWORD PTR [eax]
  0042a	8b 45 f4	 mov	 eax, DWORD PTR _state$1$[ebp]
  0042d	d3 e2		 shl	 edx, cl
  0042f	4a		 dec	 edx
  00430	23 55 fc	 and	 edx, DWORD PTR _hold$1$[ebp]
  00433	8b 40 4c	 mov	 eax, DWORD PTR [eax+76]
  00436	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]

; 402  :                     if ((unsigned)(here.bits) <= bits) break;

  00439	8b c8		 mov	 ecx, eax
  0043b	c1 e9 08	 shr	 ecx, 8
  0043e	0f b6 c9	 movzx	 ecx, cl
  00441	89 45 dc	 mov	 DWORD PTR _here$1$[ebp], eax
  00444	89 45 e0	 mov	 DWORD PTR _here$[ebp], eax
  00447	3b cf		 cmp	 ecx, edi
  00449	76 63		 jbe	 SHORT $LN369@inflateBac
  0044b	eb 03 8d 49 00	 npad	 5
$LL215@inflateBac:

; 403  :                     PULLBYTE();

  00450	85 f6		 test	 esi, esi
  00452	75 1a		 jne	 SHORT $LN208@inflateBac
  00454	8d 45 f8	 lea	 eax, DWORD PTR _next$[ebp]
  00457	50		 push	 eax
  00458	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  0045b	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  0045e	8b f0		 mov	 esi, eax
  00460	83 c4 08	 add	 esp, 8
  00463	85 f6		 test	 esi, esi
  00465	0f 84 ce 08 00
	00		 je	 $LN363@inflateBac
  0046b	8b 5d f8	 mov	 ebx, DWORD PTR _next$[ebp]
$LN208@inflateBac:
  0046e	0f b6 03	 movzx	 eax, BYTE PTR [ebx]
  00471	8b cf		 mov	 ecx, edi
  00473	d3 e0		 shl	 eax, cl
  00475	43		 inc	 ebx
  00476	01 45 fc	 add	 DWORD PTR _hold$1$[ebp], eax
  00479	ba 01 00 00 00	 mov	 edx, 1
  0047e	8b 45 d8	 mov	 eax, DWORD PTR tv1688[ebp]
  00481	83 c7 08	 add	 edi, 8
  00484	89 5d f8	 mov	 DWORD PTR _next$[ebp], ebx
  00487	4e		 dec	 esi
  00488	89 5d f0	 mov	 DWORD PTR _next$5$[ebp], ebx
  0048b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0048d	8b 45 f4	 mov	 eax, DWORD PTR _state$1$[ebp]
  00490	d3 e2		 shl	 edx, cl
  00492	4a		 dec	 edx
  00493	23 55 fc	 and	 edx, DWORD PTR _hold$1$[ebp]
  00496	8b 40 4c	 mov	 eax, DWORD PTR [eax+76]
  00499	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]
  0049c	8b c8		 mov	 ecx, eax
  0049e	c1 e9 08	 shr	 ecx, 8
  004a1	0f b6 c9	 movzx	 ecx, cl
  004a4	89 45 dc	 mov	 DWORD PTR _here$1$[ebp], eax
  004a7	89 45 e0	 mov	 DWORD PTR _here$[ebp], eax
  004aa	3b cf		 cmp	 ecx, edi
  004ac	77 a2		 ja	 SHORT $LL215@inflateBac
$LN369@inflateBac:

; 404  :                 }
; 405  :                 if (here.val < 16) {

  004ae	8b c8		 mov	 ecx, eax
  004b0	c1 e9 10	 shr	 ecx, 16			; 00000010H
  004b3	89 4d d4	 mov	 DWORD PTR tv1677[ebp], ecx
  004b6	66 83 f9 10	 cmp	 cx, 16			; 00000010H
  004ba	73 24		 jae	 SHORT $LN493@inflateBac

; 406  :                     DROPBITS(here.bits);
; 407  :                     state->lens[state->have++] = here.val;

  004bc	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  004bf	c1 e8 08	 shr	 eax, 8
  004c2	0f b6 c8	 movzx	 ecx, al
  004c5	d3 6d fc	 shr	 DWORD PTR _hold$1$[ebp], cl
  004c8	2b f9		 sub	 edi, ecx
  004ca	8b 42 68	 mov	 eax, DWORD PTR [edx+104]
  004cd	8b 4d d4	 mov	 ecx, DWORD PTR tv1677[ebp]
  004d0	89 7d ec	 mov	 DWORD PTR _bits$1$[ebp], edi
  004d3	66 89 4c 42 70	 mov	 WORD PTR [edx+eax*2+112], cx
  004d8	ff 42 68	 inc	 DWORD PTR [edx+104]

; 408  :                 }
; 409  :                 else {

  004db	e9 ae 01 00 00	 jmp	 $LN494@inflateBac
$LN493@inflateBac:
  004e0	8b 55 fc	 mov	 edx, DWORD PTR _hold$1$[ebp]

; 410  :                     if (here.val == 16) {

  004e3	0f 85 96 00 00
	00		 jne	 $LN199@inflateBac

; 411  :                         NEEDBITS(here.bits + 2);

  004e9	8b c8		 mov	 ecx, eax
  004eb	c1 e9 08	 shr	 ecx, 8
  004ee	0f b6 c9	 movzx	 ecx, cl
  004f1	83 c1 02	 add	 ecx, 2
  004f4	89 4d d4	 mov	 DWORD PTR $T1[ebp], ecx
  004f7	3b f9		 cmp	 edi, ecx
  004f9	73 45		 jae	 SHORT $LN197@inflateBac
  004fb	eb 03 8d 49 00	 npad	 5
$LL195@inflateBac:
  00500	85 f6		 test	 esi, esi
  00502	75 1d		 jne	 SHORT $LN189@inflateBac
  00504	8d 45 f8	 lea	 eax, DWORD PTR _next$[ebp]
  00507	50		 push	 eax
  00508	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  0050b	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  0050e	8b f0		 mov	 esi, eax
  00510	83 c4 08	 add	 esp, 8
  00513	85 f6		 test	 esi, esi
  00515	0f 84 1e 08 00
	00		 je	 $LN363@inflateBac
  0051b	8b 5d f8	 mov	 ebx, DWORD PTR _next$[ebp]
  0051e	8b 55 fc	 mov	 edx, DWORD PTR _hold$1$[ebp]
$LN189@inflateBac:
  00521	0f b6 03	 movzx	 eax, BYTE PTR [ebx]
  00524	8b cf		 mov	 ecx, edi
  00526	d3 e0		 shl	 eax, cl
  00528	43		 inc	 ebx
  00529	03 d0		 add	 edx, eax
  0052b	89 5d f0	 mov	 DWORD PTR _next$5$[ebp], ebx
  0052e	83 c7 08	 add	 edi, 8
  00531	89 55 fc	 mov	 DWORD PTR _hold$1$[ebp], edx
  00534	4e		 dec	 esi
  00535	89 5d f8	 mov	 DWORD PTR _next$[ebp], ebx
  00538	3b 7d d4	 cmp	 edi, DWORD PTR $T1[ebp]
  0053b	72 c3		 jb	 SHORT $LL195@inflateBac
  0053d	8b 45 dc	 mov	 eax, DWORD PTR _here$1$[ebp]
$LN197@inflateBac:

; 412  :                         DROPBITS(here.bits);

  00540	0f b6 cc	 movzx	 ecx, ah
  00543	d3 ea		 shr	 edx, cl
  00545	2b f9		 sub	 edi, ecx
  00547	89 55 fc	 mov	 DWORD PTR _hold$1$[ebp], edx

; 413  :                         if (state->have == 0) {

  0054a	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  0054d	89 7d ec	 mov	 DWORD PTR _bits$1$[ebp], edi
  00550	8b 42 68	 mov	 eax, DWORD PTR [edx+104]
  00553	85 c0		 test	 eax, eax
  00555	0f 84 70 01 00
	00		 je	 $LN374@inflateBac

; 417  :                         }
; 418  :                         len = (unsigned)(state->lens[state->have - 1]);

  0055b	0f b7 44 42 6e	 movzx	 eax, WORD PTR [edx+eax*2+110]
  00560	89 45 dc	 mov	 DWORD PTR _len$1$[ebp], eax

; 419  :                         copy = 3 + BITS(2);

  00563	8b 45 fc	 mov	 eax, DWORD PTR _hold$1$[ebp]
  00566	8b c8		 mov	 ecx, eax
  00568	83 e1 03	 and	 ecx, 3

; 420  :                         DROPBITS(2);

  0056b	c1 e8 02	 shr	 eax, 2
  0056e	83 c1 03	 add	 ecx, 3
  00571	89 45 fc	 mov	 DWORD PTR _hold$1$[ebp], eax
  00574	89 4d e0	 mov	 DWORD PTR _copy$4$[ebp], ecx
  00577	83 ef 02	 sub	 edi, 2

; 421  :                     }
; 422  :                     else if (here.val == 17) {

  0057a	e9 df 00 00 00	 jmp	 $LN495@inflateBac
$LN199@inflateBac:
  0057f	66 83 7d e2 11	 cmp	 WORD PTR _here$[ebp+2], 17 ; 00000011H

; 423  :                         NEEDBITS(here.bits + 3);

  00584	0f b6 cc	 movzx	 ecx, ah
  00587	75 63		 jne	 SHORT $LN156@inflateBac
  00589	8d 41 03	 lea	 eax, DWORD PTR [ecx+3]
  0058c	89 4d d4	 mov	 DWORD PTR tv1675[ebp], ecx
  0058f	3b f8		 cmp	 edi, eax
  00591	73 42		 jae	 SHORT $LN175@inflateBac
$LL173@inflateBac:
  00593	85 f6		 test	 esi, esi
  00595	75 1d		 jne	 SHORT $LN167@inflateBac
  00597	8d 45 f8	 lea	 eax, DWORD PTR _next$[ebp]
  0059a	50		 push	 eax
  0059b	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  0059e	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  005a1	8b f0		 mov	 esi, eax
  005a3	83 c4 08	 add	 esp, 8
  005a6	85 f6		 test	 esi, esi
  005a8	0f 84 8b 07 00
	00		 je	 $LN363@inflateBac
  005ae	8b 5d f8	 mov	 ebx, DWORD PTR _next$[ebp]
  005b1	8b 55 fc	 mov	 edx, DWORD PTR _hold$1$[ebp]
$LN167@inflateBac:
  005b4	0f b6 03	 movzx	 eax, BYTE PTR [ebx]
  005b7	8b cf		 mov	 ecx, edi
  005b9	d3 e0		 shl	 eax, cl
  005bb	43		 inc	 ebx
  005bc	8b 4d d4	 mov	 ecx, DWORD PTR tv1675[ebp]
  005bf	03 d0		 add	 edx, eax
  005c1	83 c7 08	 add	 edi, 8
  005c4	89 55 fc	 mov	 DWORD PTR _hold$1$[ebp], edx
  005c7	4e		 dec	 esi
  005c8	89 5d f0	 mov	 DWORD PTR _next$5$[ebp], ebx
  005cb	89 5d f8	 mov	 DWORD PTR _next$[ebp], ebx
  005ce	8d 41 03	 lea	 eax, DWORD PTR [ecx+3]
  005d1	3b f8		 cmp	 edi, eax
  005d3	72 be		 jb	 SHORT $LL173@inflateBac
$LN175@inflateBac:

; 424  :                         DROPBITS(here.bits);

  005d5	d3 ea		 shr	 edx, cl

; 425  :                         len = 0;
; 426  :                         copy = 3 + BITS(3);

  005d7	8b c2		 mov	 eax, edx
  005d9	83 e0 07	 and	 eax, 7
  005dc	83 c0 03	 add	 eax, 3

; 427  :                         DROPBITS(3);

  005df	c1 ea 03	 shr	 edx, 3
  005e2	89 45 e0	 mov	 DWORD PTR _copy$4$[ebp], eax
  005e5	b8 fd ff ff ff	 mov	 eax, -3			; fffffffdH

; 428  :                     }
; 429  :                     else {

  005ea	eb 61		 jmp	 SHORT $LN496@inflateBac
$LN156@inflateBac:

; 430  :                         NEEDBITS(here.bits + 7);

  005ec	8d 41 07	 lea	 eax, DWORD PTR [ecx+7]
  005ef	89 4d d4	 mov	 DWORD PTR tv1674[ebp], ecx
  005f2	3b f8		 cmp	 edi, eax
  005f4	73 42		 jae	 SHORT $LN155@inflateBac
$LL153@inflateBac:
  005f6	85 f6		 test	 esi, esi
  005f8	75 1d		 jne	 SHORT $LN147@inflateBac
  005fa	8d 45 f8	 lea	 eax, DWORD PTR _next$[ebp]
  005fd	50		 push	 eax
  005fe	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  00601	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00604	8b f0		 mov	 esi, eax
  00606	83 c4 08	 add	 esp, 8
  00609	85 f6		 test	 esi, esi
  0060b	0f 84 28 07 00
	00		 je	 $LN363@inflateBac
  00611	8b 5d f8	 mov	 ebx, DWORD PTR _next$[ebp]
  00614	8b 55 fc	 mov	 edx, DWORD PTR _hold$1$[ebp]
$LN147@inflateBac:
  00617	0f b6 03	 movzx	 eax, BYTE PTR [ebx]
  0061a	8b cf		 mov	 ecx, edi
  0061c	d3 e0		 shl	 eax, cl
  0061e	43		 inc	 ebx
  0061f	8b 4d d4	 mov	 ecx, DWORD PTR tv1674[ebp]
  00622	03 d0		 add	 edx, eax
  00624	83 c7 08	 add	 edi, 8
  00627	89 55 fc	 mov	 DWORD PTR _hold$1$[ebp], edx
  0062a	4e		 dec	 esi
  0062b	89 5d f0	 mov	 DWORD PTR _next$5$[ebp], ebx
  0062e	89 5d f8	 mov	 DWORD PTR _next$[ebp], ebx
  00631	8d 41 07	 lea	 eax, DWORD PTR [ecx+7]
  00634	3b f8		 cmp	 edi, eax
  00636	72 be		 jb	 SHORT $LL153@inflateBac
$LN155@inflateBac:

; 431  :                         DROPBITS(here.bits);

  00638	d3 ea		 shr	 edx, cl

; 432  :                         len = 0;
; 433  :                         copy = 11 + BITS(7);

  0063a	8b c2		 mov	 eax, edx
  0063c	83 e0 7f	 and	 eax, 127		; 0000007fH
  0063f	83 c0 0b	 add	 eax, 11			; 0000000bH

; 434  :                         DROPBITS(7);

  00642	c1 ea 07	 shr	 edx, 7
  00645	89 45 e0	 mov	 DWORD PTR _copy$4$[ebp], eax
  00648	b8 f9 ff ff ff	 mov	 eax, -7			; fffffff9H
$LN496@inflateBac:
  0064d	2b c1		 sub	 eax, ecx
  0064f	89 55 fc	 mov	 DWORD PTR _hold$1$[ebp], edx
  00652	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  00655	03 f8		 add	 edi, eax
  00657	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _len$1$[ebp], 0
$LN495@inflateBac:

; 435  :                     }
; 436  :                     if (state->have + copy > state->nlen + state->ndist) {

  0065e	8b 4a 64	 mov	 ecx, DWORD PTR [edx+100]
  00661	8b 42 68	 mov	 eax, DWORD PTR [edx+104]
  00664	03 4a 60	 add	 ecx, DWORD PTR [edx+96]
  00667	03 45 e0	 add	 eax, DWORD PTR _copy$4$[ebp]
  0066a	89 7d ec	 mov	 DWORD PTR _bits$1$[ebp], edi
  0066d	3b c1		 cmp	 eax, ecx
  0066f	77 5a		 ja	 SHORT $LN374@inflateBac

; 437  :                         strm->msg = (char *)"invalid bit length repeat";
; 438  :                         state->mode = BAD;
; 439  :                         break;
; 440  :                     }
; 441  :                     while (copy--)

  00671	8b 4d e0	 mov	 ecx, DWORD PTR _copy$4$[ebp]
  00674	85 c9		 test	 ecx, ecx
  00676	74 1c		 je	 SHORT $LN400@inflateBac
  00678	8b 5d dc	 mov	 ebx, DWORD PTR _len$1$[ebp]
  0067b	eb 03 8d 49 00	 npad	 5
$LL136@inflateBac:

; 442  :                         state->lens[state->have++] = (unsigned short)len;

  00680	8b 42 68	 mov	 eax, DWORD PTR [edx+104]
  00683	66 89 5c 42 70	 mov	 WORD PTR [edx+eax*2+112], bx
  00688	ff 42 68	 inc	 DWORD PTR [edx+104]
  0068b	49		 dec	 ecx
  0068c	75 f2		 jne	 SHORT $LL136@inflateBac
$LN494@inflateBac:

; 437  :                         strm->msg = (char *)"invalid bit length repeat";
; 438  :                         state->mode = BAD;
; 439  :                         break;
; 440  :                     }
; 441  :                     while (copy--)

  0068e	8b 5d f8	 mov	 ebx, DWORD PTR _next$[ebp]
  00691	89 5d f0	 mov	 DWORD PTR _next$5$[ebp], ebx
$LN400@inflateBac:

; 394  :             }
; 395  :             Tracev((stderr, "inflate:       code lengths ok\n"));
; 396  : 
; 397  :             /* get length and distance code code lengths */
; 398  :             state->have = 0;
; 399  :             while (state->have < state->nlen + state->ndist) {

  00694	8b 42 64	 mov	 eax, DWORD PTR [edx+100]
  00697	03 42 60	 add	 eax, DWORD PTR [edx+96]
  0069a	39 42 68	 cmp	 DWORD PTR [edx+104], eax
  0069d	0f 82 7d fd ff
	ff		 jb	 $LL217@inflateBac
$LN216@inflateBac:

; 443  :                 }
; 444  :             }
; 445  : 
; 446  :             /* handle error breaks in while */
; 447  :             if (state->mode == BAD) break;

  006a3	83 3a 1d	 cmp	 DWORD PTR [edx], 29	; 0000001dH
  006a6	0f 84 61 06 00
	00		 je	 $LN484@inflateBac

; 448  : 
; 449  :             /* check for end-of-block code (better have one) */
; 450  :             if (state->lens[256] == 0) {

  006ac	66 83 ba 70 02
	00 00 00	 cmp	 WORD PTR [edx+624], 0
  006b4	75 2a		 jne	 SHORT $LN133@inflateBac

; 451  :                 strm->msg = (char *)"invalid code -- missing end-of-block";

  006b6	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  006b9	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0CF@DGDMADCD@invalid?5code?5?9?9?5missing?5end?9of?9b@

; 452  :                 state->mode = BAD;

  006c0	c7 02 1d 00 00
	00		 mov	 DWORD PTR [edx], 29	; 0000001dH

; 453  :                 break;

  006c6	e9 3c 06 00 00	 jmp	 $LN497@inflateBac
$LN374@inflateBac:

; 414  :                             strm->msg = (char *)"invalid bit length repeat";

  006cb	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  006ce	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BK@BMMPFBBH@invalid?5bit?5length?5repeat?$AA@

; 415  :                             state->mode = BAD;

  006d5	c7 02 1d 00 00
	00		 mov	 DWORD PTR [edx], 29	; 0000001dH

; 416  :                             break;

  006db	e9 27 06 00 00	 jmp	 $LN497@inflateBac
$LN133@inflateBac:

; 454  :             }
; 455  : 
; 456  :             /* build code tables -- note: do not change the lenbits or distbits
; 457  :                values here (9 and 6) without reading the comments in inftrees.h
; 458  :                concerning the ENOUGH constants, which depend on those values */
; 459  :             state->next = state->codes;

  006e0	8d 82 30 05 00
	00		 lea	 eax, DWORD PTR [edx+1328]

; 460  :             state->lencode = (code const FAR *)(state->next);
; 461  :             state->lenbits = 9;

  006e6	c7 42 54 09 00
	00 00		 mov	 DWORD PTR [edx+84], 9
  006ed	8d 5a 6c	 lea	 ebx, DWORD PTR [edx+108]
  006f0	89 42 4c	 mov	 DWORD PTR [edx+76], eax

; 462  :             ret = inflate_table(LENS, state->lens, state->nlen, &(state->next),
; 463  :                                 &(state->lenbits), state->work);

  006f3	8d 8a f0 02 00
	00		 lea	 ecx, DWORD PTR [edx+752]
  006f9	89 03		 mov	 DWORD PTR [ebx], eax
  006fb	51		 push	 ecx
  006fc	8d 42 54	 lea	 eax, DWORD PTR [edx+84]
  006ff	b9 01 00 00 00	 mov	 ecx, 1
  00704	50		 push	 eax
  00705	53		 push	 ebx
  00706	ff 72 60	 push	 DWORD PTR [edx+96]
  00709	8b 55 d0	 mov	 edx, DWORD PTR tv1685[ebp]
  0070c	e8 00 00 00 00	 call	 _inflate_table
  00711	83 c4 10	 add	 esp, 16			; 00000010H

; 464  :             if (ret) {

  00714	85 c0		 test	 eax, eax
  00716	74 18		 je	 SHORT $LN132@inflateBac

; 465  :                 strm->msg = (char *)"invalid literal/lengths set";

  00718	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]

; 466  :                 state->mode = BAD;

  0071b	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  0071e	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BM@IIMGAINC@invalid?5literal?1lengths?5set?$AA@
  00725	c7 02 1d 00 00
	00		 mov	 DWORD PTR [edx], 29	; 0000001dH

; 467  :                 break;

  0072b	e9 d7 05 00 00	 jmp	 $LN497@inflateBac
$LN132@inflateBac:

; 468  :             }
; 469  :             state->distcode = (code const FAR *)(state->next);

  00730	8b 4d f4	 mov	 ecx, DWORD PTR _state$1$[ebp]
  00733	8b 03		 mov	 eax, DWORD PTR [ebx]

; 470  :             state->distbits = 6;

  00735	c7 41 58 06 00
	00 00		 mov	 DWORD PTR [ecx+88], 6

; 471  :             ret = inflate_table(DISTS, state->lens + state->nlen, state->ndist,
; 472  :                             &(state->next), &(state->distbits), state->work);

  0073c	8d 91 f0 02 00
	00		 lea	 edx, DWORD PTR [ecx+752]
  00742	89 41 50	 mov	 DWORD PTR [ecx+80], eax
  00745	8d 41 58	 lea	 eax, DWORD PTR [ecx+88]
  00748	52		 push	 edx
  00749	50		 push	 eax
  0074a	8b 41 60	 mov	 eax, DWORD PTR [ecx+96]
  0074d	53		 push	 ebx
  0074e	ff 71 64	 push	 DWORD PTR [ecx+100]
  00751	83 c1 70	 add	 ecx, 112		; 00000070H
  00754	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00757	b9 02 00 00 00	 mov	 ecx, 2
  0075c	e8 00 00 00 00	 call	 _inflate_table

; 475  :                 state->mode = BAD;

  00761	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  00764	83 c4 10	 add	 esp, 16			; 00000010H

; 476  :                 break;

  00767	8b 4d fc	 mov	 ecx, DWORD PTR _hold$1$[ebp]
  0076a	85 c0		 test	 eax, eax
  0076c	74 1b		 je	 SHORT $LN131@inflateBac

; 473  :             if (ret) {
; 474  :                 strm->msg = (char *)"invalid distances set";

  0076e	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00771	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BG@GMDFCBGP@invalid?5distances?5set?$AA@

; 475  :                 state->mode = BAD;

  00778	c7 02 1d 00 00
	00		 mov	 DWORD PTR [edx], 29	; 0000001dH

; 476  :                 break;

  0077e	8b 5d f8	 mov	 ebx, DWORD PTR _next$[ebp]
  00781	89 5d f0	 mov	 DWORD PTR _next$5$[ebp], ebx
  00784	e9 87 05 00 00	 jmp	 $LN387@inflateBac
$LN131@inflateBac:

; 477  :             }
; 478  :             Tracev((stderr, "inflate:       codes ok\n"));
; 479  :             state->mode = LEN;

  00789	c7 02 14 00 00
	00		 mov	 DWORD PTR [edx], 20	; 00000014H
  0078f	8b 5d f8	 mov	 ebx, DWORD PTR _next$[ebp]
  00792	89 5d f0	 mov	 DWORD PTR _next$5$[ebp], ebx
$LN130@inflateBac:

; 480  : 
; 481  :         case LEN:
; 482  :             /* use inflate_fast() if we have enough input and output */
; 483  :             if (have >= 6 && left >= 258) {

  00795	83 fe 06	 cmp	 esi, 6
  00798	0f 82 8b 00 00
	00		 jb	 $LN353@inflateBac
  0079e	81 7d e8 02 01
	00 00		 cmp	 DWORD PTR _left$1$[ebp], 258 ; 00000102H
  007a5	0f 82 7e 00 00
	00		 jb	 $LN353@inflateBac

; 484  :                 RESTORE();

  007ab	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  007ae	8b 45 e4	 mov	 eax, DWORD PTR _put$1$[ebp]
  007b1	89 42 0c	 mov	 DWORD PTR [edx+12], eax
  007b4	8b 45 e8	 mov	 eax, DWORD PTR _left$1$[ebp]
  007b7	89 42 10	 mov	 DWORD PTR [edx+16], eax
  007ba	8b c2		 mov	 eax, edx
  007bc	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  007bf	89 18		 mov	 DWORD PTR [eax], ebx
  007c1	8b d8		 mov	 ebx, eax
  007c3	89 73 04	 mov	 DWORD PTR [ebx+4], esi
  007c6	89 4a 38	 mov	 DWORD PTR [edx+56], ecx

; 485  :                 if (state->whave < state->wsize)

  007c9	8b 4a 28	 mov	 ecx, DWORD PTR [edx+40]
  007cc	89 7a 3c	 mov	 DWORD PTR [edx+60], edi
  007cf	39 4a 2c	 cmp	 DWORD PTR [edx+44], ecx
  007d2	73 08		 jae	 SHORT $LN125@inflateBac

; 486  :                     state->whave = state->wsize - left;

  007d4	8b c1		 mov	 eax, ecx
  007d6	2b 45 e8	 sub	 eax, DWORD PTR _left$1$[ebp]
  007d9	89 42 2c	 mov	 DWORD PTR [edx+44], eax
$LN125@inflateBac:

; 487  :                 inflate_fast(strm, state->wsize);

  007dc	51		 push	 ecx
  007dd	53		 push	 ebx
  007de	e8 00 00 00 00	 call	 _inflate_fast

; 488  :                 LOAD();

  007e3	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  007e6	83 c4 08	 add	 esp, 8
  007e9	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  007ec	89 45 e4	 mov	 DWORD PTR _put$1$[ebp], eax
  007ef	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  007f2	8b 1b		 mov	 ebx, DWORD PTR [ebx]
  007f4	89 45 e8	 mov	 DWORD PTR _left$1$[ebp], eax
  007f7	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  007fa	89 5d f8	 mov	 DWORD PTR _next$[ebp], ebx
  007fd	8b 4a 38	 mov	 ecx, DWORD PTR [edx+56]
  00800	8b 7a 3c	 mov	 edi, DWORD PTR [edx+60]
  00803	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  00806	89 5d f0	 mov	 DWORD PTR _next$5$[ebp], ebx
  00809	89 4d fc	 mov	 DWORD PTR _hold$1$[ebp], ecx
  0080c	89 7d ec	 mov	 DWORD PTR _bits$1$[ebp], edi

; 489  :                 break;

  0080f	e9 fc 04 00 00	 jmp	 $LN387@inflateBac
$LN239@inflateBac:

; 369  :                 strm->msg = (char *)"too many length or distance symbols";

  00814	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00817	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0CE@GMIGFPBB@too?5many?5length?5or?5distance?5symb@

; 370  :                 state->mode = BAD;

  0081e	c7 02 1d 00 00
	00		 mov	 DWORD PTR [edx], 29	; 0000001dH

; 371  :                 break;

  00824	e9 de 04 00 00	 jmp	 $LN497@inflateBac
$LN353@inflateBac:

; 490  :             }
; 491  : 
; 492  :             /* get a literal, length, or end-of-block code */
; 493  :             for (;;) {
; 494  :                 here = state->lencode[BITS(state->lenbits)];

  00829	8b 45 f4	 mov	 eax, DWORD PTR _state$1$[ebp]
  0082c	ba 01 00 00 00	 mov	 edx, 1
  00831	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00834	8b 40 4c	 mov	 eax, DWORD PTR [eax+76]
  00837	d3 e2		 shl	 edx, cl
  00839	4a		 dec	 edx
  0083a	23 55 fc	 and	 edx, DWORD PTR _hold$1$[ebp]
  0083d	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]

; 495  :                 if ((unsigned)(here.bits) <= bits) break;

  00840	8b c8		 mov	 ecx, eax
  00842	c1 e9 08	 shr	 ecx, 8
  00845	0f b6 c9	 movzx	 ecx, cl
  00848	3b cf		 cmp	 ecx, edi
  0084a	76 5d		 jbe	 SHORT $LN376@inflateBac
  0084c	8d 64 24 00	 npad	 4
$LL121@inflateBac:

; 496  :                 PULLBYTE();

  00850	85 f6		 test	 esi, esi
  00852	75 1a		 jne	 SHORT $LN114@inflateBac
  00854	8d 45 f8	 lea	 eax, DWORD PTR _next$[ebp]
  00857	50		 push	 eax
  00858	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  0085b	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  0085e	8b f0		 mov	 esi, eax
  00860	83 c4 08	 add	 esp, 8
  00863	85 f6		 test	 esi, esi
  00865	0f 84 ce 04 00
	00		 je	 $LN363@inflateBac
  0086b	8b 5d f8	 mov	 ebx, DWORD PTR _next$[ebp]
$LN114@inflateBac:
  0086e	0f b6 03	 movzx	 eax, BYTE PTR [ebx]
  00871	8b cf		 mov	 ecx, edi
  00873	d3 e0		 shl	 eax, cl
  00875	43		 inc	 ebx
  00876	01 45 fc	 add	 DWORD PTR _hold$1$[ebp], eax
  00879	ba 01 00 00 00	 mov	 edx, 1
  0087e	8b 45 f4	 mov	 eax, DWORD PTR _state$1$[ebp]
  00881	83 c7 08	 add	 edi, 8
  00884	89 5d f8	 mov	 DWORD PTR _next$[ebp], ebx
  00887	4e		 dec	 esi
  00888	89 5d f0	 mov	 DWORD PTR _next$5$[ebp], ebx
  0088b	89 7d ec	 mov	 DWORD PTR _bits$1$[ebp], edi
  0088e	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00891	8b 40 4c	 mov	 eax, DWORD PTR [eax+76]
  00894	d3 e2		 shl	 edx, cl
  00896	4a		 dec	 edx
  00897	23 55 fc	 and	 edx, DWORD PTR _hold$1$[ebp]
  0089a	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]
  0089d	8b c8		 mov	 ecx, eax
  0089f	c1 e9 08	 shr	 ecx, 8
  008a2	0f b6 c9	 movzx	 ecx, cl
  008a5	3b cf		 cmp	 ecx, edi
  008a7	77 a7		 ja	 SHORT $LL121@inflateBac
$LN376@inflateBac:

; 497  :             }
; 498  :             if (here.op && (here.op & 0xf0) == 0) {

  008a9	84 c0		 test	 al, al
  008ab	0f 84 d7 00 00
	00		 je	 $LN482@inflateBac
  008b1	a8 f0		 test	 al, 240			; 000000f0H
  008b3	0f 85 cf 00 00
	00		 jne	 $LN482@inflateBac

; 499  :                 last = here;
; 500  :                 for (;;) {
; 501  :                     here = state->lencode[last.val +
; 502  :                             (BITS(last.bits + last.op) >> last.bits)];

  008b9	8b c8		 mov	 ecx, eax
  008bb	bb 01 00 00 00	 mov	 ebx, 1
  008c0	c1 e9 08	 shr	 ecx, 8
  008c3	8b d0		 mov	 edx, eax
  008c5	0f b6 f9	 movzx	 edi, cl
  008c8	89 4d d0	 mov	 DWORD PTR tv1684[ebp], ecx
  008cb	0f b6 c8	 movzx	 ecx, al
  008ce	03 cf		 add	 ecx, edi
  008d0	c1 e8 10	 shr	 eax, 16			; 00000010H
  008d3	d3 e3		 shl	 ebx, cl
  008d5	8b cf		 mov	 ecx, edi
  008d7	4b		 dec	 ebx
  008d8	89 55 e0	 mov	 DWORD PTR _last$[ebp], edx
  008db	23 5d fc	 and	 ebx, DWORD PTR _hold$1$[ebp]
  008de	d3 eb		 shr	 ebx, cl
  008e0	03 d8		 add	 ebx, eax
  008e2	8b 45 f4	 mov	 eax, DWORD PTR _state$1$[ebp]
  008e5	8b 40 4c	 mov	 eax, DWORD PTR [eax+76]
  008e8	8b 04 98	 mov	 eax, DWORD PTR [eax+ebx*4]

; 503  :                     if ((unsigned)(last.bits + here.bits) <= bits) break;

  008eb	8b c8		 mov	 ecx, eax
  008ed	c1 e9 08	 shr	 ecx, 8
  008f0	0f b6 f9	 movzx	 edi, cl
  008f3	8b 4d d0	 mov	 ecx, DWORD PTR tv1684[ebp]
  008f6	0f b6 c9	 movzx	 ecx, cl
  008f9	03 f9		 add	 edi, ecx
  008fb	3b 7d ec	 cmp	 edi, DWORD PTR _bits$1$[ebp]
  008fe	8b 7d ec	 mov	 edi, DWORD PTR _bits$1$[ebp]
  00901	0f 86 75 00 00
	00		 jbe	 $LN98@inflateBac
$LL109@inflateBac:

; 504  :                     PULLBYTE();

  00907	85 f6		 test	 esi, esi
  00909	75 1f		 jne	 SHORT $LN478@inflateBac
  0090b	8d 45 f8	 lea	 eax, DWORD PTR _next$[ebp]
  0090e	50		 push	 eax
  0090f	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  00912	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00915	8b f0		 mov	 esi, eax
  00917	83 c4 08	 add	 esp, 8
  0091a	85 f6		 test	 esi, esi
  0091c	0f 84 17 04 00
	00		 je	 $LN363@inflateBac
  00922	8b 5d f8	 mov	 ebx, DWORD PTR _next$[ebp]
  00925	8b 55 e0	 mov	 edx, DWORD PTR _last$[ebp]
  00928	eb 03		 jmp	 SHORT $LN102@inflateBac
$LN478@inflateBac:
  0092a	8b 5d f0	 mov	 ebx, DWORD PTR _next$5$[ebp]
$LN102@inflateBac:
  0092d	0f b6 03	 movzx	 eax, BYTE PTR [ebx]
  00930	8b cf		 mov	 ecx, edi
  00932	d3 e0		 shl	 eax, cl
  00934	83 c7 08	 add	 edi, 8
  00937	01 45 fc	 add	 DWORD PTR _hold$1$[ebp], eax
  0093a	43		 inc	 ebx
  0093b	0f b7 45 e2	 movzx	 eax, WORD PTR _last$[ebp+2]
  0093f	4e		 dec	 esi
  00940	89 7d ec	 mov	 DWORD PTR _bits$1$[ebp], edi
  00943	bf 01 00 00 00	 mov	 edi, 1
  00948	89 5d f8	 mov	 DWORD PTR _next$[ebp], ebx
  0094b	89 5d f0	 mov	 DWORD PTR _next$5$[ebp], ebx
  0094e	0f b6 de	 movzx	 ebx, dh
  00951	0f b6 ca	 movzx	 ecx, dl
  00954	03 cb		 add	 ecx, ebx
  00956	d3 e7		 shl	 edi, cl
  00958	8b cb		 mov	 ecx, ebx
  0095a	4f		 dec	 edi
  0095b	23 7d fc	 and	 edi, DWORD PTR _hold$1$[ebp]
  0095e	d3 ef		 shr	 edi, cl
  00960	03 f8		 add	 edi, eax
  00962	8b 45 f4	 mov	 eax, DWORD PTR _state$1$[ebp]
  00965	8b 40 4c	 mov	 eax, DWORD PTR [eax+76]
  00968	8b 04 b8	 mov	 eax, DWORD PTR [eax+edi*4]
  0096b	8b c8		 mov	 ecx, eax
  0096d	8b 7d ec	 mov	 edi, DWORD PTR _bits$1$[ebp]
  00970	c1 e9 08	 shr	 ecx, 8
  00973	0f b6 c9	 movzx	 ecx, cl
  00976	03 cb		 add	 ecx, ebx
  00978	3b cf		 cmp	 ecx, edi
  0097a	77 8b		 ja	 SHORT $LL109@inflateBac
$LN98@inflateBac:

; 505  :                 }
; 506  :                 DROPBITS(last.bits);

  0097c	8b 5d fc	 mov	 ebx, DWORD PTR _hold$1$[ebp]
  0097f	0f b6 ce	 movzx	 ecx, dh
  00982	d3 eb		 shr	 ebx, cl
  00984	2b f9		 sub	 edi, ecx
  00986	eb 03		 jmp	 SHORT $LN96@inflateBac
$LN482@inflateBac:
  00988	8b 5d fc	 mov	 ebx, DWORD PTR _hold$1$[ebp]
$LN96@inflateBac:

; 507  :             }
; 508  :             DROPBITS(here.bits);
; 509  :             state->length = (unsigned)here.val;

  0098b	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  0098e	8b c8		 mov	 ecx, eax
  00990	c1 e9 08	 shr	 ecx, 8
  00993	0f b6 c9	 movzx	 ecx, cl
  00996	d3 eb		 shr	 ebx, cl
  00998	2b f9		 sub	 edi, ecx
  0099a	8b c8		 mov	 ecx, eax
  0099c	89 5d fc	 mov	 DWORD PTR _hold$1$[ebp], ebx
  0099f	c1 e9 10	 shr	 ecx, 16			; 00000010H
  009a2	89 7d ec	 mov	 DWORD PTR _bits$1$[ebp], edi
  009a5	89 4a 40	 mov	 DWORD PTR [edx+64], ecx

; 510  : 
; 511  :             /* process literal */
; 512  :             if (here.op == 0) {

  009a8	84 c0		 test	 al, al
  009aa	75 44		 jne	 SHORT $LN92@inflateBac

; 513  :                 Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
; 514  :                         "inflate:         literal '%c'\n" :
; 515  :                         "inflate:         literal 0x%02x\n", here.val));
; 516  :                 ROOM();

  009ac	83 7d e8 00	 cmp	 DWORD PTR _left$1$[ebp], 0
  009b0	75 24		 jne	 SHORT $LN489@inflateBac
  009b2	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  009b5	8b 5a 34	 mov	 ebx, DWORD PTR [edx+52]
  009b8	50		 push	 eax
  009b9	53		 push	 ebx
  009ba	ff 75 18	 push	 DWORD PTR _out_desc$[ebp]
  009bd	89 45 e8	 mov	 DWORD PTR _left$1$[ebp], eax
  009c0	89 42 2c	 mov	 DWORD PTR [edx+44], eax
  009c3	ff 55 14	 call	 DWORD PTR _out$[ebp]
  009c6	83 c4 0c	 add	 esp, 12			; 0000000cH
  009c9	85 c0		 test	 eax, eax
  009cb	0f 85 82 03 00
	00		 jne	 $LN366@inflateBac
  009d1	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  009d4	eb 03		 jmp	 SHORT $LN90@inflateBac
$LN489@inflateBac:
  009d6	8b 5d e4	 mov	 ebx, DWORD PTR _put$1$[ebp]
$LN90@inflateBac:

; 517  :                 *put++ = (unsigned char)(state->length);

  009d9	8a 42 40	 mov	 al, BYTE PTR [edx+64]
  009dc	88 03		 mov	 BYTE PTR [ebx], al
  009de	43		 inc	 ebx

; 518  :                 left--;

  009df	ff 4d e8	 dec	 DWORD PTR _left$1$[ebp]
  009e2	89 5d e4	 mov	 DWORD PTR _put$1$[ebp], ebx

; 519  :                 state->mode = LEN;

  009e5	c7 02 14 00 00
	00		 mov	 DWORD PTR [edx], 20	; 00000014H

; 520  :                 break;

  009eb	e9 17 03 00 00	 jmp	 $LN497@inflateBac
$LN92@inflateBac:

; 521  :             }
; 522  : 
; 523  :             /* process end of block */
; 524  :             if (here.op & 32) {

  009f0	a8 20		 test	 al, 32			; 00000020H
  009f2	74 0b		 je	 SHORT $LN86@inflateBac

; 525  :                 Tracevv((stderr, "inflate:         end of block\n"));
; 526  :                 state->mode = TYPE;

  009f4	c7 02 0b 00 00
	00		 mov	 DWORD PTR [edx], 11	; 0000000bH

; 527  :                 break;

  009fa	e9 08 03 00 00	 jmp	 $LN497@inflateBac
$LN86@inflateBac:

; 528  :             }
; 529  : 
; 530  :             /* invalid code */
; 531  :             if (here.op & 64) {

  009ff	a8 40		 test	 al, 64			; 00000040H
  00a01	74 15		 je	 SHORT $LN85@inflateBac

; 532  :                 strm->msg = (char *)"invalid literal/length code";

  00a03	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00a06	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BM@FFFLPBBC@invalid?5literal?1length?5code?$AA@

; 533  :                 state->mode = BAD;

  00a0d	c7 02 1d 00 00
	00		 mov	 DWORD PTR [edx], 29	; 0000001dH

; 534  :                 break;

  00a13	e9 ef 02 00 00	 jmp	 $LN497@inflateBac
$LN85@inflateBac:

; 535  :             }
; 536  : 
; 537  :             /* length code -- get extra bits, if any */
; 538  :             state->extra = (unsigned)(here.op) & 15;

  00a18	0f b6 c0	 movzx	 eax, al
  00a1b	83 e0 0f	 and	 eax, 15			; 0000000fH
  00a1e	89 42 48	 mov	 DWORD PTR [edx+72], eax

; 539  :             if (state->extra != 0) {

  00a21	74 61		 je	 SHORT $LN68@inflateBac

; 540  :                 NEEDBITS(state->extra);

  00a23	3b f8		 cmp	 edi, eax
  00a25	73 43		 jae	 SHORT $LN82@inflateBac
  00a27	8b 45 f8	 mov	 eax, DWORD PTR _next$[ebp]
  00a2a	8d 9b 00 00 00
	00		 npad	 6
$LL80@inflateBac:
  00a30	85 f6		 test	 esi, esi
  00a32	75 1d		 jne	 SHORT $LN74@inflateBac
  00a34	8d 45 f8	 lea	 eax, DWORD PTR _next$[ebp]
  00a37	50		 push	 eax
  00a38	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  00a3b	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00a3e	8b f0		 mov	 esi, eax
  00a40	83 c4 08	 add	 esp, 8
  00a43	85 f6		 test	 esi, esi
  00a45	0f 84 ee 02 00
	00		 je	 $LN363@inflateBac
  00a4b	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  00a4e	8b 45 f8	 mov	 eax, DWORD PTR _next$[ebp]
$LN74@inflateBac:
  00a51	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00a54	8b cf		 mov	 ecx, edi
  00a56	d3 e0		 shl	 eax, cl
  00a58	83 c7 08	 add	 edi, 8
  00a5b	03 d8		 add	 ebx, eax
  00a5d	4e		 dec	 esi
  00a5e	8b 45 f8	 mov	 eax, DWORD PTR _next$[ebp]
  00a61	40		 inc	 eax
  00a62	89 45 f8	 mov	 DWORD PTR _next$[ebp], eax
  00a65	3b 7a 48	 cmp	 edi, DWORD PTR [edx+72]
  00a68	72 c6		 jb	 SHORT $LL80@inflateBac
$LN82@inflateBac:

; 541  :                 state->length += BITS(state->extra);

  00a6a	8b 4a 48	 mov	 ecx, DWORD PTR [edx+72]
  00a6d	b8 01 00 00 00	 mov	 eax, 1
  00a72	d3 e0		 shl	 eax, cl
  00a74	48		 dec	 eax
  00a75	23 c3		 and	 eax, ebx

; 542  :                 DROPBITS(state->extra);

  00a77	d3 eb		 shr	 ebx, cl
  00a79	01 42 40	 add	 DWORD PTR [edx+64], eax
  00a7c	2b f9		 sub	 edi, ecx
  00a7e	89 5d fc	 mov	 DWORD PTR _hold$1$[ebp], ebx
  00a81	89 7d ec	 mov	 DWORD PTR _bits$1$[ebp], edi
$LN68@inflateBac:

; 543  :             }
; 544  :             Tracevv((stderr, "inflate:         length %u\n", state->length));
; 545  : 
; 546  :             /* get distance code */
; 547  :             for (;;) {
; 548  :                 here = state->distcode[BITS(state->distbits)];

  00a84	8b 5d f4	 mov	 ebx, DWORD PTR _state$1$[ebp]
  00a87	ba 01 00 00 00	 mov	 edx, 1
  00a8c	8b 4b 58	 mov	 ecx, DWORD PTR [ebx+88]
  00a8f	8b 43 50	 mov	 eax, DWORD PTR [ebx+80]
  00a92	d3 e2		 shl	 edx, cl
  00a94	4a		 dec	 edx
  00a95	23 55 fc	 and	 edx, DWORD PTR _hold$1$[ebp]
  00a98	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]

; 549  :                 if ((unsigned)(here.bits) <= bits) break;

  00a9b	8b c8		 mov	 ecx, eax
  00a9d	c1 e9 08	 shr	 ecx, 8
  00aa0	0f b6 c9	 movzx	 ecx, cl
  00aa3	3b cf		 cmp	 ecx, edi
  00aa5	76 53		 jbe	 SHORT $LN471@inflateBac
$LL67@inflateBac:

; 550  :                 PULLBYTE();

  00aa7	85 f6		 test	 esi, esi
  00aa9	75 17		 jne	 SHORT $LN60@inflateBac
  00aab	8d 45 f8	 lea	 eax, DWORD PTR _next$[ebp]
  00aae	50		 push	 eax
  00aaf	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  00ab2	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00ab5	8b f0		 mov	 esi, eax
  00ab7	83 c4 08	 add	 esp, 8
  00aba	85 f6		 test	 esi, esi
  00abc	0f 84 77 02 00
	00		 je	 $LN363@inflateBac
$LN60@inflateBac:
  00ac2	8b 55 f8	 mov	 edx, DWORD PTR _next$[ebp]
  00ac5	8b cf		 mov	 ecx, edi
  00ac7	83 c7 08	 add	 edi, 8
  00aca	4e		 dec	 esi
  00acb	89 7d ec	 mov	 DWORD PTR _bits$1$[ebp], edi
  00ace	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00ad1	42		 inc	 edx
  00ad2	d3 e0		 shl	 eax, cl
  00ad4	01 45 fc	 add	 DWORD PTR _hold$1$[ebp], eax
  00ad7	89 55 f8	 mov	 DWORD PTR _next$[ebp], edx
  00ada	ba 01 00 00 00	 mov	 edx, 1
  00adf	8b 4b 58	 mov	 ecx, DWORD PTR [ebx+88]
  00ae2	8b 43 50	 mov	 eax, DWORD PTR [ebx+80]
  00ae5	d3 e2		 shl	 edx, cl
  00ae7	4a		 dec	 edx
  00ae8	23 55 fc	 and	 edx, DWORD PTR _hold$1$[ebp]
  00aeb	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]
  00aee	8b c8		 mov	 ecx, eax
  00af0	c1 e9 08	 shr	 ecx, 8
  00af3	0f b6 c9	 movzx	 ecx, cl
  00af6	3b cf		 cmp	 ecx, edi
  00af8	77 ad		 ja	 SHORT $LL67@inflateBac
$LN471@inflateBac:

; 551  :             }
; 552  :             if ((here.op & 0xf0) == 0) {

  00afa	a8 f0		 test	 al, 240			; 000000f0H
  00afc	0f 85 c7 00 00
	00		 jne	 $LN483@inflateBac

; 553  :                 last = here;
; 554  :                 for (;;) {
; 555  :                     here = state->distcode[last.val +
; 556  :                             (BITS(last.bits + last.op) >> last.bits)];

  00b02	8b c8		 mov	 ecx, eax
  00b04	bb 01 00 00 00	 mov	 ebx, 1
  00b09	c1 e9 08	 shr	 ecx, 8
  00b0c	8b d0		 mov	 edx, eax
  00b0e	0f b6 f9	 movzx	 edi, cl
  00b11	89 4d d0	 mov	 DWORD PTR tv1683[ebp], ecx
  00b14	0f b6 c8	 movzx	 ecx, al
  00b17	03 cf		 add	 ecx, edi
  00b19	c1 e8 10	 shr	 eax, 16			; 00000010H
  00b1c	d3 e3		 shl	 ebx, cl
  00b1e	8b cf		 mov	 ecx, edi
  00b20	4b		 dec	 ebx
  00b21	89 55 e0	 mov	 DWORD PTR _last$[ebp], edx
  00b24	23 5d fc	 and	 ebx, DWORD PTR _hold$1$[ebp]
  00b27	d3 eb		 shr	 ebx, cl
  00b29	03 d8		 add	 ebx, eax
  00b2b	8b 45 f4	 mov	 eax, DWORD PTR _state$1$[ebp]
  00b2e	8b 40 50	 mov	 eax, DWORD PTR [eax+80]
  00b31	8b 04 98	 mov	 eax, DWORD PTR [eax+ebx*4]

; 557  :                     if ((unsigned)(last.bits + here.bits) <= bits) break;

  00b34	8b c8		 mov	 ecx, eax
  00b36	c1 e9 08	 shr	 ecx, 8
  00b39	0f b6 f9	 movzx	 edi, cl
  00b3c	8b 4d d0	 mov	 ecx, DWORD PTR tv1683[ebp]
  00b3f	0f b6 c9	 movzx	 ecx, cl
  00b42	03 f9		 add	 edi, ecx
  00b44	3b 7d ec	 cmp	 edi, DWORD PTR _bits$1$[ebp]
  00b47	8b 7d ec	 mov	 edi, DWORD PTR _bits$1$[ebp]
  00b4a	76 71		 jbe	 SHORT $LN44@inflateBac
  00b4c	8d 64 24 00	 npad	 4
$LL55@inflateBac:

; 558  :                     PULLBYTE();

  00b50	85 f6		 test	 esi, esi
  00b52	75 1a		 jne	 SHORT $LN48@inflateBac
  00b54	8d 45 f8	 lea	 eax, DWORD PTR _next$[ebp]
  00b57	50		 push	 eax
  00b58	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  00b5b	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00b5e	8b f0		 mov	 esi, eax
  00b60	83 c4 08	 add	 esp, 8
  00b63	85 f6		 test	 esi, esi
  00b65	0f 84 ce 01 00
	00		 je	 $LN363@inflateBac
  00b6b	8b 55 e0	 mov	 edx, DWORD PTR _last$[ebp]
$LN48@inflateBac:
  00b6e	8b 5d f8	 mov	 ebx, DWORD PTR _next$[ebp]
  00b71	8b cf		 mov	 ecx, edi
  00b73	83 c7 08	 add	 edi, 8
  00b76	4e		 dec	 esi
  00b77	89 7d ec	 mov	 DWORD PTR _bits$1$[ebp], edi
  00b7a	bf 01 00 00 00	 mov	 edi, 1
  00b7f	0f b6 03	 movzx	 eax, BYTE PTR [ebx]
  00b82	43		 inc	 ebx
  00b83	d3 e0		 shl	 eax, cl
  00b85	01 45 fc	 add	 DWORD PTR _hold$1$[ebp], eax
  00b88	0f b7 45 e2	 movzx	 eax, WORD PTR _last$[ebp+2]
  00b8c	89 5d f8	 mov	 DWORD PTR _next$[ebp], ebx
  00b8f	0f b6 de	 movzx	 ebx, dh
  00b92	0f b6 ca	 movzx	 ecx, dl
  00b95	03 cb		 add	 ecx, ebx
  00b97	d3 e7		 shl	 edi, cl
  00b99	8b cb		 mov	 ecx, ebx
  00b9b	4f		 dec	 edi
  00b9c	23 7d fc	 and	 edi, DWORD PTR _hold$1$[ebp]
  00b9f	d3 ef		 shr	 edi, cl
  00ba1	03 f8		 add	 edi, eax
  00ba3	8b 45 f4	 mov	 eax, DWORD PTR _state$1$[ebp]
  00ba6	8b 40 50	 mov	 eax, DWORD PTR [eax+80]
  00ba9	8b 04 b8	 mov	 eax, DWORD PTR [eax+edi*4]
  00bac	8b c8		 mov	 ecx, eax
  00bae	8b 7d ec	 mov	 edi, DWORD PTR _bits$1$[ebp]
  00bb1	c1 e9 08	 shr	 ecx, 8
  00bb4	0f b6 c9	 movzx	 ecx, cl
  00bb7	03 cb		 add	 ecx, ebx
  00bb9	3b cf		 cmp	 ecx, edi
  00bbb	77 93		 ja	 SHORT $LL55@inflateBac
$LN44@inflateBac:

; 559  :                 }
; 560  :                 DROPBITS(last.bits);

  00bbd	8b 5d fc	 mov	 ebx, DWORD PTR _hold$1$[ebp]
  00bc0	0f b6 ce	 movzx	 ecx, dh
  00bc3	d3 eb		 shr	 ebx, cl
  00bc5	2b f9		 sub	 edi, ecx
  00bc7	eb 03		 jmp	 SHORT $LN42@inflateBac
$LN483@inflateBac:
  00bc9	8b 5d fc	 mov	 ebx, DWORD PTR _hold$1$[ebp]
$LN42@inflateBac:

; 565  :                 state->mode = BAD;

  00bcc	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  00bcf	8b c8		 mov	 ecx, eax
  00bd1	c1 e9 08	 shr	 ecx, 8
  00bd4	0f b6 c9	 movzx	 ecx, cl
  00bd7	d3 eb		 shr	 ebx, cl
  00bd9	2b f9		 sub	 edi, ecx
  00bdb	89 5d fc	 mov	 DWORD PTR _hold$1$[ebp], ebx
  00bde	89 7d ec	 mov	 DWORD PTR _bits$1$[ebp], edi
  00be1	a8 40		 test	 al, 64			; 00000040H
  00be3	74 15		 je	 SHORT $LN38@inflateBac

; 561  :             }
; 562  :             DROPBITS(here.bits);
; 563  :             if (here.op & 64) {
; 564  :                 strm->msg = (char *)"invalid distance code";

  00be5	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00be8	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BG@LBKINIKP@invalid?5distance?5code?$AA@

; 565  :                 state->mode = BAD;

  00bef	c7 02 1d 00 00
	00		 mov	 DWORD PTR [edx], 29	; 0000001dH

; 566  :                 break;

  00bf5	e9 0d 01 00 00	 jmp	 $LN497@inflateBac
$LN38@inflateBac:

; 567  :             }
; 568  :             state->offset = (unsigned)here.val;

  00bfa	8b c8		 mov	 ecx, eax

; 569  : 
; 570  :             /* get distance extra bits, if any */
; 571  :             state->extra = (unsigned)(here.op) & 15;

  00bfc	0f b6 c0	 movzx	 eax, al
  00bff	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00c02	83 e0 0f	 and	 eax, 15			; 0000000fH
  00c05	89 4a 44	 mov	 DWORD PTR [edx+68], ecx
  00c08	89 42 48	 mov	 DWORD PTR [edx+72], eax

; 572  :             if (state->extra != 0) {

  00c0b	74 5b		 je	 SHORT $LN21@inflateBac

; 573  :                 NEEDBITS(state->extra);

  00c0d	3b f8		 cmp	 edi, eax
  00c0f	73 3d		 jae	 SHORT $LN35@inflateBac
  00c11	8b 45 f8	 mov	 eax, DWORD PTR _next$[ebp]
$LL33@inflateBac:
  00c14	85 f6		 test	 esi, esi
  00c16	75 1d		 jne	 SHORT $LN27@inflateBac
  00c18	8d 45 f8	 lea	 eax, DWORD PTR _next$[ebp]
  00c1b	50		 push	 eax
  00c1c	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  00c1f	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00c22	8b f0		 mov	 esi, eax
  00c24	83 c4 08	 add	 esp, 8
  00c27	85 f6		 test	 esi, esi
  00c29	0f 84 0a 01 00
	00		 je	 $LN363@inflateBac
  00c2f	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  00c32	8b 45 f8	 mov	 eax, DWORD PTR _next$[ebp]
$LN27@inflateBac:
  00c35	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00c38	8b cf		 mov	 ecx, edi
  00c3a	d3 e0		 shl	 eax, cl
  00c3c	83 c7 08	 add	 edi, 8
  00c3f	03 d8		 add	 ebx, eax
  00c41	4e		 dec	 esi
  00c42	8b 45 f8	 mov	 eax, DWORD PTR _next$[ebp]
  00c45	40		 inc	 eax
  00c46	89 45 f8	 mov	 DWORD PTR _next$[ebp], eax
  00c49	3b 7a 48	 cmp	 edi, DWORD PTR [edx+72]
  00c4c	72 c6		 jb	 SHORT $LL33@inflateBac
$LN35@inflateBac:

; 574  :                 state->offset += BITS(state->extra);

  00c4e	8b 4a 48	 mov	 ecx, DWORD PTR [edx+72]
  00c51	b8 01 00 00 00	 mov	 eax, 1
  00c56	d3 e0		 shl	 eax, cl
  00c58	48		 dec	 eax
  00c59	23 c3		 and	 eax, ebx

; 575  :                 DROPBITS(state->extra);

  00c5b	d3 eb		 shr	 ebx, cl
  00c5d	01 42 44	 add	 DWORD PTR [edx+68], eax
  00c60	2b f9		 sub	 edi, ecx
  00c62	89 5d fc	 mov	 DWORD PTR _hold$1$[ebp], ebx
  00c65	89 7d ec	 mov	 DWORD PTR _bits$1$[ebp], edi
$LN21@inflateBac:

; 576  :             }
; 577  :             if (state->offset > state->wsize - (state->whave < state->wsize ?
; 578  :                                                 left : 0)) {

  00c68	8b 4a 28	 mov	 ecx, DWORD PTR [edx+40]
  00c6b	39 4a 2c	 cmp	 DWORD PTR [edx+44], ecx
  00c6e	8b 5d e8	 mov	 ebx, DWORD PTR _left$1$[ebp]
  00c71	1b c0		 sbb	 eax, eax
  00c73	23 c3		 and	 eax, ebx
  00c75	2b c8		 sub	 ecx, eax
  00c77	39 4a 44	 cmp	 DWORD PTR [edx+68], ecx
  00c7a	76 15		 jbe	 SHORT $LL19@inflateBac

; 579  :                 strm->msg = (char *)"invalid distance too far back";

  00c7c	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00c7f	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BO@ECPMAOGG@invalid?5distance?5too?5far?5back?$AA@

; 580  :                 state->mode = BAD;

  00c86	c7 02 1d 00 00
	00		 mov	 DWORD PTR [edx], 29	; 0000001dH

; 581  :                 break;

  00c8c	e9 76 00 00 00	 jmp	 $LN497@inflateBac
$LL19@inflateBac:

; 582  :             }
; 583  :             Tracevv((stderr, "inflate:         distance %u\n", state->offset));
; 584  : 
; 585  :             /* copy match from window to output */
; 586  :             do {
; 587  :                 ROOM();

  00c91	85 db		 test	 ebx, ebx
  00c93	75 27		 jne	 SHORT $LN490@inflateBac
  00c95	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  00c98	8b 5a 34	 mov	 ebx, DWORD PTR [edx+52]
  00c9b	50		 push	 eax
  00c9c	53		 push	 ebx
  00c9d	ff 75 18	 push	 DWORD PTR _out_desc$[ebp]
  00ca0	89 5d e4	 mov	 DWORD PTR _put$1$[ebp], ebx
  00ca3	89 45 e8	 mov	 DWORD PTR _left$1$[ebp], eax
  00ca6	89 42 2c	 mov	 DWORD PTR [edx+44], eax
  00ca9	ff 55 14	 call	 DWORD PTR _out$[ebp]
  00cac	83 c4 0c	 add	 esp, 12			; 0000000cH
  00caf	85 c0		 test	 eax, eax
  00cb1	0f 85 9c 00 00
	00		 jne	 $LN366@inflateBac
  00cb7	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  00cba	eb 03		 jmp	 SHORT $LN15@inflateBac
$LN490@inflateBac:
  00cbc	8b 5d e4	 mov	 ebx, DWORD PTR _put$1$[ebp]
$LN15@inflateBac:

; 588  :                 copy = state->wsize - state->offset;

  00cbf	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  00cc2	8b 4a 44	 mov	 ecx, DWORD PTR [edx+68]
  00cc5	2b c1		 sub	 eax, ecx

; 589  :                 if (copy < left) {

  00cc7	3b 45 e8	 cmp	 eax, DWORD PTR _left$1$[ebp]
  00cca	73 09		 jae	 SHORT $LN11@inflateBac

; 590  :                     from = put + copy;
; 591  :                     copy = left - copy;

  00ccc	8b 4d e8	 mov	 ecx, DWORD PTR _left$1$[ebp]
  00ccf	03 d8		 add	 ebx, eax
  00cd1	2b c8		 sub	 ecx, eax

; 592  :                 }
; 593  :                 else {

  00cd3	eb 05		 jmp	 SHORT $LN10@inflateBac
$LN11@inflateBac:

; 594  :                     from = put - state->offset;

  00cd5	2b d9		 sub	 ebx, ecx

; 595  :                     copy = left;

  00cd7	8b 4d e8	 mov	 ecx, DWORD PTR _left$1$[ebp]
$LN10@inflateBac:

; 596  :                 }
; 597  :                 if (copy > state->length) copy = state->length;

  00cda	3b 4a 40	 cmp	 ecx, DWORD PTR [edx+64]
  00cdd	0f 47 4a 40	 cmova	 ecx, DWORD PTR [edx+64]

; 598  :                 state->length -= copy;

  00ce1	29 4a 40	 sub	 DWORD PTR [edx+64], ecx

; 599  :                 left -= copy;

  00ce4	29 4d e8	 sub	 DWORD PTR _left$1$[ebp], ecx

; 602  :                 } while (--copy);

  00ce7	8b 55 e4	 mov	 edx, DWORD PTR _put$1$[ebp]
  00cea	2b da		 sub	 ebx, edx
  00cec	8d 64 24 00	 npad	 4
$LL8@inflateBac:

; 600  :                 do {
; 601  :                     *put++ = *from++;

  00cf0	8a 04 13	 mov	 al, BYTE PTR [ebx+edx]
  00cf3	88 02		 mov	 BYTE PTR [edx], al
  00cf5	42		 inc	 edx

; 602  :                 } while (--copy);

  00cf6	49		 dec	 ecx
  00cf7	75 f7		 jne	 SHORT $LL8@inflateBac

; 603  :             } while (state->length != 0);

  00cf9	8b 5d e8	 mov	 ebx, DWORD PTR _left$1$[ebp]
  00cfc	89 55 e4	 mov	 DWORD PTR _put$1$[ebp], edx
  00cff	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  00d02	39 4a 40	 cmp	 DWORD PTR [edx+64], ecx
  00d05	75 8a		 jne	 SHORT $LL19@inflateBac
$LN497@inflateBac:
  00d07	8b 5d f8	 mov	 ebx, DWORD PTR _next$[ebp]
  00d0a	89 5d f0	 mov	 DWORD PTR _next$5$[ebp], ebx
$LN484@inflateBac:
  00d0d	8b 4d fc	 mov	 ecx, DWORD PTR _hold$1$[ebp]
$LN387@inflateBac:

; 288  : 
; 289  :     /* Inflate until end of block marked as last */
; 290  :     for (;;)
; 291  :         switch (state->mode) {

  00d10	8b 02		 mov	 eax, DWORD PTR [edx]
  00d12	83 e8 0b	 sub	 eax, 11			; 0000000bH
  00d15	83 f8 12	 cmp	 eax, 18			; 00000012H
  00d18	0f 86 62 f3 ff
	ff		 jbe	 $LL332@inflateBac
$LN1@inflateBac:

; 618  : 
; 619  :         default:                /* can't happen, but makes compilers happy */
; 620  :             ret = Z_STREAM_ERROR;

  00d1e	bf fe ff ff ff	 mov	 edi, -2			; fffffffeH
$LN477@inflateBac:
  00d23	8b 45 f0	 mov	 eax, DWORD PTR _next$5$[ebp]
$inf_leave$501:

; 621  :             goto inf_leave;
; 622  :         }
; 623  : 
; 624  :     /* Return unused input */
; 625  :   inf_leave:
; 626  :     strm->next_in = next;

  00d26	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00d29	89 01		 mov	 DWORD PTR [ecx], eax

; 627  :     strm->avail_in = have;
; 628  :     return ret;

  00d2b	8b c7		 mov	 eax, edi
  00d2d	5f		 pop	 edi
  00d2e	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  00d31	5e		 pop	 esi
  00d32	5b		 pop	 ebx

; 629  : }

  00d33	8b e5		 mov	 esp, ebp
  00d35	5d		 pop	 ebp
  00d36	c2 14 00	 ret	 20			; 00000014H
$LN363@inflateBac:

; 621  :             goto inf_leave;
; 622  :         }
; 623  : 
; 624  :     /* Return unused input */
; 625  :   inf_leave:
; 626  :     strm->next_in = next;

  00d39	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00d3c	33 c0		 xor	 eax, eax
  00d3e	bf fb ff ff ff	 mov	 edi, -5			; fffffffbH
  00d43	89 01		 mov	 DWORD PTR [ecx], eax

; 627  :     strm->avail_in = have;
; 628  :     return ret;

  00d45	8b c7		 mov	 eax, edi
  00d47	5f		 pop	 edi
  00d48	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  00d4b	5e		 pop	 esi
  00d4c	5b		 pop	 ebx

; 629  : }

  00d4d	8b e5		 mov	 esp, ebp
  00d4f	5d		 pop	 ebp
  00d50	c2 14 00	 ret	 20			; 00000014H
$LN366@inflateBac:

; 621  :             goto inf_leave;
; 622  :         }
; 623  : 
; 624  :     /* Return unused input */
; 625  :   inf_leave:
; 626  :     strm->next_in = next;

  00d53	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00d56	bf fb ff ff ff	 mov	 edi, -5			; fffffffbH
  00d5b	8b 45 f8	 mov	 eax, DWORD PTR _next$[ebp]
  00d5e	89 01		 mov	 DWORD PTR [ecx], eax

; 627  :     strm->avail_in = have;
; 628  :     return ret;

  00d60	8b c7		 mov	 eax, edi
  00d62	5f		 pop	 edi
  00d63	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  00d66	5e		 pop	 esi
  00d67	5b		 pop	 ebx

; 629  : }

  00d68	8b e5		 mov	 esp, ebp
  00d6a	5d		 pop	 ebp
  00d6b	c2 14 00	 ret	 20			; 00000014H
$LN5@inflateBac:

; 604  :             break;
; 605  : 
; 606  :         case DONE:
; 607  :             /* inflate stream terminated properly -- write leftover output */
; 608  :             ret = Z_STREAM_END;
; 609  :             if (left < state->wsize) {

  00d6e	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  00d71	bf 01 00 00 00	 mov	 edi, 1
  00d76	8b 4d e8	 mov	 ecx, DWORD PTR _left$1$[ebp]
  00d79	3b c8		 cmp	 ecx, eax
  00d7b	73 a6		 jae	 SHORT $LN477@inflateBac

; 610  :                 if (out(out_desc, state->window, state->wsize - left))

  00d7d	2b c1		 sub	 eax, ecx
  00d7f	50		 push	 eax
  00d80	ff 72 34	 push	 DWORD PTR [edx+52]
  00d83	ff 75 18	 push	 DWORD PTR _out_desc$[ebp]
  00d86	ff 55 14	 call	 DWORD PTR _out$[ebp]
  00d89	83 c4 0c	 add	 esp, 12			; 0000000cH
  00d8c	85 c0		 test	 eax, eax

; 611  :                     ret = Z_BUF_ERROR;
; 612  :             }
; 613  :             goto inf_leave;

  00d8e	8b 45 f8	 mov	 eax, DWORD PTR _next$[ebp]
  00d91	74 93		 je	 SHORT $inf_leave$501

; 621  :             goto inf_leave;
; 622  :         }
; 623  : 
; 624  :     /* Return unused input */
; 625  :   inf_leave:
; 626  :     strm->next_in = next;

  00d93	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00d96	bf fb ff ff ff	 mov	 edi, -5			; fffffffbH
  00d9b	89 01		 mov	 DWORD PTR [ecx], eax

; 627  :     strm->avail_in = have;
; 628  :     return ret;

  00d9d	8b c7		 mov	 eax, edi
  00d9f	5f		 pop	 edi
  00da0	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  00da3	5e		 pop	 esi
  00da4	5b		 pop	 ebx

; 629  : }

  00da5	8b e5		 mov	 esp, ebp
  00da7	5d		 pop	 ebp
  00da8	c2 14 00	 ret	 20			; 00000014H
$LN2@inflateBac:

; 614  : 
; 615  :         case BAD:
; 616  :             ret = Z_DATA_ERROR;

  00dab	bf fd ff ff ff	 mov	 edi, -3			; fffffffdH

; 617  :             goto inf_leave;

  00db0	e9 6e ff ff ff	 jmp	 $LN477@inflateBac
$LN333@inflateBac:

; 274  :         return Z_STREAM_ERROR;

  00db5	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 629  : }

  00dba	8b e5		 mov	 esp, ebp
  00dbc	5d		 pop	 ebp
  00dbd	c2 14 00	 ret	 20			; 00000014H
$LN499@inflateBac:
  00dc0	00 00 00 00	 DD	 $LN328@inflateBac
  00dc4	00 00 00 00	 DD	 $LN297@inflateBac
  00dc8	00 00 00 00	 DD	 $LN262@inflateBac
  00dcc	00 00 00 00	 DD	 $LN130@inflateBac
  00dd0	00 00 00 00	 DD	 $LN5@inflateBac
  00dd4	00 00 00 00	 DD	 $LN2@inflateBac
  00dd8	00 00 00 00	 DD	 $LN1@inflateBac
$LN467@inflateBac:
  00ddc	00		 DB	 0
  00ddd	06		 DB	 6
  00dde	01		 DB	 1
  00ddf	06		 DB	 6
  00de0	06		 DB	 6
  00de1	02		 DB	 2
  00de2	06		 DB	 6
  00de3	06		 DB	 6
  00de4	06		 DB	 6
  00de5	03		 DB	 3
  00de6	06		 DB	 6
  00de7	06		 DB	 6
  00de8	06		 DB	 6
  00de9	06		 DB	 6
  00dea	06		 DB	 6
  00deb	06		 DB	 6
  00dec	06		 DB	 6
  00ded	04		 DB	 4
  00dee	05		 DB	 5
  00def	90		 npad	 1
$LN500@inflateBac:
  00df0	00 00 00 00	 DD	 $LN305@inflateBac
  00df4	00 00 00 00	 DD	 $LN304@inflateBac
  00df8	00 00 00 00	 DD	 $LN303@inflateBac
  00dfc	00 00 00 00	 DD	 $LN302@inflateBac
_inflateBack@20 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\vs_project\zlib-1.2.8\infback.c
;	COMDAT _inflateBackEnd@4
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_inflateBackEnd@4 PROC					; COMDAT

; 633  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 634  :     if (strm == Z_NULL || strm->state == Z_NULL || strm->zfree == (free_func)0)

  00004	8b 75 08	 mov	 esi, DWORD PTR _strm$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 25		 je	 SHORT $LN1@inflateBac
  0000b	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0000e	85 c0		 test	 eax, eax
  00010	74 1e		 je	 SHORT $LN1@inflateBac
  00012	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  00015	85 c9		 test	 ecx, ecx
  00017	74 17		 je	 SHORT $LN1@inflateBac

; 636  :     ZFREE(strm, strm->state);

  00019	50		 push	 eax
  0001a	ff 76 28	 push	 DWORD PTR [esi+40]
  0001d	ff d1		 call	 ecx
  0001f	83 c4 08	 add	 esp, 8

; 637  :     strm->state = Z_NULL;

  00022	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0

; 638  :     Tracev((stderr, "inflate: end\n"));
; 639  :     return Z_OK;

  00029	33 c0		 xor	 eax, eax
  0002b	5e		 pop	 esi

; 640  : }

  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
$LN1@inflateBac:

; 635  :         return Z_STREAM_ERROR;

  00030	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00035	5e		 pop	 esi

; 640  : }

  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
_inflateBackEnd@4 ENDP
_TEXT	ENDS
END
