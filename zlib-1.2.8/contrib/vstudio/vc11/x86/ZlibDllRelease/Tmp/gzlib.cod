; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.31101.0 

	TITLE	D:\vs_project\zlib-1.2.8\gzlib.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_02DKCKIIND@?$CFs?$AA@			; `string'
PUBLIC	??_C@_07EBNKNFJN@?$DMfd?3?$CFd?$DO?$AA@		; `string'
PUBLIC	??_C@_0O@BNNCBLEN@out?5of?5memory?$AA@		; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_02LMMGGCAJ@?3?5?$AA@			; `string'
PUBLIC	??_C@_06DIJPEION@?$CFs?$CFs?$CFs?$AA@		; `string'
EXTRN	_wcstombs:PROC
EXTRN	__snprintf:PROC
EXTRN	_malloc:PROC
EXTRN	__open:PROC
EXTRN	_free:PROC
EXTRN	__wopen:PROC
EXTRN	__lseeki64:PROC
;	COMDAT ??_C@_06DIJPEION@?$CFs?$CFs?$CFs?$AA@
CONST	SEGMENT
??_C@_06DIJPEION@?$CFs?$CFs?$CFs?$AA@ DB '%s%s%s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02LMMGGCAJ@?3?5?$AA@
CONST	SEGMENT
??_C@_02LMMGGCAJ@?3?5?$AA@ DB ': ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@BNNCBLEN@out?5of?5memory?$AA@
CONST	SEGMENT
??_C@_0O@BNNCBLEN@out?5of?5memory?$AA@ DB 'out of memory', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07EBNKNFJN@?$DMfd?3?$CFd?$DO?$AA@
CONST	SEGMENT
??_C@_07EBNKNFJN@?$DMfd?3?$CFd?$DO?$AA@ DB '<fd:%d>', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs?$AA@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs?$AA@ DB '%s', 00H		; `string'
PUBLIC	_gz_error
PUBLIC	_gzclearerr@4
PUBLIC	_gzerror@8
PUBLIC	_gzeof@4
PUBLIC	_gzoffset@4
PUBLIC	_gzoffset64@4
PUBLIC	_gztell@4
PUBLIC	_gztell64@4
PUBLIC	_gzseek@12
PUBLIC	_gzseek64@16
PUBLIC	_gzrewind@4
PUBLIC	_gzbuffer@8
PUBLIC	_gzopen_w@8
PUBLIC	_gzdopen@8
PUBLIC	_gzopen@8
; Function compile flags: /Ogtp
; File d:\vs_project\zlib-1.2.8\gzlib.c
;	COMDAT _gz_reset
_TEXT	SEGMENT
_gz_reset PROC						; COMDAT
; _state$ = ecx

; 77   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 78   :     state->x.have = 0;              /* no output data available */
; 79   :     if (state->mode == GZ_READ) {   /* for reading ... */

  00003	81 7e 10 4f 1c
	00 00		 cmp	 DWORD PTR [esi+16], 7247 ; 00001c4fH
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00010	75 15		 jne	 SHORT $LN1@gz_reset

; 80   :         state->eof = 0;             /* not at end of file */

  00012	c7 46 40 00 00
	00 00		 mov	 DWORD PTR [esi+64], 0

; 81   :         state->past = 0;            /* have not read past end yet */

  00019	c7 46 44 00 00
	00 00		 mov	 DWORD PTR [esi+68], 0

; 82   :         state->how = LOOK;          /* look for gzip header */

  00020	c7 46 30 00 00
	00 00		 mov	 DWORD PTR [esi+48], 0
$LN1@gz_reset:

; 83   :     }
; 84   :     state->seek = 0;                /* no seek request pending */
; 85   :     gz_error(state, Z_OK, NULL);    /* clear error */

  00027	6a 00		 push	 0
  00029	33 d2		 xor	 edx, edx
  0002b	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0
  00032	e8 00 00 00 00	 call	 _gz_error
  00037	83 c4 04	 add	 esp, 4

; 86   :     state->x.pos = 0;               /* no uncompressed data yet */

  0003a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00041	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 87   :     state->strm.avail_in = 0;       /* no input data yet */

  00048	c7 46 68 00 00
	00 00		 mov	 DWORD PTR [esi+104], 0
  0004f	5e		 pop	 esi

; 88   : }

  00050	c3		 ret	 0
_gz_reset ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\vs_project\zlib-1.2.8\gzlib.c
;	COMDAT _gz_open
_TEXT	SEGMENT
_exclusive$1$ = -12					; size = 4
_fd$1$ = -8						; size = 4
_path$1$ = -4						; size = 4
_mode$ = 8						; size = 4
_gz_open PROC						; COMDAT
; _path$ = ecx
; _fd$ = edx

; 95   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx

; 96   :     gz_statep state;
; 97   :     size_t len;
; 98   :     int oflag;
; 99   : #ifdef O_CLOEXEC
; 100  :     int cloexec = 0;
; 101  : #endif
; 102  : #ifdef O_EXCL
; 103  :     int exclusive = 0;

  00009	33 c0		 xor	 eax, eax
  0000b	89 5d fc	 mov	 DWORD PTR _path$1$[ebp], ebx
  0000e	89 45 f4	 mov	 DWORD PTR _exclusive$1$[ebp], eax
  00011	57		 push	 edi
  00012	8b fa		 mov	 edi, edx
  00014	89 7d f8	 mov	 DWORD PTR _fd$1$[ebp], edi

; 104  : #endif
; 105  : 
; 106  :     /* check input */
; 107  :     if (path == NULL)

  00017	85 db		 test	 ebx, ebx
  00019	75 06		 jne	 SHORT $LN35@gz_open
  0001b	5f		 pop	 edi
  0001c	5b		 pop	 ebx

; 265  : }

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
$LN35@gz_open:
  00021	56		 push	 esi

; 108  :         return NULL;
; 109  : 
; 110  :     /* allocate gzFile structure to return */
; 111  :     state = (gz_statep)malloc(sizeof(gz_state));

  00022	68 a0 00 00 00	 push	 160			; 000000a0H
  00027	e8 00 00 00 00	 call	 _malloc
  0002c	8b f0		 mov	 esi, eax
  0002e	83 c4 04	 add	 esp, 4

; 112  :     if (state == NULL)

  00031	85 f6		 test	 esi, esi
  00033	0f 84 e2 01 00
	00		 je	 $LN54@gz_open

; 113  :         return NULL;
; 114  :     state->size = 0;            /* no buffers allocated yet */
; 115  :     state->want = GZBUFSIZE;    /* requested buffer size */
; 116  :     state->msg = NULL;          /* no error message yet */
; 117  : 
; 118  :     /* interpret mode */
; 119  :     state->mode = GZ_NONE;
; 120  :     state->level = Z_DEFAULT_COMPRESSION;
; 121  :     state->strategy = Z_DEFAULT_STRATEGY;
; 122  :     state->direct = 0;
; 123  :     while (*mode) {

  00039	8b 4d 08	 mov	 ecx, DWORD PTR _mode$[ebp]
  0003c	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
  00043	c7 46 20 00 20
	00 00		 mov	 DWORD PTR [esi+32], 8192 ; 00002000H
  0004a	c7 46 60 00 00
	00 00		 mov	 DWORD PTR [esi+96], 0
  00051	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00058	c7 46 48 ff ff
	ff ff		 mov	 DWORD PTR [esi+72], -1
  0005f	c7 46 4c 00 00
	00 00		 mov	 DWORD PTR [esi+76], 0
  00066	c7 46 2c 00 00
	00 00		 mov	 DWORD PTR [esi+44], 0
  0006d	8a 01		 mov	 al, BYTE PTR [ecx]
  0006f	84 c0		 test	 al, al
  00071	0f 84 88 00 00
	00		 je	 $LN48@gz_open
$LL33@gz_open:

; 124  :         if (*mode >= '0' && *mode <= '9')

  00077	3c 30		 cmp	 al, 48			; 00000030H
  00079	7c 0f		 jl	 SHORT $LN31@gz_open
  0007b	3c 39		 cmp	 al, 57			; 00000039H
  0007d	7f 0b		 jg	 SHORT $LN31@gz_open

; 125  :             state->level = *mode - '0';

  0007f	0f be c0	 movsx	 eax, al
  00082	83 e8 30	 sub	 eax, 48			; 00000030H
  00085	89 46 48	 mov	 DWORD PTR [esi+72], eax

; 126  :         else

  00088	eb 69		 jmp	 SHORT $LN16@gz_open
$LN31@gz_open:

; 127  :             switch (*mode) {

  0008a	0f be c0	 movsx	 eax, al
  0008d	83 c0 d5	 add	 eax, -43		; ffffffd5H
  00090	83 f8 4d	 cmp	 eax, 77			; 0000004dH
  00093	77 5e		 ja	 SHORT $LN16@gz_open
  00095	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN49@gz_open[eax]
  0009c	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN57@gz_open[eax*4]
$LN27@gz_open:

; 128  :             case 'r':
; 129  :                 state->mode = GZ_READ;

  000a3	c7 46 10 4f 1c
	00 00		 mov	 DWORD PTR [esi+16], 7247 ; 00001c4fH

; 130  :                 break;

  000aa	eb 47		 jmp	 SHORT $LN16@gz_open
$LN26@gz_open:

; 131  : #ifndef NO_GZCOMPRESS
; 132  :             case 'w':
; 133  :                 state->mode = GZ_WRITE;

  000ac	c7 46 10 b1 79
	00 00		 mov	 DWORD PTR [esi+16], 31153 ; 000079b1H

; 134  :                 break;

  000b3	eb 3e		 jmp	 SHORT $LN16@gz_open
$LN25@gz_open:

; 135  :             case 'a':
; 136  :                 state->mode = GZ_APPEND;

  000b5	c7 46 10 01 00
	00 00		 mov	 DWORD PTR [esi+16], 1

; 137  :                 break;

  000bc	eb 35		 jmp	 SHORT $LN16@gz_open
$LN22@gz_open:

; 138  : #endif
; 139  :             case '+':       /* can't read and write at the same time */
; 140  :                 free(state);
; 141  :                 return NULL;
; 142  :             case 'b':       /* ignore -- will request binary anyway */
; 143  :                 break;
; 144  : #ifdef O_CLOEXEC
; 145  :             case 'e':
; 146  :                 cloexec = 1;
; 147  :                 break;
; 148  : #endif
; 149  : #ifdef O_EXCL
; 150  :             case 'x':
; 151  :                 exclusive = 1;

  000be	b8 01 00 00 00	 mov	 eax, 1
  000c3	89 45 f4	 mov	 DWORD PTR _exclusive$1$[ebp], eax

; 152  :                 break;

  000c6	eb 2b		 jmp	 SHORT $LN16@gz_open
$LN21@gz_open:

; 153  : #endif
; 154  :             case 'f':
; 155  :                 state->strategy = Z_FILTERED;

  000c8	c7 46 4c 01 00
	00 00		 mov	 DWORD PTR [esi+76], 1

; 156  :                 break;

  000cf	eb 22		 jmp	 SHORT $LN16@gz_open
$LN20@gz_open:

; 157  :             case 'h':
; 158  :                 state->strategy = Z_HUFFMAN_ONLY;

  000d1	c7 46 4c 02 00
	00 00		 mov	 DWORD PTR [esi+76], 2

; 159  :                 break;

  000d8	eb 19		 jmp	 SHORT $LN16@gz_open
$LN19@gz_open:

; 160  :             case 'R':
; 161  :                 state->strategy = Z_RLE;

  000da	c7 46 4c 03 00
	00 00		 mov	 DWORD PTR [esi+76], 3

; 162  :                 break;

  000e1	eb 10		 jmp	 SHORT $LN16@gz_open
$LN18@gz_open:

; 163  :             case 'F':
; 164  :                 state->strategy = Z_FIXED;

  000e3	c7 46 4c 04 00
	00 00		 mov	 DWORD PTR [esi+76], 4

; 165  :                 break;

  000ea	eb 07		 jmp	 SHORT $LN16@gz_open
$LN17@gz_open:

; 166  :             case 'T':
; 167  :                 state->direct = 1;

  000ec	c7 46 2c 01 00
	00 00		 mov	 DWORD PTR [esi+44], 1
$LN16@gz_open:

; 113  :         return NULL;
; 114  :     state->size = 0;            /* no buffers allocated yet */
; 115  :     state->want = GZBUFSIZE;    /* requested buffer size */
; 116  :     state->msg = NULL;          /* no error message yet */
; 117  : 
; 118  :     /* interpret mode */
; 119  :     state->mode = GZ_NONE;
; 120  :     state->level = Z_DEFAULT_COMPRESSION;
; 121  :     state->strategy = Z_DEFAULT_STRATEGY;
; 122  :     state->direct = 0;
; 123  :     while (*mode) {

  000f3	8a 41 01	 mov	 al, BYTE PTR [ecx+1]

; 168  :                 break;
; 169  :             default:        /* could consider as an error, but just ignore */
; 170  :                 ;
; 171  :             }
; 172  :         mode++;

  000f6	41		 inc	 ecx
  000f7	84 c0		 test	 al, al
  000f9	0f 85 78 ff ff
	ff		 jne	 $LL33@gz_open
$LN48@gz_open:

; 173  :     }
; 174  : 
; 175  :     /* must provide an "r", "w", or "a" */
; 176  :     if (state->mode == GZ_NONE) {

  000ff	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00102	85 c0		 test	 eax, eax
  00104	74 56		 je	 SHORT $LN55@gz_open

; 177  :         free(state);
; 178  :         return NULL;
; 179  :     }
; 180  : 
; 181  :     /* can't force transparent read */
; 182  :     if (state->mode == GZ_READ) {

  00106	3d 4f 1c 00 00	 cmp	 eax, 7247		; 00001c4fH
  0010b	75 0d		 jne	 SHORT $LN14@gz_open

; 183  :         if (state->direct) {

  0010d	83 7e 2c 00	 cmp	 DWORD PTR [esi+44], 0
  00111	75 49		 jne	 SHORT $LN55@gz_open

; 184  :             free(state);
; 185  :             return NULL;
; 186  :         }
; 187  :         state->direct = 1;      /* for empty file */

  00113	c7 46 2c 01 00
	00 00		 mov	 DWORD PTR [esi+44], 1
$LN14@gz_open:

; 188  :     }
; 189  : 
; 190  :     /* save the path name for error messages */
; 191  : #ifdef _WIN32
; 192  :     if (fd == -2) {

  0011a	83 ff fe	 cmp	 edi, -2			; fffffffeH
  0011d	75 18		 jne	 SHORT $LN12@gz_open

; 193  :         len = wcstombs(NULL, path, 0);

  0011f	6a 00		 push	 0
  00121	53		 push	 ebx
  00122	6a 00		 push	 0
  00124	e8 00 00 00 00	 call	 _wcstombs
  00129	8b f8		 mov	 edi, eax
  0012b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 194  :         if (len == (size_t)-1)

  0012e	83 ff ff	 cmp	 edi, -1
  00131	75 16		 jne	 SHORT $LN10@gz_open

; 195  :             len = 0;

  00133	33 ff		 xor	 edi, edi

; 196  :     }
; 197  :     else

  00135	eb 12		 jmp	 SHORT $LN10@gz_open
$LN12@gz_open:

; 198  : #endif
; 199  :         len = strlen((const char *)path);

  00137	8b fb		 mov	 edi, ebx
  00139	8d 4f 01	 lea	 ecx, DWORD PTR [edi+1]
  0013c	8d 64 24 00	 npad	 4
$LL50@gz_open:
  00140	8a 07		 mov	 al, BYTE PTR [edi]
  00142	47		 inc	 edi
  00143	84 c0		 test	 al, al
  00145	75 f9		 jne	 SHORT $LL50@gz_open
  00147	2b f9		 sub	 edi, ecx
$LN10@gz_open:

; 200  :     state->path = (char *)malloc(len + 1);

  00149	8d 5f 01	 lea	 ebx, DWORD PTR [edi+1]
  0014c	53		 push	 ebx
  0014d	e8 00 00 00 00	 call	 _malloc
  00152	83 c4 04	 add	 esp, 4
  00155	89 46 18	 mov	 DWORD PTR [esi+24], eax

; 201  :     if (state->path == NULL) {

  00158	85 c0		 test	 eax, eax
  0015a	75 12		 jne	 SHORT $LN9@gz_open
$LN55@gz_open:

; 202  :         free(state);

  0015c	56		 push	 esi
  0015d	e8 00 00 00 00	 call	 _free
  00162	83 c4 04	 add	 esp, 4

; 203  :         return NULL;

  00165	33 c0		 xor	 eax, eax
  00167	5e		 pop	 esi
  00168	5f		 pop	 edi
  00169	5b		 pop	 ebx

; 265  : }

  0016a	8b e5		 mov	 esp, ebp
  0016c	5d		 pop	 ebp
  0016d	c3		 ret	 0
$LN9@gz_open:

; 204  :     }
; 205  : #ifdef _WIN32
; 206  :     if (fd == -2)

  0016e	8b 4d f8	 mov	 ecx, DWORD PTR _fd$1$[ebp]
  00171	83 f9 fe	 cmp	 ecx, -2			; fffffffeH
  00174	75 19		 jne	 SHORT $LN8@gz_open

; 207  :         if (len)

  00176	85 ff		 test	 edi, edi

; 208  :             wcstombs(state->path, path, len + 1);

  00178	8b 7d fc	 mov	 edi, DWORD PTR _path$1$[ebp]
  0017b	74 0d		 je	 SHORT $LN7@gz_open
  0017d	53		 push	 ebx
  0017e	57		 push	 edi
  0017f	50		 push	 eax
  00180	e8 00 00 00 00	 call	 _wcstombs
  00185	83 c4 0c	 add	 esp, 12			; 0000000cH

; 209  :         else

  00188	eb 18		 jmp	 SHORT $LN52@gz_open
$LN7@gz_open:

; 210  :             *(state->path) = 0;

  0018a	c6 00 00	 mov	 BYTE PTR [eax], 0

; 211  :     else

  0018d	eb 16		 jmp	 SHORT $LN5@gz_open
$LN8@gz_open:

; 212  : #endif
; 213  : #if !defined(NO_snprintf) && !defined(NO_vsnprintf)
; 214  :         snprintf(state->path, len + 1, "%s", (const char *)path);

  0018f	8b 7d fc	 mov	 edi, DWORD PTR _path$1$[ebp]
  00192	57		 push	 edi
  00193	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
  00198	53		 push	 ebx
  00199	50		 push	 eax
  0019a	e8 00 00 00 00	 call	 __snprintf
  0019f	83 c4 10	 add	 esp, 16			; 00000010H
$LN52@gz_open:
  001a2	8b 4d f8	 mov	 ecx, DWORD PTR _fd$1$[ebp]
$LN5@gz_open:

; 215  : #else
; 216  :         strcpy(state->path, path);
; 217  : #endif
; 218  : 
; 219  :     /* compute the flags for open() */
; 220  :     oflag =
; 221  : #ifdef O_LARGEFILE
; 222  :         O_LARGEFILE |
; 223  : #endif
; 224  : #ifdef O_BINARY
; 225  :         O_BINARY |
; 226  : #endif
; 227  : #ifdef O_CLOEXEC
; 228  :         (cloexec ? O_CLOEXEC : 0) |
; 229  : #endif
; 230  :         (state->mode == GZ_READ ?
; 231  :          O_RDONLY :
; 232  :          (O_WRONLY | O_CREAT |
; 233  : #ifdef O_EXCL
; 234  :           (exclusive ? O_EXCL : 0) |
; 235  : #endif
; 236  :           (state->mode == GZ_WRITE ?
; 237  :            O_TRUNC :
; 238  :            O_APPEND)));

  001a5	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  001a8	81 fa 4f 1c 00
	00		 cmp	 edx, 7247		; 00001c4fH
  001ae	75 04		 jne	 SHORT $LN38@gz_open
  001b0	33 c0		 xor	 eax, eax
  001b2	eb 27		 jmp	 SHORT $LN39@gz_open
$LN38@gz_open:
  001b4	81 fa b1 79 00
	00		 cmp	 edx, 31153		; 000079b1H
  001ba	b8 08 00 00 00	 mov	 eax, 8
  001bf	8b 55 f4	 mov	 edx, DWORD PTR _exclusive$1$[ebp]
  001c2	bb 00 02 00 00	 mov	 ebx, 512		; 00000200H
  001c7	0f 44 c3	 cmove	 eax, ebx
  001ca	f7 da		 neg	 edx
  001cc	1b d2		 sbb	 edx, edx
  001ce	81 e2 00 04 00
	00		 and	 edx, 1024		; 00000400H
  001d4	0b c2		 or	 eax, edx
  001d6	0d 01 01 00 00	 or	 eax, 257		; 00000101H
$LN39@gz_open:
  001db	0d 00 80 00 00	 or	 eax, 32768		; 00008000H

; 239  : 
; 240  :     /* open the file with the appropriate flags (or just use fd) */
; 241  :     state->fd = fd > -1 ? fd : (
; 242  : #ifdef _WIN32
; 243  :         fd == -2 ? _wopen(path, oflag, 0666) :
; 244  : #endif
; 245  :         open((const char *)path, oflag, 0666));

  001e0	83 f9 ff	 cmp	 ecx, -1
  001e3	7f 1d		 jg	 SHORT $LN41@gz_open
  001e5	68 b6 01 00 00	 push	 438			; 000001b6H
  001ea	50		 push	 eax
  001eb	57		 push	 edi
  001ec	83 f9 fe	 cmp	 ecx, -2			; fffffffeH
  001ef	75 07		 jne	 SHORT $LN40@gz_open
  001f1	e8 00 00 00 00	 call	 __wopen
  001f6	eb 05		 jmp	 SHORT $LN53@gz_open
$LN40@gz_open:
  001f8	e8 00 00 00 00	 call	 __open
$LN53@gz_open:
  001fd	8b c8		 mov	 ecx, eax
  001ff	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN41@gz_open:
  00202	89 4e 14	 mov	 DWORD PTR [esi+20], ecx

; 246  :     if (state->fd == -1) {

  00205	83 f9 ff	 cmp	 ecx, -1
  00208	75 1a		 jne	 SHORT $LN4@gz_open

; 247  :         free(state->path);

  0020a	ff 76 18	 push	 DWORD PTR [esi+24]
  0020d	e8 00 00 00 00	 call	 _free

; 248  :         free(state);

  00212	56		 push	 esi
  00213	e8 00 00 00 00	 call	 _free
  00218	83 c4 08	 add	 esp, 8
$LN54@gz_open:

; 249  :         return NULL;

  0021b	5e		 pop	 esi
  0021c	5f		 pop	 edi
  0021d	33 c0		 xor	 eax, eax
  0021f	5b		 pop	 ebx

; 265  : }

  00220	8b e5		 mov	 esp, ebp
  00222	5d		 pop	 ebp
  00223	c3		 ret	 0
$LN4@gz_open:

; 250  :     }
; 251  :     if (state->mode == GZ_APPEND)

  00224	83 7e 10 01	 cmp	 DWORD PTR [esi+16], 1
  00228	75 07		 jne	 SHORT $LN3@gz_open

; 252  :         state->mode = GZ_WRITE;         /* simplify later checks */

  0022a	c7 46 10 b1 79
	00 00		 mov	 DWORD PTR [esi+16], 31153 ; 000079b1H
$LN3@gz_open:

; 253  : 
; 254  :     /* save the current position for rewinding (only if reading) */
; 255  :     if (state->mode == GZ_READ) {

  00231	81 7e 10 4f 1c
	00 00		 cmp	 DWORD PTR [esi+16], 7247 ; 00001c4fH
  00238	75 2a		 jne	 SHORT $LN1@gz_open

; 256  :         state->start = LSEEK(state->fd, 0, SEEK_CUR);

  0023a	6a 01		 push	 1
  0023c	6a 00		 push	 0
  0023e	6a 00		 push	 0
  00240	51		 push	 ecx
  00241	e8 00 00 00 00	 call	 __lseeki64
  00246	89 46 38	 mov	 DWORD PTR [esi+56], eax
  00249	83 c4 10	 add	 esp, 16			; 00000010H

; 257  :         if (state->start == -1) state->start = 0;

  0024c	23 c2		 and	 eax, edx
  0024e	89 56 3c	 mov	 DWORD PTR [esi+60], edx
  00251	83 f8 ff	 cmp	 eax, -1
  00254	75 0e		 jne	 SHORT $LN1@gz_open
  00256	c7 46 38 00 00
	00 00		 mov	 DWORD PTR [esi+56], 0
  0025d	c7 46 3c 00 00
	00 00		 mov	 DWORD PTR [esi+60], 0
$LN1@gz_open:

; 258  :     }
; 259  : 
; 260  :     /* initialize stream */
; 261  :     gz_reset(state);

  00264	8b ce		 mov	 ecx, esi
  00266	e8 00 00 00 00	 call	 _gz_reset

; 262  : 
; 263  :     /* return stream */
; 264  :     return (gzFile)state;

  0026b	8b c6		 mov	 eax, esi
  0026d	5e		 pop	 esi
  0026e	5f		 pop	 edi
  0026f	5b		 pop	 ebx

; 265  : }

  00270	8b e5		 mov	 esp, ebp
  00272	5d		 pop	 ebp
  00273	c3		 ret	 0
$LN57@gz_open:
  00274	00 00 00 00	 DD	 $LN55@gz_open
  00278	00 00 00 00	 DD	 $LN18@gz_open
  0027c	00 00 00 00	 DD	 $LN19@gz_open
  00280	00 00 00 00	 DD	 $LN17@gz_open
  00284	00 00 00 00	 DD	 $LN25@gz_open
  00288	00 00 00 00	 DD	 $LN21@gz_open
  0028c	00 00 00 00	 DD	 $LN20@gz_open
  00290	00 00 00 00	 DD	 $LN27@gz_open
  00294	00 00 00 00	 DD	 $LN26@gz_open
  00298	00 00 00 00	 DD	 $LN22@gz_open
  0029c	00 00 00 00	 DD	 $LN16@gz_open
$LN49@gz_open:
  002a0	00		 DB	 0
  002a1	0a		 DB	 10			; 0000000aH
  002a2	0a		 DB	 10			; 0000000aH
  002a3	0a		 DB	 10			; 0000000aH
  002a4	0a		 DB	 10			; 0000000aH
  002a5	0a		 DB	 10			; 0000000aH
  002a6	0a		 DB	 10			; 0000000aH
  002a7	0a		 DB	 10			; 0000000aH
  002a8	0a		 DB	 10			; 0000000aH
  002a9	0a		 DB	 10			; 0000000aH
  002aa	0a		 DB	 10			; 0000000aH
  002ab	0a		 DB	 10			; 0000000aH
  002ac	0a		 DB	 10			; 0000000aH
  002ad	0a		 DB	 10			; 0000000aH
  002ae	0a		 DB	 10			; 0000000aH
  002af	0a		 DB	 10			; 0000000aH
  002b0	0a		 DB	 10			; 0000000aH
  002b1	0a		 DB	 10			; 0000000aH
  002b2	0a		 DB	 10			; 0000000aH
  002b3	0a		 DB	 10			; 0000000aH
  002b4	0a		 DB	 10			; 0000000aH
  002b5	0a		 DB	 10			; 0000000aH
  002b6	0a		 DB	 10			; 0000000aH
  002b7	0a		 DB	 10			; 0000000aH
  002b8	0a		 DB	 10			; 0000000aH
  002b9	0a		 DB	 10			; 0000000aH
  002ba	0a		 DB	 10			; 0000000aH
  002bb	01		 DB	 1
  002bc	0a		 DB	 10			; 0000000aH
  002bd	0a		 DB	 10			; 0000000aH
  002be	0a		 DB	 10			; 0000000aH
  002bf	0a		 DB	 10			; 0000000aH
  002c0	0a		 DB	 10			; 0000000aH
  002c1	0a		 DB	 10			; 0000000aH
  002c2	0a		 DB	 10			; 0000000aH
  002c3	0a		 DB	 10			; 0000000aH
  002c4	0a		 DB	 10			; 0000000aH
  002c5	0a		 DB	 10			; 0000000aH
  002c6	0a		 DB	 10			; 0000000aH
  002c7	02		 DB	 2
  002c8	0a		 DB	 10			; 0000000aH
  002c9	03		 DB	 3
  002ca	0a		 DB	 10			; 0000000aH
  002cb	0a		 DB	 10			; 0000000aH
  002cc	0a		 DB	 10			; 0000000aH
  002cd	0a		 DB	 10			; 0000000aH
  002ce	0a		 DB	 10			; 0000000aH
  002cf	0a		 DB	 10			; 0000000aH
  002d0	0a		 DB	 10			; 0000000aH
  002d1	0a		 DB	 10			; 0000000aH
  002d2	0a		 DB	 10			; 0000000aH
  002d3	0a		 DB	 10			; 0000000aH
  002d4	0a		 DB	 10			; 0000000aH
  002d5	0a		 DB	 10			; 0000000aH
  002d6	04		 DB	 4
  002d7	0a		 DB	 10			; 0000000aH
  002d8	0a		 DB	 10			; 0000000aH
  002d9	0a		 DB	 10			; 0000000aH
  002da	0a		 DB	 10			; 0000000aH
  002db	05		 DB	 5
  002dc	0a		 DB	 10			; 0000000aH
  002dd	06		 DB	 6
  002de	0a		 DB	 10			; 0000000aH
  002df	0a		 DB	 10			; 0000000aH
  002e0	0a		 DB	 10			; 0000000aH
  002e1	0a		 DB	 10			; 0000000aH
  002e2	0a		 DB	 10			; 0000000aH
  002e3	0a		 DB	 10			; 0000000aH
  002e4	0a		 DB	 10			; 0000000aH
  002e5	0a		 DB	 10			; 0000000aH
  002e6	0a		 DB	 10			; 0000000aH
  002e7	07		 DB	 7
  002e8	0a		 DB	 10			; 0000000aH
  002e9	0a		 DB	 10			; 0000000aH
  002ea	0a		 DB	 10			; 0000000aH
  002eb	0a		 DB	 10			; 0000000aH
  002ec	08		 DB	 8
  002ed	09		 DB	 9
_gz_open ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\vs_project\zlib-1.2.8\gzlib.c
;	COMDAT _gzopen@8
_TEXT	SEGMENT
_path$ = 8						; size = 4
_mode$ = 12						; size = 4
_gzopen@8 PROC						; COMDAT

; 271  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 272  :     return gz_open(path, -1, mode);

  00003	ff 75 0c	 push	 DWORD PTR _mode$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR _path$[ebp]
  00009	83 ca ff	 or	 edx, -1
  0000c	e8 00 00 00 00	 call	 _gz_open
  00011	83 c4 04	 add	 esp, 4

; 273  : }

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
_gzopen@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\vs_project\zlib-1.2.8\gzlib.c
;	COMDAT _gzdopen@8
_TEXT	SEGMENT
_fd$ = 8						; size = 4
_mode$ = 12						; size = 4
_gzdopen@8 PROC						; COMDAT

; 287  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 288  :     char *path;         /* identifier for error messages */
; 289  :     gzFile gz;
; 290  : 
; 291  :     if (fd == -1 || (path = (char *)malloc(7 + 3 * sizeof(int))) == NULL)

  00004	8b 75 08	 mov	 esi, DWORD PTR _fd$[ebp]
  00007	57		 push	 edi
  00008	83 fe ff	 cmp	 esi, -1
  0000b	74 3d		 je	 SHORT $LN1@gzdopen
  0000d	6a 13		 push	 19			; 00000013H
  0000f	e8 00 00 00 00	 call	 _malloc
  00014	8b f8		 mov	 edi, eax
  00016	83 c4 04	 add	 esp, 4
  00019	85 ff		 test	 edi, edi
  0001b	74 2d		 je	 SHORT $LN1@gzdopen

; 293  : #if !defined(NO_snprintf) && !defined(NO_vsnprintf)
; 294  :     snprintf(path, 7 + 3 * sizeof(int), "<fd:%d>", fd); /* for debugging */

  0001d	56		 push	 esi
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_07EBNKNFJN@?$DMfd?3?$CFd?$DO?$AA@
  00023	6a 13		 push	 19			; 00000013H
  00025	57		 push	 edi
  00026	e8 00 00 00 00	 call	 __snprintf

; 295  : #else
; 296  :     sprintf(path, "<fd:%d>", fd);   /* for debugging */
; 297  : #endif
; 298  :     gz = gz_open(path, fd, mode);

  0002b	ff 75 0c	 push	 DWORD PTR _mode$[ebp]
  0002e	8b d6		 mov	 edx, esi
  00030	8b cf		 mov	 ecx, edi
  00032	e8 00 00 00 00	 call	 _gz_open

; 299  :     free(path);

  00037	57		 push	 edi
  00038	8b f0		 mov	 esi, eax
  0003a	e8 00 00 00 00	 call	 _free
  0003f	83 c4 18	 add	 esp, 24			; 00000018H

; 300  :     return gz;

  00042	8b c6		 mov	 eax, esi
  00044	5f		 pop	 edi
  00045	5e		 pop	 esi

; 301  : }

  00046	5d		 pop	 ebp
  00047	c2 08 00	 ret	 8
$LN1@gzdopen:
  0004a	5f		 pop	 edi

; 292  :         return NULL;

  0004b	33 c0		 xor	 eax, eax
  0004d	5e		 pop	 esi

; 301  : }

  0004e	5d		 pop	 ebp
  0004f	c2 08 00	 ret	 8
_gzdopen@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\vs_project\zlib-1.2.8\gzlib.c
;	COMDAT _gzopen_w@8
_TEXT	SEGMENT
_path$ = 8						; size = 4
_mode$ = 12						; size = 4
_gzopen_w@8 PROC					; COMDAT

; 308  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 309  :     return gz_open(path, -2, mode);

  00003	ff 75 0c	 push	 DWORD PTR _mode$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR _path$[ebp]
  00009	ba fe ff ff ff	 mov	 edx, -2			; fffffffeH
  0000e	e8 00 00 00 00	 call	 _gz_open
  00013	83 c4 04	 add	 esp, 4

; 310  : }

  00016	5d		 pop	 ebp
  00017	c2 08 00	 ret	 8
_gzopen_w@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\vs_project\zlib-1.2.8\gzlib.c
;	COMDAT _gzbuffer@8
_TEXT	SEGMENT
_file$ = 8						; size = 4
_size$ = 12						; size = 4
_gzbuffer@8 PROC					; COMDAT

; 317  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 318  :     gz_statep state;
; 319  : 
; 320  :     /* get internal structure and check integrity */
; 321  :     if (file == NULL)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	75 07		 jne	 SHORT $LN4@gzbuffer
$LN7@gzbuffer:

; 322  :         return -1;

  0000a	83 c8 ff	 or	 eax, -1

; 336  : }

  0000d	5d		 pop	 ebp
  0000e	c2 08 00	 ret	 8
$LN4@gzbuffer:

; 323  :     state = (gz_statep)file;
; 324  :     if (state->mode != GZ_READ && state->mode != GZ_WRITE)

  00011	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00014	3d 4f 1c 00 00	 cmp	 eax, 7247		; 00001c4fH
  00019	74 07		 je	 SHORT $LN3@gzbuffer
  0001b	3d b1 79 00 00	 cmp	 eax, 31153		; 000079b1H
  00020	75 e8		 jne	 SHORT $LN7@gzbuffer
$LN3@gzbuffer:

; 325  :         return -1;
; 326  : 
; 327  :     /* make sure we haven't already allocated memory */
; 328  :     if (state->size != 0)

  00022	83 79 1c 00	 cmp	 DWORD PTR [ecx+28], 0
  00026	75 e2		 jne	 SHORT $LN7@gzbuffer

; 329  :         return -1;
; 330  : 
; 331  :     /* check and set requested size */
; 332  :     if (size < 2)

  00028	8b 45 0c	 mov	 eax, DWORD PTR _size$[ebp]
  0002b	ba 02 00 00 00	 mov	 edx, 2
  00030	3b c2		 cmp	 eax, edx
  00032	0f 42 c2	 cmovb	 eax, edx

; 333  :         size = 2;               /* need two bytes to check magic header */
; 334  :     state->want = size;

  00035	89 41 20	 mov	 DWORD PTR [ecx+32], eax

; 335  :     return 0;

  00038	33 c0		 xor	 eax, eax

; 336  : }

  0003a	5d		 pop	 ebp
  0003b	c2 08 00	 ret	 8
_gzbuffer@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\vs_project\zlib-1.2.8\gzlib.c
;	COMDAT _gzrewind@4
_TEXT	SEGMENT
_file$ = 8						; size = 4
_gzrewind@4 PROC					; COMDAT

; 341  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	51		 push	 ecx
  00007	56		 push	 esi

; 342  :     gz_statep state;
; 343  : 
; 344  :     /* get internal structure */
; 345  :     if (file == NULL)

  00008	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
  0000b	85 f6		 test	 esi, esi
  0000d	74 3f		 je	 SHORT $LN2@gzrewind

; 346  :         return -1;
; 347  :     state = (gz_statep)file;
; 348  : 
; 349  :     /* check that we're reading and that there's no error */
; 350  :     if (state->mode != GZ_READ ||
; 351  :             (state->err != Z_OK && state->err != Z_BUF_ERROR))

  0000f	81 7e 10 4f 1c
	00 00		 cmp	 DWORD PTR [esi+16], 7247 ; 00001c4fH
  00016	75 36		 jne	 SHORT $LN2@gzrewind
  00018	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  0001b	85 c0		 test	 eax, eax
  0001d	74 05		 je	 SHORT $LN3@gzrewind
  0001f	83 f8 fb	 cmp	 eax, -5			; fffffffbH
  00022	75 2a		 jne	 SHORT $LN2@gzrewind
$LN3@gzrewind:

; 353  : 
; 354  :     /* back up and start over */
; 355  :     if (LSEEK(state->fd, state->start, SEEK_SET) == -1)

  00024	6a 00		 push	 0
  00026	ff 76 3c	 push	 DWORD PTR [esi+60]
  00029	ff 76 38	 push	 DWORD PTR [esi+56]
  0002c	ff 76 14	 push	 DWORD PTR [esi+20]
  0002f	e8 00 00 00 00	 call	 __lseeki64
  00034	23 c2		 and	 eax, edx
  00036	83 c4 10	 add	 esp, 16			; 00000010H
  00039	83 f8 ff	 cmp	 eax, -1
  0003c	74 10		 je	 SHORT $LN2@gzrewind

; 356  :         return -1;
; 357  :     gz_reset(state);

  0003e	8b ce		 mov	 ecx, esi
  00040	e8 00 00 00 00	 call	 _gz_reset

; 358  :     return 0;

  00045	33 c0		 xor	 eax, eax

; 359  : }

  00047	5e		 pop	 esi
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c2 04 00	 ret	 4
$LN2@gzrewind:

; 352  :         return -1;

  0004e	83 c8 ff	 or	 eax, -1

; 359  : }

  00051	5e		 pop	 esi
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c2 04 00	 ret	 4
_gzrewind@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\vs_project\zlib-1.2.8\gzlib.c
;	COMDAT _gzseek64@16
_TEXT	SEGMENT
tv405 = 8						; size = 8
_offset$ = 8						; size = 8
_gzseek64@16 PROC					; COMDAT
; _file$ = ecx
; _whence$ = edx

; 366  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	57		 push	 edi

; 367  :     unsigned n;
; 368  :     z_off64_t ret;
; 369  :     gz_statep state;
; 370  : 
; 371  :     /* get internal structure and check integrity */
; 372  :     if (file == NULL)

  00009	85 f6		 test	 esi, esi
  0000b	75 0d		 jne	 SHORT $LN15@gzseek64
$LN26@gzseek64:

; 373  :         return -1;

  0000d	83 c8 ff	 or	 eax, -1
  00010	0b d0		 or	 edx, eax

; 436  : }

  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx
  00015	59		 pop	 ecx
  00016	5d		 pop	 ebp
  00017	c2 08 00	 ret	 8
$LN15@gzseek64:

; 374  :     state = (gz_statep)file;
; 375  :     if (state->mode != GZ_READ && state->mode != GZ_WRITE)

  0001a	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0001d	81 f9 4f 1c 00
	00		 cmp	 ecx, 7247		; 00001c4fH
  00023	74 08		 je	 SHORT $LN14@gzseek64
  00025	81 f9 b1 79 00
	00		 cmp	 ecx, 31153		; 000079b1H
  0002b	75 e0		 jne	 SHORT $LN26@gzseek64
$LN14@gzseek64:

; 376  :         return -1;
; 377  : 
; 378  :     /* check that there's no error */
; 379  :     if (state->err != Z_OK && state->err != Z_BUF_ERROR)

  0002d	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  00030	85 c0		 test	 eax, eax
  00032	74 05		 je	 SHORT $LN13@gzseek64
  00034	83 f8 fb	 cmp	 eax, -5			; fffffffbH
  00037	75 d4		 jne	 SHORT $LN26@gzseek64
$LN13@gzseek64:

; 380  :         return -1;
; 381  : 
; 382  :     /* can only seek from start or relative to current position */
; 383  :     if (whence != SEEK_SET && whence != SEEK_CUR)

  00039	85 d2		 test	 edx, edx
  0003b	74 19		 je	 SHORT $LN20@gzseek64
  0003d	83 fa 01	 cmp	 edx, 1
  00040	75 cb		 jne	 SHORT $LN26@gzseek64

; 389  :     else if (state->seek)

  00042	83 7e 58 00	 cmp	 DWORD PTR [esi+88], 0

; 390  :         offset += state->skip;

  00046	8b 7d 08	 mov	 edi, DWORD PTR _offset$[ebp]
  00049	8b 5d 0c	 mov	 ebx, DWORD PTR _offset$[ebp+4]
  0004c	74 14		 je	 SHORT $LN9@gzseek64
  0004e	03 7e 50	 add	 edi, DWORD PTR [esi+80]
  00051	13 5e 54	 adc	 ebx, DWORD PTR [esi+84]
  00054	eb 0c		 jmp	 SHORT $LN9@gzseek64
$LN20@gzseek64:

; 384  :         return -1;
; 385  : 
; 386  :     /* normalize offset to a SEEK_CUR specification */
; 387  :     if (whence == SEEK_SET)
; 388  :         offset -= state->x.pos;

  00056	8b 7d 08	 mov	 edi, DWORD PTR _offset$[ebp]
  00059	2b 7e 08	 sub	 edi, DWORD PTR [esi+8]
  0005c	8b 5d 0c	 mov	 ebx, DWORD PTR _offset$[ebp+4]
  0005f	1b 5e 0c	 sbb	 ebx, DWORD PTR [esi+12]
$LN9@gzseek64:

; 391  :     state->seek = 0;

  00062	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0

; 392  : 
; 393  :     /* if within raw area while reading, just go there */
; 394  :     if (state->mode == GZ_READ && state->how == COPY &&
; 395  :             state->x.pos + offset >= 0) {

  00069	81 f9 4f 1c 00
	00		 cmp	 ecx, 7247		; 00001c4fH
  0006f	0f 85 82 00 00
	00		 jne	 $LN8@gzseek64
  00075	83 7e 30 01	 cmp	 DWORD PTR [esi+48], 1
  00079	75 7c		 jne	 SHORT $LN8@gzseek64
  0007b	8b d7		 mov	 edx, edi
  0007d	8b c3		 mov	 eax, ebx
  0007f	03 56 08	 add	 edx, DWORD PTR [esi+8]
  00082	13 46 0c	 adc	 eax, DWORD PTR [esi+12]
  00085	89 45 0c	 mov	 DWORD PTR tv405[ebp+4], eax
  00088	78 6d		 js	 SHORT $LN8@gzseek64
  0008a	7f 04		 jg	 SHORT $LN21@gzseek64
  0008c	85 d2		 test	 edx, edx
  0008e	72 67		 jb	 SHORT $LN8@gzseek64
$LN21@gzseek64:

; 396  :         ret = LSEEK(state->fd, offset - state->x.have, SEEK_CUR);

  00090	8b cf		 mov	 ecx, edi
  00092	8b c3		 mov	 eax, ebx
  00094	2b 0e		 sub	 ecx, DWORD PTR [esi]
  00096	6a 01		 push	 1
  00098	83 d8 00	 sbb	 eax, 0
  0009b	50		 push	 eax
  0009c	51		 push	 ecx
  0009d	ff 76 14	 push	 DWORD PTR [esi+20]
  000a0	e8 00 00 00 00	 call	 __lseeki64

; 397  :         if (ret == -1)

  000a5	23 c2		 and	 eax, edx
  000a7	83 c4 10	 add	 esp, 16			; 00000010H
  000aa	83 f8 ff	 cmp	 eax, -1
  000ad	0f 84 5a ff ff
	ff		 je	 $LN26@gzseek64

; 398  :             return -1;
; 399  :         state->x.have = 0;
; 400  :         state->eof = 0;
; 401  :         state->past = 0;
; 402  :         state->seek = 0;
; 403  :         gz_error(state, Z_OK, NULL);

  000b3	6a 00		 push	 0
  000b5	33 d2		 xor	 edx, edx
  000b7	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  000bd	8b ce		 mov	 ecx, esi
  000bf	c7 46 40 00 00
	00 00		 mov	 DWORD PTR [esi+64], 0
  000c6	c7 46 44 00 00
	00 00		 mov	 DWORD PTR [esi+68], 0
  000cd	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0
  000d4	e8 00 00 00 00	 call	 _gz_error
  000d9	83 c4 04	 add	 esp, 4

; 404  :         state->strm.avail_in = 0;

  000dc	c7 46 68 00 00
	00 00		 mov	 DWORD PTR [esi+104], 0

; 405  :         state->x.pos += offset;

  000e3	01 7e 08	 add	 DWORD PTR [esi+8], edi

; 406  :         return state->x.pos;

  000e6	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000e9	11 5e 0c	 adc	 DWORD PTR [esi+12], ebx
  000ec	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]

; 436  : }

  000ef	5f		 pop	 edi
  000f0	5e		 pop	 esi
  000f1	5b		 pop	 ebx
  000f2	59		 pop	 ecx
  000f3	5d		 pop	 ebp
  000f4	c2 08 00	 ret	 8
$LN8@gzseek64:

; 407  :     }
; 408  : 
; 409  :     /* calculate skip amount, rewinding if needed for back seek when reading */
; 410  :     if (offset < 0) {

  000f7	85 db		 test	 ebx, ebx
  000f9	7f 39		 jg	 SHORT $LN3@gzseek64
  000fb	7c 04		 jl	 SHORT $LN22@gzseek64
  000fd	85 ff		 test	 edi, edi
  000ff	73 33		 jae	 SHORT $LN3@gzseek64
$LN22@gzseek64:

; 411  :         if (state->mode != GZ_READ)         /* writing -- can't go backwards */

  00101	81 f9 4f 1c 00
	00		 cmp	 ecx, 7247		; 00001c4fH
  00107	0f 85 00 ff ff
	ff		 jne	 $LN26@gzseek64

; 412  :             return -1;
; 413  :         offset += state->x.pos;

  0010d	03 7e 08	 add	 edi, DWORD PTR [esi+8]
  00110	13 5e 0c	 adc	 ebx, DWORD PTR [esi+12]

; 414  :         if (offset < 0)                     /* before start of file! */

  00113	85 db		 test	 ebx, ebx
  00115	7f 0e		 jg	 SHORT $LN4@gzseek64
  00117	0f 8c f0 fe ff
	ff		 jl	 $LN26@gzseek64
  0011d	85 ff		 test	 edi, edi
  0011f	0f 82 e8 fe ff
	ff		 jb	 $LN26@gzseek64
$LN4@gzseek64:

; 415  :             return -1;
; 416  :         if (gzrewind(file) == -1)           /* rewind, then skip to offset */

  00125	56		 push	 esi
  00126	e8 00 00 00 00	 call	 _gzrewind@4
  0012b	83 f8 ff	 cmp	 eax, -1
  0012e	0f 84 d9 fe ff
	ff		 je	 $LN26@gzseek64
$LN3@gzseek64:

; 417  :             return -1;
; 418  :     }
; 419  : 
; 420  :     /* if reading, skip what's in output buffer (one less gzgetc() check) */
; 421  :     if (state->mode == GZ_READ) {

  00134	81 7e 10 4f 1c
	00 00		 cmp	 DWORD PTR [esi+16], 7247 ; 00001c4fH
  0013b	75 27		 jne	 SHORT $LN2@gzseek64

; 422  :         n = GT_OFF(state->x.have) || (z_off64_t)state->x.have > offset ?
; 423  :             (unsigned)offset : state->x.have;

  0013d	8b 06		 mov	 eax, DWORD PTR [esi]
  0013f	33 c9		 xor	 ecx, ecx
  00141	3b cb		 cmp	 ecx, ebx
  00143	7f 0a		 jg	 SHORT $LN18@gzseek64
  00145	7c 04		 jl	 SHORT $LN24@gzseek64
  00147	3b c7		 cmp	 eax, edi
  00149	77 04		 ja	 SHORT $LN18@gzseek64
$LN24@gzseek64:
  0014b	8b c8		 mov	 ecx, eax
  0014d	eb 02		 jmp	 SHORT $LN19@gzseek64
$LN18@gzseek64:
  0014f	8b cf		 mov	 ecx, edi
$LN19@gzseek64:

; 424  :         state->x.have -= n;
; 425  :         state->x.next += n;

  00151	01 4e 04	 add	 DWORD PTR [esi+4], ecx
  00154	2b c1		 sub	 eax, ecx

; 426  :         state->x.pos += n;

  00156	01 4e 08	 add	 DWORD PTR [esi+8], ecx
  00159	89 06		 mov	 DWORD PTR [esi], eax
  0015b	83 56 0c 00	 adc	 DWORD PTR [esi+12], 0

; 427  :         offset -= n;

  0015f	2b f9		 sub	 edi, ecx
  00161	83 db 00	 sbb	 ebx, 0
$LN2@gzseek64:

; 428  :     }
; 429  : 
; 430  :     /* request skip (if not zero) */
; 431  :     if (offset) {

  00164	8b c7		 mov	 eax, edi
  00166	0b c3		 or	 eax, ebx
  00168	74 0d		 je	 SHORT $LN1@gzseek64

; 432  :         state->seek = 1;

  0016a	c7 46 58 01 00
	00 00		 mov	 DWORD PTR [esi+88], 1

; 433  :         state->skip = offset;

  00171	89 7e 50	 mov	 DWORD PTR [esi+80], edi
  00174	89 5e 54	 mov	 DWORD PTR [esi+84], ebx
$LN1@gzseek64:

; 434  :     }
; 435  :     return state->x.pos + offset;

  00177	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0017a	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  0017d	03 c7		 add	 eax, edi

; 436  : }

  0017f	5f		 pop	 edi
  00180	5e		 pop	 esi
  00181	13 d3		 adc	 edx, ebx
  00183	5b		 pop	 ebx
  00184	59		 pop	 ecx
  00185	5d		 pop	 ebp
  00186	c2 08 00	 ret	 8
_gzseek64@16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\vs_project\zlib-1.2.8\gzlib.c
;	COMDAT _gzseek@12
_TEXT	SEGMENT
_file$ = 8						; size = 4
_offset$ = 12						; size = 4
_whence$ = 16						; size = 4
_gzseek@12 PROC						; COMDAT

; 443  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	51		 push	 ecx

; 444  :     z_off64_t ret;
; 445  : 
; 446  :     ret = gzseek64(file, (z_off64_t)offset, whence);

  00007	8b 45 0c	 mov	 eax, DWORD PTR _offset$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  0000d	99		 cdq
  0000e	56		 push	 esi
  0000f	52		 push	 edx
  00010	8b 55 10	 mov	 edx, DWORD PTR _whence$[ebp]
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 _gzseek64@16
  00019	8b c8		 mov	 ecx, eax
  0001b	8b f2		 mov	 esi, edx

; 447  :     return ret == (z_off_t)ret ? (z_off_t)ret : -1;

  0001d	99		 cdq
  0001e	3b c8		 cmp	 ecx, eax
  00020	75 0d		 jne	 SHORT $LN3@gzseek
  00022	3b f2		 cmp	 esi, edx
  00024	75 09		 jne	 SHORT $LN3@gzseek
  00026	8b c1		 mov	 eax, ecx

; 448  : }

  00028	5e		 pop	 esi
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 0c 00	 ret	 12			; 0000000cH
$LN3@gzseek:

; 447  :     return ret == (z_off_t)ret ? (z_off_t)ret : -1;

  0002f	83 c8 ff	 or	 eax, -1

; 448  : }

  00032	5e		 pop	 esi
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c2 0c 00	 ret	 12			; 0000000cH
_gzseek@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\vs_project\zlib-1.2.8\gzlib.c
;	COMDAT _gztell64@4
_TEXT	SEGMENT
tv73 = -8						; size = 8
_gztell64@4 PROC					; COMDAT
; _file$ = ecx

; 453  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 454  :     gz_statep state;
; 455  : 
; 456  :     /* get internal structure and check integrity */
; 457  :     if (file == NULL)

  00006	85 c9		 test	 ecx, ecx
  00008	75 09		 jne	 SHORT $LN2@gztell64
$LN7@gztell64:

; 458  :         return -1;

  0000a	83 c8 ff	 or	 eax, -1
  0000d	0b d0		 or	 edx, eax

; 465  : }

  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
$LN2@gztell64:

; 459  :     state = (gz_statep)file;
; 460  :     if (state->mode != GZ_READ && state->mode != GZ_WRITE)

  00013	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00016	3d 4f 1c 00 00	 cmp	 eax, 7247		; 00001c4fH
  0001b	74 07		 je	 SHORT $LN1@gztell64
  0001d	3d b1 79 00 00	 cmp	 eax, 31153		; 000079b1H
  00022	75 e6		 jne	 SHORT $LN7@gztell64
$LN1@gztell64:

; 461  :         return -1;
; 462  : 
; 463  :     /* return position */
; 464  :     return state->x.pos + (state->seek ? state->skip : 0);

  00024	83 79 58 00	 cmp	 DWORD PTR [ecx+88], 0
  00028	56		 push	 esi
  00029	74 15		 je	 SHORT $LN5@gztell64
  0002b	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  0002e	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00031	8b 71 54	 mov	 esi, DWORD PTR [ecx+84]
  00034	03 c2		 add	 eax, edx
  00036	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00039	13 d6		 adc	 edx, esi
  0003b	5e		 pop	 esi

; 465  : }

  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
$LN5@gztell64:

; 461  :         return -1;
; 462  : 
; 463  :     /* return position */
; 464  :     return state->x.pos + (state->seek ? state->skip : 0);

  00040	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00043	0f 57 c0	 xorps	 xmm0, xmm0
  00046	66 0f 13 45 f8	 movlpd	 QWORD PTR tv73[ebp], xmm0
  0004b	8b 55 f8	 mov	 edx, DWORD PTR tv73[ebp]
  0004e	03 c2		 add	 eax, edx
  00050	8b 75 fc	 mov	 esi, DWORD PTR tv73[ebp+4]
  00053	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00056	13 d6		 adc	 edx, esi
  00058	5e		 pop	 esi

; 465  : }

  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
_gztell64@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\vs_project\zlib-1.2.8\gzlib.c
;	COMDAT _gztell@4
_TEXT	SEGMENT
_file$ = 8						; size = 4
_gztell@4 PROC						; COMDAT

; 470  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 471  :     z_off64_t ret;
; 472  : 
; 473  :     ret = gztell64(file);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  00006	56		 push	 esi
  00007	e8 00 00 00 00	 call	 _gztell64@4
  0000c	8b c8		 mov	 ecx, eax
  0000e	8b f2		 mov	 esi, edx

; 474  :     return ret == (z_off_t)ret ? (z_off_t)ret : -1;

  00010	99		 cdq
  00011	3b c8		 cmp	 ecx, eax
  00013	75 0b		 jne	 SHORT $LN3@gztell
  00015	3b f2		 cmp	 esi, edx
  00017	75 07		 jne	 SHORT $LN3@gztell
  00019	8b c1		 mov	 eax, ecx
  0001b	5e		 pop	 esi

; 475  : }

  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
$LN3@gztell:

; 474  :     return ret == (z_off_t)ret ? (z_off_t)ret : -1;

  00020	83 c8 ff	 or	 eax, -1
  00023	5e		 pop	 esi

; 475  : }

  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
_gztell@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\vs_project\zlib-1.2.8\gzlib.c
;	COMDAT _gzoffset64@4
_TEXT	SEGMENT
_gzoffset64@4 PROC					; COMDAT
; _file$ = ecx

; 480  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 481  :     z_off64_t offset;
; 482  :     gz_statep state;
; 483  : 
; 484  :     /* get internal structure and check integrity */
; 485  :     if (file == NULL)

  00003	85 f6		 test	 esi, esi
  00005	75 07		 jne	 SHORT $LN4@gzoffset64
$LN7@gzoffset64:

; 486  :         return -1;

  00007	83 c8 ff	 or	 eax, -1
  0000a	0b d0		 or	 edx, eax

; 497  :     return offset;
; 498  : }

  0000c	5e		 pop	 esi
  0000d	c3		 ret	 0
$LN4@gzoffset64:

; 487  :     state = (gz_statep)file;
; 488  :     if (state->mode != GZ_READ && state->mode != GZ_WRITE)

  0000e	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00011	3d 4f 1c 00 00	 cmp	 eax, 7247		; 00001c4fH
  00016	74 07		 je	 SHORT $LN3@gzoffset64
  00018	3d b1 79 00 00	 cmp	 eax, 31153		; 000079b1H
  0001d	75 e8		 jne	 SHORT $LN7@gzoffset64
$LN3@gzoffset64:

; 489  :         return -1;
; 490  : 
; 491  :     /* compute and return effective offset in file */
; 492  :     offset = LSEEK(state->fd, 0, SEEK_CUR);

  0001f	6a 01		 push	 1
  00021	6a 00		 push	 0
  00023	6a 00		 push	 0
  00025	ff 76 14	 push	 DWORD PTR [esi+20]
  00028	e8 00 00 00 00	 call	 __lseeki64

; 493  :     if (offset == -1)

  0002d	8b c8		 mov	 ecx, eax
  0002f	83 c4 10	 add	 esp, 16			; 00000010H
  00032	23 ca		 and	 ecx, edx
  00034	83 f9 ff	 cmp	 ecx, -1
  00037	74 ce		 je	 SHORT $LN7@gzoffset64

; 494  :         return -1;
; 495  :     if (state->mode == GZ_READ)             /* reading */

  00039	81 7e 10 4f 1c
	00 00		 cmp	 DWORD PTR [esi+16], 7247 ; 00001c4fH
  00040	75 06		 jne	 SHORT $LN5@gzoffset64

; 496  :         offset -= state->strm.avail_in;     /* don't count buffered input */

  00042	2b 46 68	 sub	 eax, DWORD PTR [esi+104]
  00045	83 da 00	 sbb	 edx, 0
$LN5@gzoffset64:

; 497  :     return offset;
; 498  : }

  00048	5e		 pop	 esi
  00049	c3		 ret	 0
_gzoffset64@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\vs_project\zlib-1.2.8\gzlib.c
;	COMDAT _gzoffset@4
_TEXT	SEGMENT
_file$ = 8						; size = 4
_gzoffset@4 PROC					; COMDAT

; 503  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	51		 push	 ecx

; 504  :     z_off64_t ret;
; 505  : 
; 506  :     ret = gzoffset64(file);

  00007	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  0000a	56		 push	 esi
  0000b	e8 00 00 00 00	 call	 _gzoffset64@4
  00010	8b c8		 mov	 ecx, eax
  00012	8b f2		 mov	 esi, edx

; 507  :     return ret == (z_off_t)ret ? (z_off_t)ret : -1;

  00014	99		 cdq
  00015	3b c8		 cmp	 ecx, eax
  00017	75 0d		 jne	 SHORT $LN3@gzoffset
  00019	3b f2		 cmp	 esi, edx
  0001b	75 09		 jne	 SHORT $LN3@gzoffset
  0001d	8b c1		 mov	 eax, ecx

; 508  : }

  0001f	5e		 pop	 esi
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
$LN3@gzoffset:

; 507  :     return ret == (z_off_t)ret ? (z_off_t)ret : -1;

  00026	83 c8 ff	 or	 eax, -1

; 508  : }

  00029	5e		 pop	 esi
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
_gzoffset@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\vs_project\zlib-1.2.8\gzlib.c
;	COMDAT _gzeof@4
_TEXT	SEGMENT
_file$ = 8						; size = 4
_gzeof@4 PROC						; COMDAT

; 513  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 514  :     gz_statep state;
; 515  : 
; 516  :     /* get internal structure and check integrity */
; 517  :     if (file == NULL)

  00003	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 22		 je	 SHORT $LN5@gzeof

; 518  :         return 0;
; 519  :     state = (gz_statep)file;
; 520  :     if (state->mode != GZ_READ && state->mode != GZ_WRITE)

  0000a	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0000d	81 f9 4f 1c 00
	00		 cmp	 ecx, 7247		; 00001c4fH
  00013	74 10		 je	 SHORT $LN8@gzeof
  00015	81 f9 b1 79 00
	00		 cmp	 ecx, 31153		; 000079b1H
  0001b	75 0f		 jne	 SHORT $LN5@gzeof

; 521  :         return 0;
; 522  : 
; 523  :     /* return end-of-file state */
; 524  :     return state->mode == GZ_READ ? state->past : 0;

  0001d	81 f9 4f 1c 00
	00		 cmp	 ecx, 7247		; 00001c4fH
  00023	75 07		 jne	 SHORT $LN5@gzeof
$LN8@gzeof:
  00025	8b 40 44	 mov	 eax, DWORD PTR [eax+68]

; 525  : }

  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
$LN5@gzeof:

; 521  :         return 0;
; 522  : 
; 523  :     /* return end-of-file state */
; 524  :     return state->mode == GZ_READ ? state->past : 0;

  0002c	33 c0		 xor	 eax, eax

; 525  : }

  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
_gzeof@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\vs_project\zlib-1.2.8\gzlib.c
;	COMDAT _gzerror@8
_TEXT	SEGMENT
_file$ = 8						; size = 4
_errnum$ = 12						; size = 4
_gzerror@8 PROC						; COMDAT

; 531  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 532  :     gz_statep state;
; 533  : 
; 534  :     /* get internal structure and check integrity */
; 535  :     if (file == NULL)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	75 06		 jne	 SHORT $LN3@gzerror
$LN10@gzerror:

; 536  :         return NULL;

  0000a	33 c0		 xor	 eax, eax

; 546  : }

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
$LN3@gzerror:

; 537  :     state = (gz_statep)file;
; 538  :     if (state->mode != GZ_READ && state->mode != GZ_WRITE)

  00010	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00013	3d 4f 1c 00 00	 cmp	 eax, 7247		; 00001c4fH
  00018	74 07		 je	 SHORT $LN2@gzerror
  0001a	3d b1 79 00 00	 cmp	 eax, 31153		; 000079b1H
  0001f	75 e9		 jne	 SHORT $LN10@gzerror
$LN2@gzerror:

; 539  :         return NULL;
; 540  : 
; 541  :     /* return error information */
; 542  :     if (errnum != NULL)

  00021	8b 55 0c	 mov	 edx, DWORD PTR _errnum$[ebp]
  00024	85 d2		 test	 edx, edx
  00026	74 05		 je	 SHORT $LN1@gzerror

; 543  :         *errnum = state->err;

  00028	8b 41 5c	 mov	 eax, DWORD PTR [ecx+92]
  0002b	89 02		 mov	 DWORD PTR [edx], eax
$LN1@gzerror:

; 544  :     return state->err == Z_MEM_ERROR ? "out of memory" :
; 545  :                                        (state->msg == NULL ? "" : state->msg);

  0002d	83 79 5c fc	 cmp	 DWORD PTR [ecx+92], -4	; fffffffcH
  00031	75 09		 jne	 SHORT $LN8@gzerror
  00033	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0O@BNNCBLEN@out?5of?5memory?$AA@

; 546  : }

  00038	5d		 pop	 ebp
  00039	c2 08 00	 ret	 8
$LN8@gzerror:

; 544  :     return state->err == Z_MEM_ERROR ? "out of memory" :
; 545  :                                        (state->msg == NULL ? "" : state->msg);

  0003c	8b 49 60	 mov	 ecx, DWORD PTR [ecx+96]
  0003f	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
  00044	85 c9		 test	 ecx, ecx
  00046	0f 45 c1	 cmovne	 eax, ecx

; 546  : }

  00049	5d		 pop	 ebp
  0004a	c2 08 00	 ret	 8
_gzerror@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\vs_project\zlib-1.2.8\gzlib.c
;	COMDAT _gzclearerr@4
_TEXT	SEGMENT
_file$ = 8						; size = 4
_gzclearerr@4 PROC					; COMDAT

; 551  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 552  :     gz_statep state;
; 553  : 
; 554  :     /* get internal structure and check integrity */
; 555  :     if (file == NULL)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 32		 je	 SHORT $LN4@gzclearerr

; 556  :         return;
; 557  :     state = (gz_statep)file;
; 558  :     if (state->mode != GZ_READ && state->mode != GZ_WRITE)

  0000a	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0000d	3d 4f 1c 00 00	 cmp	 eax, 7247		; 00001c4fH
  00012	74 0e		 je	 SHORT $LN7@gzclearerr
  00014	3d b1 79 00 00	 cmp	 eax, 31153		; 000079b1H
  00019	75 21		 jne	 SHORT $LN4@gzclearerr

; 559  :         return;
; 560  : 
; 561  :     /* clear error and end-of-file */
; 562  :     if (state->mode == GZ_READ) {

  0001b	3d 4f 1c 00 00	 cmp	 eax, 7247		; 00001c4fH
  00020	75 0e		 jne	 SHORT $LN1@gzclearerr
$LN7@gzclearerr:

; 563  :         state->eof = 0;

  00022	c7 41 40 00 00
	00 00		 mov	 DWORD PTR [ecx+64], 0

; 564  :         state->past = 0;

  00029	c7 41 44 00 00
	00 00		 mov	 DWORD PTR [ecx+68], 0
$LN1@gzclearerr:

; 565  :     }
; 566  :     gz_error(state, Z_OK, NULL);

  00030	6a 00		 push	 0
  00032	33 d2		 xor	 edx, edx
  00034	e8 00 00 00 00	 call	 _gz_error
  00039	83 c4 04	 add	 esp, 4
$LN4@gzclearerr:

; 567  : }

  0003c	5d		 pop	 ebp
  0003d	c2 04 00	 ret	 4
_gzclearerr@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\vs_project\zlib-1.2.8\gzlib.c
;	COMDAT _gz_error
_TEXT	SEGMENT
tv129 = 8						; size = 4
_msg$ = 8						; size = 4
_gz_error PROC						; COMDAT
; _state$ = ecx
; _err$ = edx

; 579  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	57		 push	 edi
  00008	8b fa		 mov	 edi, edx

; 580  :     /* free previously allocated message and clear */
; 581  :     if (state->msg != NULL) {

  0000a	8b 46 60	 mov	 eax, DWORD PTR [esi+96]
  0000d	85 c0		 test	 eax, eax
  0000f	74 16		 je	 SHORT $LN6@gz_error

; 582  :         if (state->err != Z_MEM_ERROR)

  00011	83 7e 5c fc	 cmp	 DWORD PTR [esi+92], -4	; fffffffcH
  00015	74 09		 je	 SHORT $LN5@gz_error

; 583  :             free(state->msg);

  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 _free
  0001d	83 c4 04	 add	 esp, 4
$LN5@gz_error:

; 584  :         state->msg = NULL;

  00020	c7 46 60 00 00
	00 00		 mov	 DWORD PTR [esi+96], 0
$LN6@gz_error:

; 585  :     }
; 586  : 
; 587  :     /* if fatal, set state->x.have to 0 so that the gzgetc() macro fails */
; 588  :     if (err != Z_OK && err != Z_BUF_ERROR)

  00027	85 ff		 test	 edi, edi
  00029	74 0b		 je	 SHORT $LN4@gz_error
  0002b	83 ff fb	 cmp	 edi, -5			; fffffffbH
  0002e	74 06		 je	 SHORT $LN4@gz_error

; 589  :         state->x.have = 0;

  00030	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
$LN4@gz_error:

; 590  : 
; 591  :     /* set error code, and if no message, then done */
; 592  :     state->err = err;
; 593  :     if (msg == NULL)

  00036	8b 5d 08	 mov	 ebx, DWORD PTR _msg$[ebp]
  00039	89 7e 5c	 mov	 DWORD PTR [esi+92], edi
  0003c	85 db		 test	 ebx, ebx
  0003e	0f 84 88 00 00
	00		 je	 $LN7@gz_error

; 594  :         return;
; 595  : 
; 596  :     /* for an out of memory error, return literal string when requested */
; 597  :     if (err == Z_MEM_ERROR)

  00044	83 ff fc	 cmp	 edi, -4			; fffffffcH
  00047	0f 84 7f 00 00
	00		 je	 $LN7@gz_error

; 598  :         return;
; 599  : 
; 600  :     /* construct error message with path */
; 601  :     if ((state->msg = (char *)malloc(strlen(state->path) + strlen(msg) + 3)) ==
; 602  :             NULL) {

  0004d	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00050	8b c8		 mov	 ecx, eax
  00052	89 45 08	 mov	 DWORD PTR tv129[ebp], eax
  00055	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL9@gz_error:
  00058	8a 01		 mov	 al, BYTE PTR [ecx]
  0005a	41		 inc	 ecx
  0005b	84 c0		 test	 al, al
  0005d	75 f9		 jne	 SHORT $LL9@gz_error
  0005f	2b ca		 sub	 ecx, edx
  00061	8b d3		 mov	 edx, ebx
  00063	8d 7a 01	 lea	 edi, DWORD PTR [edx+1]
$LL10@gz_error:
  00066	8a 02		 mov	 al, BYTE PTR [edx]
  00068	42		 inc	 edx
  00069	84 c0		 test	 al, al
  0006b	75 f9		 jne	 SHORT $LL10@gz_error
  0006d	2b d7		 sub	 edx, edi
  0006f	8d 41 03	 lea	 eax, DWORD PTR [ecx+3]
  00072	03 c2		 add	 eax, edx
  00074	50		 push	 eax
  00075	e8 00 00 00 00	 call	 _malloc
  0007a	8b f8		 mov	 edi, eax
  0007c	83 c4 04	 add	 esp, 4
  0007f	89 7e 60	 mov	 DWORD PTR [esi+96], edi
  00082	85 ff		 test	 edi, edi
  00084	75 0c		 jne	 SHORT $LN1@gz_error

; 603  :         state->err = Z_MEM_ERROR;

  00086	5f		 pop	 edi
  00087	c7 46 5c fc ff
	ff ff		 mov	 DWORD PTR [esi+92], -4	; fffffffcH
  0008e	5e		 pop	 esi
  0008f	5b		 pop	 ebx

; 609  : #else
; 610  :     strcpy(state->msg, state->path);
; 611  :     strcat(state->msg, ": ");
; 612  :     strcat(state->msg, msg);
; 613  : #endif
; 614  :     return;
; 615  : }

  00090	5d		 pop	 ebp
  00091	c3		 ret	 0
$LN1@gz_error:

; 604  :         return;
; 605  :     }
; 606  : #if !defined(NO_snprintf) && !defined(NO_vsnprintf)
; 607  :     snprintf(state->msg, strlen(state->path) + strlen(msg) + 3,
; 608  :              "%s%s%s", state->path, ": ", msg);

  00092	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00095	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL11@gz_error:
  00098	8a 01		 mov	 al, BYTE PTR [ecx]
  0009a	41		 inc	 ecx
  0009b	84 c0		 test	 al, al
  0009d	75 f9		 jne	 SHORT $LL11@gz_error
  0009f	2b ca		 sub	 ecx, edx
  000a1	8b d3		 mov	 edx, ebx
  000a3	8d 72 01	 lea	 esi, DWORD PTR [edx+1]
$LL12@gz_error:
  000a6	8a 02		 mov	 al, BYTE PTR [edx]
  000a8	42		 inc	 edx
  000a9	84 c0		 test	 al, al
  000ab	75 f9		 jne	 SHORT $LL12@gz_error
  000ad	53		 push	 ebx
  000ae	68 00 00 00 00	 push	 OFFSET ??_C@_02LMMGGCAJ@?3?5?$AA@
  000b3	ff 75 08	 push	 DWORD PTR tv129[ebp]
  000b6	2b d6		 sub	 edx, esi
  000b8	8d 41 03	 lea	 eax, DWORD PTR [ecx+3]
  000bb	68 00 00 00 00	 push	 OFFSET ??_C@_06DIJPEION@?$CFs?$CFs?$CFs?$AA@
  000c0	03 c2		 add	 eax, edx
  000c2	50		 push	 eax
  000c3	57		 push	 edi
  000c4	e8 00 00 00 00	 call	 __snprintf
  000c9	83 c4 18	 add	 esp, 24			; 00000018H
$LN7@gz_error:
  000cc	5f		 pop	 edi
  000cd	5e		 pop	 esi
  000ce	5b		 pop	 ebx

; 609  : #else
; 610  :     strcpy(state->msg, state->path);
; 611  :     strcat(state->msg, ": ");
; 612  :     strcat(state->msg, msg);
; 613  : #endif
; 614  :     return;
; 615  : }

  000cf	5d		 pop	 ebp
  000d0	c3		 ret	 0
_gz_error ENDP
_TEXT	ENDS
END
